// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: CdbMsg.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "CdbMsg.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace edu {
namespace vanderbilt {
namespace isis {
namespace meta {

namespace {

const ::google::protobuf::Descriptor* Control_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Control_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Control_ActionType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* PayloadRaw_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PayloadRaw_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* PayloadRaw_EncodingType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* Payload_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Payload_reflection_ = NULL;
const ::google::protobuf::Descriptor* Notice_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Notice_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Notice_NoticeType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_CdbMsg_2eproto() {
  protobuf_AddDesc_CdbMsg_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "CdbMsg.proto");
  GOOGLE_CHECK(file != NULL);
  Control_descriptor_ = file->message_type(0);
  static const int Control_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Control, action_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Control, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Control, topic_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Control, notices_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Control, payload_),
  };
  Control_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Control_descriptor_,
      Control::default_instance_,
      Control_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Control, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Control, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Control));
  Control_ActionType_descriptor_ = Control_descriptor_->enum_type(0);
  PayloadRaw_descriptor_ = file->message_type(1);
  static const int PayloadRaw_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PayloadRaw, encoding_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PayloadRaw, payload_),
  };
  PayloadRaw_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PayloadRaw_descriptor_,
      PayloadRaw::default_instance_,
      PayloadRaw_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PayloadRaw, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PayloadRaw, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PayloadRaw));
  PayloadRaw_EncodingType_descriptor_ = PayloadRaw_descriptor_->enum_type(0);
  Payload_descriptor_ = file->message_type(2);
  static const int Payload_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Payload, assemblies_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Payload, cadcomponent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Payload, cadconstraint_),
  };
  Payload_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Payload_descriptor_,
      Payload::default_instance_,
      Payload_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Payload, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Payload, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Payload));
  Notice_descriptor_ = file->message_type(3);
  static const int Notice_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Notice, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Notice, _id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Notice, msg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Notice, code_),
  };
  Notice_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Notice_descriptor_,
      Notice::default_instance_,
      Notice_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Notice, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Notice, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Notice));
  Notice_NoticeType_descriptor_ = Notice_descriptor_->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_CdbMsg_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Control_descriptor_, &Control::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PayloadRaw_descriptor_, &PayloadRaw::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Payload_descriptor_, &Payload::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Notice_descriptor_, &Notice::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_CdbMsg_2eproto() {
  delete Control::default_instance_;
  delete Control_reflection_;
  delete PayloadRaw::default_instance_;
  delete PayloadRaw_reflection_;
  delete Payload::default_instance_;
  delete Payload_reflection_;
  delete Notice::default_instance_;
  delete Notice_reflection_;
}

void protobuf_AddDesc_CdbMsg_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::edu::vanderbilt::isis::meta::protobuf_AddDesc_XsdTypes_2eproto();
  ::edu::vanderbilt::isis::meta::protobuf_AddDesc_AssemblyInterface_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\014CdbMsg.proto\022\030edu.vanderbilt.isis.meta"
    "\032\016XsdTypes.proto\032\027AssemblyInterface.prot"
    "o\"\275\002\n\007Control\022<\n\006action\030\001 \002(\0162,.edu.vand"
    "erbilt.isis.meta.Control.ActionType\022(\n\002i"
    "d\030\002 \001(\0132\034.edu.vanderbilt.isis.meta.ID\022\r\n"
    "\005topic\030\003 \003(\t\0221\n\007notices\030\004 \003(\0132 .edu.vand"
    "erbilt.isis.meta.Notice\0225\n\007payload\030\005 \003(\013"
    "2$.edu.vanderbilt.isis.meta.PayloadRaw\"Q"
    "\n\nActionType\022\014\n\010INTEREST\020\000\022\017\n\013DISINTERES"
    "T\020\001\022\013\n\007REPLACE\020\002\022\n\n\006UPDATE\020\003\022\013\n\007DISCARD\020"
    "\004\"\223\001\n\nPayloadRaw\022M\n\010encoding\030\001 \002(\01621.edu"
    ".vanderbilt.isis.meta.PayloadRaw.Encodin"
    "gType:\010PROTOBUF\022\017\n\007payload\030\002 \002(\014\"%\n\014Enco"
    "dingType\022\007\n\003XML\020\000\022\014\n\010PROTOBUF\020\001\"\312\001\n\007Payl"
    "oad\022<\n\nassemblies\030\001 \001(\0132(.edu.vanderbilt"
    ".isis.meta.AssembliesType\022@\n\014cadComponen"
    "t\030\002 \003(\0132*.edu.vanderbilt.isis.meta.CADCo"
    "mponentType\022\?\n\rcadConstraint\030\003 \003(\0132(.edu"
    ".vanderbilt.isis.meta.ConstraintType\"\325\001\n"
    "\006Notice\0229\n\004type\030\001 \002(\0162+.edu.vanderbilt.i"
    "sis.meta.Notice.NoticeType\022)\n\003_id\030\002 \001(\0132"
    "\034.edu.vanderbilt.isis.meta.ID\022\013\n\003msg\030\003 \001"
    "(\t\022\014\n\004code\030\004 \001(\014\"J\n\nNoticeType\022\010\n\004FAIL\020\000"
    "\022\n\n\006REJECT\020\001\022\t\n\005ERROR\020\002\022\010\n\004WARN\020\003\022\010\n\004INF"
    "O\020\004\022\007\n\003ACK\020\005", 972);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "CdbMsg.proto", &protobuf_RegisterTypes);
  Control::default_instance_ = new Control();
  PayloadRaw::default_instance_ = new PayloadRaw();
  Payload::default_instance_ = new Payload();
  Notice::default_instance_ = new Notice();
  Control::default_instance_->InitAsDefaultInstance();
  PayloadRaw::default_instance_->InitAsDefaultInstance();
  Payload::default_instance_->InitAsDefaultInstance();
  Notice::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_CdbMsg_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_CdbMsg_2eproto {
  StaticDescriptorInitializer_CdbMsg_2eproto() {
    protobuf_AddDesc_CdbMsg_2eproto();
  }
} static_descriptor_initializer_CdbMsg_2eproto_;

// ===================================================================

const ::google::protobuf::EnumDescriptor* Control_ActionType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Control_ActionType_descriptor_;
}
bool Control_ActionType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Control_ActionType Control::INTEREST;
const Control_ActionType Control::DISINTEREST;
const Control_ActionType Control::REPLACE;
const Control_ActionType Control::UPDATE;
const Control_ActionType Control::DISCARD;
const Control_ActionType Control::ActionType_MIN;
const Control_ActionType Control::ActionType_MAX;
const int Control::ActionType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int Control::kActionFieldNumber;
const int Control::kIdFieldNumber;
const int Control::kTopicFieldNumber;
const int Control::kNoticesFieldNumber;
const int Control::kPayloadFieldNumber;
#endif  // !_MSC_VER

Control::Control()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Control::InitAsDefaultInstance() {
  id_ = const_cast< ::edu::vanderbilt::isis::meta::ID*>(&::edu::vanderbilt::isis::meta::ID::default_instance());
}

Control::Control(const Control& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Control::SharedCtor() {
  _cached_size_ = 0;
  action_ = 0;
  id_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Control::~Control() {
  SharedDtor();
}

void Control::SharedDtor() {
  if (this != default_instance_) {
    delete id_;
  }
}

void Control::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Control::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Control_descriptor_;
}

const Control& Control::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CdbMsg_2eproto();
  return *default_instance_;
}

Control* Control::default_instance_ = NULL;

Control* Control::New() const {
  return new Control;
}

void Control::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    action_ = 0;
    if (has_id()) {
      if (id_ != NULL) id_->::edu::vanderbilt::isis::meta::ID::Clear();
    }
  }
  topic_.Clear();
  notices_.Clear();
  payload_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Control::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .edu.vanderbilt.isis.meta.Control.ActionType action = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::edu::vanderbilt::isis::meta::Control_ActionType_IsValid(value)) {
            set_action(static_cast< ::edu::vanderbilt::isis::meta::Control_ActionType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_id;
        break;
      }

      // optional .edu.vanderbilt.isis.meta.ID id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_topic;
        break;
      }

      // repeated string topic = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_topic:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_topic()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->topic(this->topic_size() - 1).data(),
            this->topic(this->topic_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_topic;
        if (input->ExpectTag(34)) goto parse_notices;
        break;
      }

      // repeated .edu.vanderbilt.isis.meta.Notice notices = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_notices:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_notices()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_notices;
        if (input->ExpectTag(42)) goto parse_payload;
        break;
      }

      // repeated .edu.vanderbilt.isis.meta.PayloadRaw payload = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_payload:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_payload()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_payload;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Control::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .edu.vanderbilt.isis.meta.Control.ActionType action = 1;
  if (has_action()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->action(), output);
  }

  // optional .edu.vanderbilt.isis.meta.ID id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->id(), output);
  }

  // repeated string topic = 3;
  for (int i = 0; i < this->topic_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->topic(i).data(), this->topic(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->topic(i), output);
  }

  // repeated .edu.vanderbilt.isis.meta.Notice notices = 4;
  for (int i = 0; i < this->notices_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->notices(i), output);
  }

  // repeated .edu.vanderbilt.isis.meta.PayloadRaw payload = 5;
  for (int i = 0; i < this->payload_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->payload(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Control::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .edu.vanderbilt.isis.meta.Control.ActionType action = 1;
  if (has_action()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->action(), target);
  }

  // optional .edu.vanderbilt.isis.meta.ID id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->id(), target);
  }

  // repeated string topic = 3;
  for (int i = 0; i < this->topic_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->topic(i).data(), this->topic(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->topic(i), target);
  }

  // repeated .edu.vanderbilt.isis.meta.Notice notices = 4;
  for (int i = 0; i < this->notices_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->notices(i), target);
  }

  // repeated .edu.vanderbilt.isis.meta.PayloadRaw payload = 5;
  for (int i = 0; i < this->payload_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->payload(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Control::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .edu.vanderbilt.isis.meta.Control.ActionType action = 1;
    if (has_action()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->action());
    }

    // optional .edu.vanderbilt.isis.meta.ID id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->id());
    }

  }
  // repeated string topic = 3;
  total_size += 1 * this->topic_size();
  for (int i = 0; i < this->topic_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->topic(i));
  }

  // repeated .edu.vanderbilt.isis.meta.Notice notices = 4;
  total_size += 1 * this->notices_size();
  for (int i = 0; i < this->notices_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->notices(i));
  }

  // repeated .edu.vanderbilt.isis.meta.PayloadRaw payload = 5;
  total_size += 1 * this->payload_size();
  for (int i = 0; i < this->payload_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->payload(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Control::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Control* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Control*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Control::MergeFrom(const Control& from) {
  GOOGLE_CHECK_NE(&from, this);
  topic_.MergeFrom(from.topic_);
  notices_.MergeFrom(from.notices_);
  payload_.MergeFrom(from.payload_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_action()) {
      set_action(from.action());
    }
    if (from.has_id()) {
      mutable_id()->::edu::vanderbilt::isis::meta::ID::MergeFrom(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Control::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Control::CopyFrom(const Control& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Control::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_id()) {
    if (!this->id().IsInitialized()) return false;
  }
  for (int i = 0; i < notices_size(); i++) {
    if (!this->notices(i).IsInitialized()) return false;
  }
  for (int i = 0; i < payload_size(); i++) {
    if (!this->payload(i).IsInitialized()) return false;
  }
  return true;
}

void Control::Swap(Control* other) {
  if (other != this) {
    std::swap(action_, other->action_);
    std::swap(id_, other->id_);
    topic_.Swap(&other->topic_);
    notices_.Swap(&other->notices_);
    payload_.Swap(&other->payload_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Control::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Control_descriptor_;
  metadata.reflection = Control_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* PayloadRaw_EncodingType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PayloadRaw_EncodingType_descriptor_;
}
bool PayloadRaw_EncodingType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const PayloadRaw_EncodingType PayloadRaw::XML;
const PayloadRaw_EncodingType PayloadRaw::PROTOBUF;
const PayloadRaw_EncodingType PayloadRaw::EncodingType_MIN;
const PayloadRaw_EncodingType PayloadRaw::EncodingType_MAX;
const int PayloadRaw::EncodingType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int PayloadRaw::kEncodingFieldNumber;
const int PayloadRaw::kPayloadFieldNumber;
#endif  // !_MSC_VER

PayloadRaw::PayloadRaw()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PayloadRaw::InitAsDefaultInstance() {
}

PayloadRaw::PayloadRaw(const PayloadRaw& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PayloadRaw::SharedCtor() {
  _cached_size_ = 0;
  encoding_ = 1;
  payload_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PayloadRaw::~PayloadRaw() {
  SharedDtor();
}

void PayloadRaw::SharedDtor() {
  if (payload_ != &::google::protobuf::internal::kEmptyString) {
    delete payload_;
  }
  if (this != default_instance_) {
  }
}

void PayloadRaw::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PayloadRaw::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PayloadRaw_descriptor_;
}

const PayloadRaw& PayloadRaw::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CdbMsg_2eproto();
  return *default_instance_;
}

PayloadRaw* PayloadRaw::default_instance_ = NULL;

PayloadRaw* PayloadRaw::New() const {
  return new PayloadRaw;
}

void PayloadRaw::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    encoding_ = 1;
    if (has_payload()) {
      if (payload_ != &::google::protobuf::internal::kEmptyString) {
        payload_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PayloadRaw::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .edu.vanderbilt.isis.meta.PayloadRaw.EncodingType encoding = 1 [default = PROTOBUF];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::edu::vanderbilt::isis::meta::PayloadRaw_EncodingType_IsValid(value)) {
            set_encoding(static_cast< ::edu::vanderbilt::isis::meta::PayloadRaw_EncodingType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_payload;
        break;
      }

      // required bytes payload = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_payload:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_payload()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PayloadRaw::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .edu.vanderbilt.isis.meta.PayloadRaw.EncodingType encoding = 1 [default = PROTOBUF];
  if (has_encoding()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->encoding(), output);
  }

  // required bytes payload = 2;
  if (has_payload()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->payload(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PayloadRaw::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .edu.vanderbilt.isis.meta.PayloadRaw.EncodingType encoding = 1 [default = PROTOBUF];
  if (has_encoding()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->encoding(), target);
  }

  // required bytes payload = 2;
  if (has_payload()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->payload(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PayloadRaw::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .edu.vanderbilt.isis.meta.PayloadRaw.EncodingType encoding = 1 [default = PROTOBUF];
    if (has_encoding()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->encoding());
    }

    // required bytes payload = 2;
    if (has_payload()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->payload());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PayloadRaw::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PayloadRaw* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PayloadRaw*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PayloadRaw::MergeFrom(const PayloadRaw& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_encoding()) {
      set_encoding(from.encoding());
    }
    if (from.has_payload()) {
      set_payload(from.payload());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PayloadRaw::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PayloadRaw::CopyFrom(const PayloadRaw& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PayloadRaw::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void PayloadRaw::Swap(PayloadRaw* other) {
  if (other != this) {
    std::swap(encoding_, other->encoding_);
    std::swap(payload_, other->payload_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PayloadRaw::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PayloadRaw_descriptor_;
  metadata.reflection = PayloadRaw_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Payload::kAssembliesFieldNumber;
const int Payload::kCadComponentFieldNumber;
const int Payload::kCadConstraintFieldNumber;
#endif  // !_MSC_VER

Payload::Payload()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Payload::InitAsDefaultInstance() {
  assemblies_ = const_cast< ::edu::vanderbilt::isis::meta::AssembliesType*>(&::edu::vanderbilt::isis::meta::AssembliesType::default_instance());
}

Payload::Payload(const Payload& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Payload::SharedCtor() {
  _cached_size_ = 0;
  assemblies_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Payload::~Payload() {
  SharedDtor();
}

void Payload::SharedDtor() {
  if (this != default_instance_) {
    delete assemblies_;
  }
}

void Payload::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Payload::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Payload_descriptor_;
}

const Payload& Payload::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CdbMsg_2eproto();
  return *default_instance_;
}

Payload* Payload::default_instance_ = NULL;

Payload* Payload::New() const {
  return new Payload;
}

void Payload::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_assemblies()) {
      if (assemblies_ != NULL) assemblies_->::edu::vanderbilt::isis::meta::AssembliesType::Clear();
    }
  }
  cadcomponent_.Clear();
  cadconstraint_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Payload::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .edu.vanderbilt.isis.meta.AssembliesType assemblies = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_assemblies()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_cadComponent;
        break;
      }

      // repeated .edu.vanderbilt.isis.meta.CADComponentType cadComponent = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cadComponent:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_cadcomponent()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_cadComponent;
        if (input->ExpectTag(26)) goto parse_cadConstraint;
        break;
      }

      // repeated .edu.vanderbilt.isis.meta.ConstraintType cadConstraint = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cadConstraint:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_cadconstraint()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_cadConstraint;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Payload::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .edu.vanderbilt.isis.meta.AssembliesType assemblies = 1;
  if (has_assemblies()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->assemblies(), output);
  }

  // repeated .edu.vanderbilt.isis.meta.CADComponentType cadComponent = 2;
  for (int i = 0; i < this->cadcomponent_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->cadcomponent(i), output);
  }

  // repeated .edu.vanderbilt.isis.meta.ConstraintType cadConstraint = 3;
  for (int i = 0; i < this->cadconstraint_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->cadconstraint(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Payload::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .edu.vanderbilt.isis.meta.AssembliesType assemblies = 1;
  if (has_assemblies()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->assemblies(), target);
  }

  // repeated .edu.vanderbilt.isis.meta.CADComponentType cadComponent = 2;
  for (int i = 0; i < this->cadcomponent_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->cadcomponent(i), target);
  }

  // repeated .edu.vanderbilt.isis.meta.ConstraintType cadConstraint = 3;
  for (int i = 0; i < this->cadconstraint_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->cadconstraint(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Payload::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .edu.vanderbilt.isis.meta.AssembliesType assemblies = 1;
    if (has_assemblies()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->assemblies());
    }

  }
  // repeated .edu.vanderbilt.isis.meta.CADComponentType cadComponent = 2;
  total_size += 1 * this->cadcomponent_size();
  for (int i = 0; i < this->cadcomponent_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->cadcomponent(i));
  }

  // repeated .edu.vanderbilt.isis.meta.ConstraintType cadConstraint = 3;
  total_size += 1 * this->cadconstraint_size();
  for (int i = 0; i < this->cadconstraint_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->cadconstraint(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Payload::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Payload* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Payload*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Payload::MergeFrom(const Payload& from) {
  GOOGLE_CHECK_NE(&from, this);
  cadcomponent_.MergeFrom(from.cadcomponent_);
  cadconstraint_.MergeFrom(from.cadconstraint_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_assemblies()) {
      mutable_assemblies()->::edu::vanderbilt::isis::meta::AssembliesType::MergeFrom(from.assemblies());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Payload::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Payload::CopyFrom(const Payload& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Payload::IsInitialized() const {

  if (has_assemblies()) {
    if (!this->assemblies().IsInitialized()) return false;
  }
  for (int i = 0; i < cadcomponent_size(); i++) {
    if (!this->cadcomponent(i).IsInitialized()) return false;
  }
  for (int i = 0; i < cadconstraint_size(); i++) {
    if (!this->cadconstraint(i).IsInitialized()) return false;
  }
  return true;
}

void Payload::Swap(Payload* other) {
  if (other != this) {
    std::swap(assemblies_, other->assemblies_);
    cadcomponent_.Swap(&other->cadcomponent_);
    cadconstraint_.Swap(&other->cadconstraint_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Payload::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Payload_descriptor_;
  metadata.reflection = Payload_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* Notice_NoticeType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Notice_NoticeType_descriptor_;
}
bool Notice_NoticeType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Notice_NoticeType Notice::FAIL;
const Notice_NoticeType Notice::REJECT;
const Notice_NoticeType Notice::ERROR;
const Notice_NoticeType Notice::WARN;
const Notice_NoticeType Notice::INFO;
const Notice_NoticeType Notice::ACK;
const Notice_NoticeType Notice::NoticeType_MIN;
const Notice_NoticeType Notice::NoticeType_MAX;
const int Notice::NoticeType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int Notice::kTypeFieldNumber;
const int Notice::kIdFieldNumber;
const int Notice::kMsgFieldNumber;
const int Notice::kCodeFieldNumber;
#endif  // !_MSC_VER

Notice::Notice()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Notice::InitAsDefaultInstance() {
  _id_ = const_cast< ::edu::vanderbilt::isis::meta::ID*>(&::edu::vanderbilt::isis::meta::ID::default_instance());
}

Notice::Notice(const Notice& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Notice::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  _id_ = NULL;
  msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  code_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Notice::~Notice() {
  SharedDtor();
}

void Notice::SharedDtor() {
  if (msg_ != &::google::protobuf::internal::kEmptyString) {
    delete msg_;
  }
  if (code_ != &::google::protobuf::internal::kEmptyString) {
    delete code_;
  }
  if (this != default_instance_) {
    delete _id_;
  }
}

void Notice::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Notice::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Notice_descriptor_;
}

const Notice& Notice::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CdbMsg_2eproto();
  return *default_instance_;
}

Notice* Notice::default_instance_ = NULL;

Notice* Notice::New() const {
  return new Notice;
}

void Notice::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    if (has__id()) {
      if (_id_ != NULL) _id_->::edu::vanderbilt::isis::meta::ID::Clear();
    }
    if (has_msg()) {
      if (msg_ != &::google::protobuf::internal::kEmptyString) {
        msg_->clear();
      }
    }
    if (has_code()) {
      if (code_ != &::google::protobuf::internal::kEmptyString) {
        code_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Notice::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .edu.vanderbilt.isis.meta.Notice.NoticeType type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::edu::vanderbilt::isis::meta::Notice_NoticeType_IsValid(value)) {
            set_type(static_cast< ::edu::vanderbilt::isis::meta::Notice_NoticeType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse__id;
        break;
      }

      // optional .edu.vanderbilt.isis.meta.ID _id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse__id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_msg;
        break;
      }

      // optional string msg = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msg().data(), this->msg().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_code;
        break;
      }

      // optional bytes code = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_code:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_code()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Notice::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .edu.vanderbilt.isis.meta.Notice.NoticeType type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional .edu.vanderbilt.isis.meta.ID _id = 2;
  if (has__id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_id(), output);
  }

  // optional string msg = 3;
  if (has_msg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msg().data(), this->msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->msg(), output);
  }

  // optional bytes code = 4;
  if (has_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->code(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Notice::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .edu.vanderbilt.isis.meta.Notice.NoticeType type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional .edu.vanderbilt.isis.meta.ID _id = 2;
  if (has__id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->_id(), target);
  }

  // optional string msg = 3;
  if (has_msg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msg().data(), this->msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->msg(), target);
  }

  // optional bytes code = 4;
  if (has_code()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->code(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Notice::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .edu.vanderbilt.isis.meta.Notice.NoticeType type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional .edu.vanderbilt.isis.meta.ID _id = 2;
    if (has__id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_id());
    }

    // optional string msg = 3;
    if (has_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msg());
    }

    // optional bytes code = 4;
    if (has_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->code());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Notice::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Notice* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Notice*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Notice::MergeFrom(const Notice& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has__id()) {
      mutable__id()->::edu::vanderbilt::isis::meta::ID::MergeFrom(from._id());
    }
    if (from.has_msg()) {
      set_msg(from.msg());
    }
    if (from.has_code()) {
      set_code(from.code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Notice::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Notice::CopyFrom(const Notice& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Notice::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has__id()) {
    if (!this->_id().IsInitialized()) return false;
  }
  return true;
}

void Notice::Swap(Notice* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(_id_, other->_id_);
    std::swap(msg_, other->msg_);
    std::swap(code_, other->code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Notice::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Notice_descriptor_;
  metadata.reflection = Notice_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace meta
}  // namespace isis
}  // namespace vanderbilt
}  // namespace edu

// @@protoc_insertion_point(global_scope)
