// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: CdbMsg.proto

#ifndef PROTOBUF_CdbMsg_2eproto__INCLUDED
#define PROTOBUF_CdbMsg_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "XsdTypes.pb.h"
#include "AssemblyInterface.pb.h"
// @@protoc_insertion_point(includes)

namespace edu {
namespace vanderbilt {
namespace isis {
namespace meta {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_CdbMsg_2eproto();
void protobuf_AssignDesc_CdbMsg_2eproto();
void protobuf_ShutdownFile_CdbMsg_2eproto();

class Control;
class PayloadRaw;
class Payload;
class Notice;

enum Control_ActionType {
  Control_ActionType_INTEREST = 0,
  Control_ActionType_DISINTEREST = 1,
  Control_ActionType_REPLACE = 2,
  Control_ActionType_UPDATE = 3,
  Control_ActionType_DISCARD = 4
};
bool Control_ActionType_IsValid(int value);
const Control_ActionType Control_ActionType_ActionType_MIN = Control_ActionType_INTEREST;
const Control_ActionType Control_ActionType_ActionType_MAX = Control_ActionType_DISCARD;
const int Control_ActionType_ActionType_ARRAYSIZE = Control_ActionType_ActionType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Control_ActionType_descriptor();
inline const ::std::string& Control_ActionType_Name(Control_ActionType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Control_ActionType_descriptor(), value);
}
inline bool Control_ActionType_Parse(
    const ::std::string& name, Control_ActionType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Control_ActionType>(
    Control_ActionType_descriptor(), name, value);
}
enum PayloadRaw_EncodingType {
  PayloadRaw_EncodingType_XML = 0,
  PayloadRaw_EncodingType_PROTOBUF = 1
};
bool PayloadRaw_EncodingType_IsValid(int value);
const PayloadRaw_EncodingType PayloadRaw_EncodingType_EncodingType_MIN = PayloadRaw_EncodingType_XML;
const PayloadRaw_EncodingType PayloadRaw_EncodingType_EncodingType_MAX = PayloadRaw_EncodingType_PROTOBUF;
const int PayloadRaw_EncodingType_EncodingType_ARRAYSIZE = PayloadRaw_EncodingType_EncodingType_MAX + 1;

const ::google::protobuf::EnumDescriptor* PayloadRaw_EncodingType_descriptor();
inline const ::std::string& PayloadRaw_EncodingType_Name(PayloadRaw_EncodingType value) {
  return ::google::protobuf::internal::NameOfEnum(
    PayloadRaw_EncodingType_descriptor(), value);
}
inline bool PayloadRaw_EncodingType_Parse(
    const ::std::string& name, PayloadRaw_EncodingType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PayloadRaw_EncodingType>(
    PayloadRaw_EncodingType_descriptor(), name, value);
}
enum Notice_NoticeType {
  Notice_NoticeType_FAIL = 0,
  Notice_NoticeType_REJECT = 1,
  Notice_NoticeType_ERROR = 2,
  Notice_NoticeType_WARN = 3,
  Notice_NoticeType_INFO = 4,
  Notice_NoticeType_ACK = 5
};
bool Notice_NoticeType_IsValid(int value);
const Notice_NoticeType Notice_NoticeType_NoticeType_MIN = Notice_NoticeType_FAIL;
const Notice_NoticeType Notice_NoticeType_NoticeType_MAX = Notice_NoticeType_ACK;
const int Notice_NoticeType_NoticeType_ARRAYSIZE = Notice_NoticeType_NoticeType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Notice_NoticeType_descriptor();
inline const ::std::string& Notice_NoticeType_Name(Notice_NoticeType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Notice_NoticeType_descriptor(), value);
}
inline bool Notice_NoticeType_Parse(
    const ::std::string& name, Notice_NoticeType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Notice_NoticeType>(
    Notice_NoticeType_descriptor(), name, value);
}
// ===================================================================

class Control : public ::google::protobuf::Message {
 public:
  Control();
  virtual ~Control();

  Control(const Control& from);

  inline Control& operator=(const Control& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Control& default_instance();

  void Swap(Control* other);

  // implements Message ----------------------------------------------

  Control* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Control& from);
  void MergeFrom(const Control& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef Control_ActionType ActionType;
  static const ActionType INTEREST = Control_ActionType_INTEREST;
  static const ActionType DISINTEREST = Control_ActionType_DISINTEREST;
  static const ActionType REPLACE = Control_ActionType_REPLACE;
  static const ActionType UPDATE = Control_ActionType_UPDATE;
  static const ActionType DISCARD = Control_ActionType_DISCARD;
  static inline bool ActionType_IsValid(int value) {
    return Control_ActionType_IsValid(value);
  }
  static const ActionType ActionType_MIN =
    Control_ActionType_ActionType_MIN;
  static const ActionType ActionType_MAX =
    Control_ActionType_ActionType_MAX;
  static const int ActionType_ARRAYSIZE =
    Control_ActionType_ActionType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ActionType_descriptor() {
    return Control_ActionType_descriptor();
  }
  static inline const ::std::string& ActionType_Name(ActionType value) {
    return Control_ActionType_Name(value);
  }
  static inline bool ActionType_Parse(const ::std::string& name,
      ActionType* value) {
    return Control_ActionType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required .edu.vanderbilt.isis.meta.Control.ActionType action = 1;
  inline bool has_action() const;
  inline void clear_action();
  static const int kActionFieldNumber = 1;
  inline ::edu::vanderbilt::isis::meta::Control_ActionType action() const;
  inline void set_action(::edu::vanderbilt::isis::meta::Control_ActionType value);

  // optional .edu.vanderbilt.isis.meta.ID id = 2;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 2;
  inline const ::edu::vanderbilt::isis::meta::ID& id() const;
  inline ::edu::vanderbilt::isis::meta::ID* mutable_id();
  inline ::edu::vanderbilt::isis::meta::ID* release_id();
  inline void set_allocated_id(::edu::vanderbilt::isis::meta::ID* id);

  // repeated string topic = 3;
  inline int topic_size() const;
  inline void clear_topic();
  static const int kTopicFieldNumber = 3;
  inline const ::std::string& topic(int index) const;
  inline ::std::string* mutable_topic(int index);
  inline void set_topic(int index, const ::std::string& value);
  inline void set_topic(int index, const char* value);
  inline void set_topic(int index, const char* value, size_t size);
  inline ::std::string* add_topic();
  inline void add_topic(const ::std::string& value);
  inline void add_topic(const char* value);
  inline void add_topic(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& topic() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_topic();

  // repeated .edu.vanderbilt.isis.meta.Notice notices = 4;
  inline int notices_size() const;
  inline void clear_notices();
  static const int kNoticesFieldNumber = 4;
  inline const ::edu::vanderbilt::isis::meta::Notice& notices(int index) const;
  inline ::edu::vanderbilt::isis::meta::Notice* mutable_notices(int index);
  inline ::edu::vanderbilt::isis::meta::Notice* add_notices();
  inline const ::google::protobuf::RepeatedPtrField< ::edu::vanderbilt::isis::meta::Notice >&
      notices() const;
  inline ::google::protobuf::RepeatedPtrField< ::edu::vanderbilt::isis::meta::Notice >*
      mutable_notices();

  // repeated .edu.vanderbilt.isis.meta.PayloadRaw payload = 5;
  inline int payload_size() const;
  inline void clear_payload();
  static const int kPayloadFieldNumber = 5;
  inline const ::edu::vanderbilt::isis::meta::PayloadRaw& payload(int index) const;
  inline ::edu::vanderbilt::isis::meta::PayloadRaw* mutable_payload(int index);
  inline ::edu::vanderbilt::isis::meta::PayloadRaw* add_payload();
  inline const ::google::protobuf::RepeatedPtrField< ::edu::vanderbilt::isis::meta::PayloadRaw >&
      payload() const;
  inline ::google::protobuf::RepeatedPtrField< ::edu::vanderbilt::isis::meta::PayloadRaw >*
      mutable_payload();

  // @@protoc_insertion_point(class_scope:edu.vanderbilt.isis.meta.Control)
 private:
  inline void set_has_action();
  inline void clear_has_action();
  inline void set_has_id();
  inline void clear_has_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::edu::vanderbilt::isis::meta::ID* id_;
  ::google::protobuf::RepeatedPtrField< ::std::string> topic_;
  ::google::protobuf::RepeatedPtrField< ::edu::vanderbilt::isis::meta::Notice > notices_;
  ::google::protobuf::RepeatedPtrField< ::edu::vanderbilt::isis::meta::PayloadRaw > payload_;
  int action_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_CdbMsg_2eproto();
  friend void protobuf_AssignDesc_CdbMsg_2eproto();
  friend void protobuf_ShutdownFile_CdbMsg_2eproto();

  void InitAsDefaultInstance();
  static Control* default_instance_;
};
// -------------------------------------------------------------------

class PayloadRaw : public ::google::protobuf::Message {
 public:
  PayloadRaw();
  virtual ~PayloadRaw();

  PayloadRaw(const PayloadRaw& from);

  inline PayloadRaw& operator=(const PayloadRaw& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PayloadRaw& default_instance();

  void Swap(PayloadRaw* other);

  // implements Message ----------------------------------------------

  PayloadRaw* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PayloadRaw& from);
  void MergeFrom(const PayloadRaw& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef PayloadRaw_EncodingType EncodingType;
  static const EncodingType XML = PayloadRaw_EncodingType_XML;
  static const EncodingType PROTOBUF = PayloadRaw_EncodingType_PROTOBUF;
  static inline bool EncodingType_IsValid(int value) {
    return PayloadRaw_EncodingType_IsValid(value);
  }
  static const EncodingType EncodingType_MIN =
    PayloadRaw_EncodingType_EncodingType_MIN;
  static const EncodingType EncodingType_MAX =
    PayloadRaw_EncodingType_EncodingType_MAX;
  static const int EncodingType_ARRAYSIZE =
    PayloadRaw_EncodingType_EncodingType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  EncodingType_descriptor() {
    return PayloadRaw_EncodingType_descriptor();
  }
  static inline const ::std::string& EncodingType_Name(EncodingType value) {
    return PayloadRaw_EncodingType_Name(value);
  }
  static inline bool EncodingType_Parse(const ::std::string& name,
      EncodingType* value) {
    return PayloadRaw_EncodingType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required .edu.vanderbilt.isis.meta.PayloadRaw.EncodingType encoding = 1 [default = PROTOBUF];
  inline bool has_encoding() const;
  inline void clear_encoding();
  static const int kEncodingFieldNumber = 1;
  inline ::edu::vanderbilt::isis::meta::PayloadRaw_EncodingType encoding() const;
  inline void set_encoding(::edu::vanderbilt::isis::meta::PayloadRaw_EncodingType value);

  // required bytes payload = 2;
  inline bool has_payload() const;
  inline void clear_payload();
  static const int kPayloadFieldNumber = 2;
  inline const ::std::string& payload() const;
  inline void set_payload(const ::std::string& value);
  inline void set_payload(const char* value);
  inline void set_payload(const void* value, size_t size);
  inline ::std::string* mutable_payload();
  inline ::std::string* release_payload();
  inline void set_allocated_payload(::std::string* payload);

  // @@protoc_insertion_point(class_scope:edu.vanderbilt.isis.meta.PayloadRaw)
 private:
  inline void set_has_encoding();
  inline void clear_has_encoding();
  inline void set_has_payload();
  inline void clear_has_payload();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* payload_;
  int encoding_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_CdbMsg_2eproto();
  friend void protobuf_AssignDesc_CdbMsg_2eproto();
  friend void protobuf_ShutdownFile_CdbMsg_2eproto();

  void InitAsDefaultInstance();
  static PayloadRaw* default_instance_;
};
// -------------------------------------------------------------------

class Payload : public ::google::protobuf::Message {
 public:
  Payload();
  virtual ~Payload();

  Payload(const Payload& from);

  inline Payload& operator=(const Payload& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Payload& default_instance();

  void Swap(Payload* other);

  // implements Message ----------------------------------------------

  Payload* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Payload& from);
  void MergeFrom(const Payload& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .edu.vanderbilt.isis.meta.AssembliesType assemblies = 1;
  inline bool has_assemblies() const;
  inline void clear_assemblies();
  static const int kAssembliesFieldNumber = 1;
  inline const ::edu::vanderbilt::isis::meta::AssembliesType& assemblies() const;
  inline ::edu::vanderbilt::isis::meta::AssembliesType* mutable_assemblies();
  inline ::edu::vanderbilt::isis::meta::AssembliesType* release_assemblies();
  inline void set_allocated_assemblies(::edu::vanderbilt::isis::meta::AssembliesType* assemblies);

  // repeated .edu.vanderbilt.isis.meta.CADComponentType cadComponent = 2;
  inline int cadcomponent_size() const;
  inline void clear_cadcomponent();
  static const int kCadComponentFieldNumber = 2;
  inline const ::edu::vanderbilt::isis::meta::CADComponentType& cadcomponent(int index) const;
  inline ::edu::vanderbilt::isis::meta::CADComponentType* mutable_cadcomponent(int index);
  inline ::edu::vanderbilt::isis::meta::CADComponentType* add_cadcomponent();
  inline const ::google::protobuf::RepeatedPtrField< ::edu::vanderbilt::isis::meta::CADComponentType >&
      cadcomponent() const;
  inline ::google::protobuf::RepeatedPtrField< ::edu::vanderbilt::isis::meta::CADComponentType >*
      mutable_cadcomponent();

  // repeated .edu.vanderbilt.isis.meta.ConstraintType cadConstraint = 3;
  inline int cadconstraint_size() const;
  inline void clear_cadconstraint();
  static const int kCadConstraintFieldNumber = 3;
  inline const ::edu::vanderbilt::isis::meta::ConstraintType& cadconstraint(int index) const;
  inline ::edu::vanderbilt::isis::meta::ConstraintType* mutable_cadconstraint(int index);
  inline ::edu::vanderbilt::isis::meta::ConstraintType* add_cadconstraint();
  inline const ::google::protobuf::RepeatedPtrField< ::edu::vanderbilt::isis::meta::ConstraintType >&
      cadconstraint() const;
  inline ::google::protobuf::RepeatedPtrField< ::edu::vanderbilt::isis::meta::ConstraintType >*
      mutable_cadconstraint();

  // @@protoc_insertion_point(class_scope:edu.vanderbilt.isis.meta.Payload)
 private:
  inline void set_has_assemblies();
  inline void clear_has_assemblies();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::edu::vanderbilt::isis::meta::AssembliesType* assemblies_;
  ::google::protobuf::RepeatedPtrField< ::edu::vanderbilt::isis::meta::CADComponentType > cadcomponent_;
  ::google::protobuf::RepeatedPtrField< ::edu::vanderbilt::isis::meta::ConstraintType > cadconstraint_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_CdbMsg_2eproto();
  friend void protobuf_AssignDesc_CdbMsg_2eproto();
  friend void protobuf_ShutdownFile_CdbMsg_2eproto();

  void InitAsDefaultInstance();
  static Payload* default_instance_;
};
// -------------------------------------------------------------------

class Notice : public ::google::protobuf::Message {
 public:
  Notice();
  virtual ~Notice();

  Notice(const Notice& from);

  inline Notice& operator=(const Notice& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Notice& default_instance();

  void Swap(Notice* other);

  // implements Message ----------------------------------------------

  Notice* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Notice& from);
  void MergeFrom(const Notice& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef Notice_NoticeType NoticeType;
  static const NoticeType FAIL = Notice_NoticeType_FAIL;
  static const NoticeType REJECT = Notice_NoticeType_REJECT;
  static const NoticeType ERROR = Notice_NoticeType_ERROR;
  static const NoticeType WARN = Notice_NoticeType_WARN;
  static const NoticeType INFO = Notice_NoticeType_INFO;
  static const NoticeType ACK = Notice_NoticeType_ACK;
  static inline bool NoticeType_IsValid(int value) {
    return Notice_NoticeType_IsValid(value);
  }
  static const NoticeType NoticeType_MIN =
    Notice_NoticeType_NoticeType_MIN;
  static const NoticeType NoticeType_MAX =
    Notice_NoticeType_NoticeType_MAX;
  static const int NoticeType_ARRAYSIZE =
    Notice_NoticeType_NoticeType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  NoticeType_descriptor() {
    return Notice_NoticeType_descriptor();
  }
  static inline const ::std::string& NoticeType_Name(NoticeType value) {
    return Notice_NoticeType_Name(value);
  }
  static inline bool NoticeType_Parse(const ::std::string& name,
      NoticeType* value) {
    return Notice_NoticeType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required .edu.vanderbilt.isis.meta.Notice.NoticeType type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::edu::vanderbilt::isis::meta::Notice_NoticeType type() const;
  inline void set_type(::edu::vanderbilt::isis::meta::Notice_NoticeType value);

  // optional .edu.vanderbilt.isis.meta.ID _id = 2;
  inline bool has__id() const;
  inline void clear__id();
  static const int kIdFieldNumber = 2;
  inline const ::edu::vanderbilt::isis::meta::ID& _id() const;
  inline ::edu::vanderbilt::isis::meta::ID* mutable__id();
  inline ::edu::vanderbilt::isis::meta::ID* release__id();
  inline void set_allocated__id(::edu::vanderbilt::isis::meta::ID* _id);

  // optional string msg = 3;
  inline bool has_msg() const;
  inline void clear_msg();
  static const int kMsgFieldNumber = 3;
  inline const ::std::string& msg() const;
  inline void set_msg(const ::std::string& value);
  inline void set_msg(const char* value);
  inline void set_msg(const char* value, size_t size);
  inline ::std::string* mutable_msg();
  inline ::std::string* release_msg();
  inline void set_allocated_msg(::std::string* msg);

  // optional bytes code = 4;
  inline bool has_code() const;
  inline void clear_code();
  static const int kCodeFieldNumber = 4;
  inline const ::std::string& code() const;
  inline void set_code(const ::std::string& value);
  inline void set_code(const char* value);
  inline void set_code(const void* value, size_t size);
  inline ::std::string* mutable_code();
  inline ::std::string* release_code();
  inline void set_allocated_code(::std::string* code);

  // @@protoc_insertion_point(class_scope:edu.vanderbilt.isis.meta.Notice)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has__id();
  inline void clear_has__id();
  inline void set_has_msg();
  inline void clear_has_msg();
  inline void set_has_code();
  inline void clear_has_code();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::edu::vanderbilt::isis::meta::ID* _id_;
  ::std::string* msg_;
  ::std::string* code_;
  int type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_CdbMsg_2eproto();
  friend void protobuf_AssignDesc_CdbMsg_2eproto();
  friend void protobuf_ShutdownFile_CdbMsg_2eproto();

  void InitAsDefaultInstance();
  static Notice* default_instance_;
};
// ===================================================================


// ===================================================================

// Control

// required .edu.vanderbilt.isis.meta.Control.ActionType action = 1;
inline bool Control::has_action() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Control::set_has_action() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Control::clear_has_action() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Control::clear_action() {
  action_ = 0;
  clear_has_action();
}
inline ::edu::vanderbilt::isis::meta::Control_ActionType Control::action() const {
  return static_cast< ::edu::vanderbilt::isis::meta::Control_ActionType >(action_);
}
inline void Control::set_action(::edu::vanderbilt::isis::meta::Control_ActionType value) {
  assert(::edu::vanderbilt::isis::meta::Control_ActionType_IsValid(value));
  set_has_action();
  action_ = value;
}

// optional .edu.vanderbilt.isis.meta.ID id = 2;
inline bool Control::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Control::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Control::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Control::clear_id() {
  if (id_ != NULL) id_->::edu::vanderbilt::isis::meta::ID::Clear();
  clear_has_id();
}
inline const ::edu::vanderbilt::isis::meta::ID& Control::id() const {
  return id_ != NULL ? *id_ : *default_instance_->id_;
}
inline ::edu::vanderbilt::isis::meta::ID* Control::mutable_id() {
  set_has_id();
  if (id_ == NULL) id_ = new ::edu::vanderbilt::isis::meta::ID;
  return id_;
}
inline ::edu::vanderbilt::isis::meta::ID* Control::release_id() {
  clear_has_id();
  ::edu::vanderbilt::isis::meta::ID* temp = id_;
  id_ = NULL;
  return temp;
}
inline void Control::set_allocated_id(::edu::vanderbilt::isis::meta::ID* id) {
  delete id_;
  id_ = id;
  if (id) {
    set_has_id();
  } else {
    clear_has_id();
  }
}

// repeated string topic = 3;
inline int Control::topic_size() const {
  return topic_.size();
}
inline void Control::clear_topic() {
  topic_.Clear();
}
inline const ::std::string& Control::topic(int index) const {
  return topic_.Get(index);
}
inline ::std::string* Control::mutable_topic(int index) {
  return topic_.Mutable(index);
}
inline void Control::set_topic(int index, const ::std::string& value) {
  topic_.Mutable(index)->assign(value);
}
inline void Control::set_topic(int index, const char* value) {
  topic_.Mutable(index)->assign(value);
}
inline void Control::set_topic(int index, const char* value, size_t size) {
  topic_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Control::add_topic() {
  return topic_.Add();
}
inline void Control::add_topic(const ::std::string& value) {
  topic_.Add()->assign(value);
}
inline void Control::add_topic(const char* value) {
  topic_.Add()->assign(value);
}
inline void Control::add_topic(const char* value, size_t size) {
  topic_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Control::topic() const {
  return topic_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Control::mutable_topic() {
  return &topic_;
}

// repeated .edu.vanderbilt.isis.meta.Notice notices = 4;
inline int Control::notices_size() const {
  return notices_.size();
}
inline void Control::clear_notices() {
  notices_.Clear();
}
inline const ::edu::vanderbilt::isis::meta::Notice& Control::notices(int index) const {
  return notices_.Get(index);
}
inline ::edu::vanderbilt::isis::meta::Notice* Control::mutable_notices(int index) {
  return notices_.Mutable(index);
}
inline ::edu::vanderbilt::isis::meta::Notice* Control::add_notices() {
  return notices_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::edu::vanderbilt::isis::meta::Notice >&
Control::notices() const {
  return notices_;
}
inline ::google::protobuf::RepeatedPtrField< ::edu::vanderbilt::isis::meta::Notice >*
Control::mutable_notices() {
  return &notices_;
}

// repeated .edu.vanderbilt.isis.meta.PayloadRaw payload = 5;
inline int Control::payload_size() const {
  return payload_.size();
}
inline void Control::clear_payload() {
  payload_.Clear();
}
inline const ::edu::vanderbilt::isis::meta::PayloadRaw& Control::payload(int index) const {
  return payload_.Get(index);
}
inline ::edu::vanderbilt::isis::meta::PayloadRaw* Control::mutable_payload(int index) {
  return payload_.Mutable(index);
}
inline ::edu::vanderbilt::isis::meta::PayloadRaw* Control::add_payload() {
  return payload_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::edu::vanderbilt::isis::meta::PayloadRaw >&
Control::payload() const {
  return payload_;
}
inline ::google::protobuf::RepeatedPtrField< ::edu::vanderbilt::isis::meta::PayloadRaw >*
Control::mutable_payload() {
  return &payload_;
}

// -------------------------------------------------------------------

// PayloadRaw

// required .edu.vanderbilt.isis.meta.PayloadRaw.EncodingType encoding = 1 [default = PROTOBUF];
inline bool PayloadRaw::has_encoding() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PayloadRaw::set_has_encoding() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PayloadRaw::clear_has_encoding() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PayloadRaw::clear_encoding() {
  encoding_ = 1;
  clear_has_encoding();
}
inline ::edu::vanderbilt::isis::meta::PayloadRaw_EncodingType PayloadRaw::encoding() const {
  return static_cast< ::edu::vanderbilt::isis::meta::PayloadRaw_EncodingType >(encoding_);
}
inline void PayloadRaw::set_encoding(::edu::vanderbilt::isis::meta::PayloadRaw_EncodingType value) {
  assert(::edu::vanderbilt::isis::meta::PayloadRaw_EncodingType_IsValid(value));
  set_has_encoding();
  encoding_ = value;
}

// required bytes payload = 2;
inline bool PayloadRaw::has_payload() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PayloadRaw::set_has_payload() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PayloadRaw::clear_has_payload() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PayloadRaw::clear_payload() {
  if (payload_ != &::google::protobuf::internal::kEmptyString) {
    payload_->clear();
  }
  clear_has_payload();
}
inline const ::std::string& PayloadRaw::payload() const {
  return *payload_;
}
inline void PayloadRaw::set_payload(const ::std::string& value) {
  set_has_payload();
  if (payload_ == &::google::protobuf::internal::kEmptyString) {
    payload_ = new ::std::string;
  }
  payload_->assign(value);
}
inline void PayloadRaw::set_payload(const char* value) {
  set_has_payload();
  if (payload_ == &::google::protobuf::internal::kEmptyString) {
    payload_ = new ::std::string;
  }
  payload_->assign(value);
}
inline void PayloadRaw::set_payload(const void* value, size_t size) {
  set_has_payload();
  if (payload_ == &::google::protobuf::internal::kEmptyString) {
    payload_ = new ::std::string;
  }
  payload_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PayloadRaw::mutable_payload() {
  set_has_payload();
  if (payload_ == &::google::protobuf::internal::kEmptyString) {
    payload_ = new ::std::string;
  }
  return payload_;
}
inline ::std::string* PayloadRaw::release_payload() {
  clear_has_payload();
  if (payload_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = payload_;
    payload_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void PayloadRaw::set_allocated_payload(::std::string* payload) {
  if (payload_ != &::google::protobuf::internal::kEmptyString) {
    delete payload_;
  }
  if (payload) {
    set_has_payload();
    payload_ = payload;
  } else {
    clear_has_payload();
    payload_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// Payload

// optional .edu.vanderbilt.isis.meta.AssembliesType assemblies = 1;
inline bool Payload::has_assemblies() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Payload::set_has_assemblies() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Payload::clear_has_assemblies() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Payload::clear_assemblies() {
  if (assemblies_ != NULL) assemblies_->::edu::vanderbilt::isis::meta::AssembliesType::Clear();
  clear_has_assemblies();
}
inline const ::edu::vanderbilt::isis::meta::AssembliesType& Payload::assemblies() const {
  return assemblies_ != NULL ? *assemblies_ : *default_instance_->assemblies_;
}
inline ::edu::vanderbilt::isis::meta::AssembliesType* Payload::mutable_assemblies() {
  set_has_assemblies();
  if (assemblies_ == NULL) assemblies_ = new ::edu::vanderbilt::isis::meta::AssembliesType;
  return assemblies_;
}
inline ::edu::vanderbilt::isis::meta::AssembliesType* Payload::release_assemblies() {
  clear_has_assemblies();
  ::edu::vanderbilt::isis::meta::AssembliesType* temp = assemblies_;
  assemblies_ = NULL;
  return temp;
}
inline void Payload::set_allocated_assemblies(::edu::vanderbilt::isis::meta::AssembliesType* assemblies) {
  delete assemblies_;
  assemblies_ = assemblies;
  if (assemblies) {
    set_has_assemblies();
  } else {
    clear_has_assemblies();
  }
}

// repeated .edu.vanderbilt.isis.meta.CADComponentType cadComponent = 2;
inline int Payload::cadcomponent_size() const {
  return cadcomponent_.size();
}
inline void Payload::clear_cadcomponent() {
  cadcomponent_.Clear();
}
inline const ::edu::vanderbilt::isis::meta::CADComponentType& Payload::cadcomponent(int index) const {
  return cadcomponent_.Get(index);
}
inline ::edu::vanderbilt::isis::meta::CADComponentType* Payload::mutable_cadcomponent(int index) {
  return cadcomponent_.Mutable(index);
}
inline ::edu::vanderbilt::isis::meta::CADComponentType* Payload::add_cadcomponent() {
  return cadcomponent_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::edu::vanderbilt::isis::meta::CADComponentType >&
Payload::cadcomponent() const {
  return cadcomponent_;
}
inline ::google::protobuf::RepeatedPtrField< ::edu::vanderbilt::isis::meta::CADComponentType >*
Payload::mutable_cadcomponent() {
  return &cadcomponent_;
}

// repeated .edu.vanderbilt.isis.meta.ConstraintType cadConstraint = 3;
inline int Payload::cadconstraint_size() const {
  return cadconstraint_.size();
}
inline void Payload::clear_cadconstraint() {
  cadconstraint_.Clear();
}
inline const ::edu::vanderbilt::isis::meta::ConstraintType& Payload::cadconstraint(int index) const {
  return cadconstraint_.Get(index);
}
inline ::edu::vanderbilt::isis::meta::ConstraintType* Payload::mutable_cadconstraint(int index) {
  return cadconstraint_.Mutable(index);
}
inline ::edu::vanderbilt::isis::meta::ConstraintType* Payload::add_cadconstraint() {
  return cadconstraint_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::edu::vanderbilt::isis::meta::ConstraintType >&
Payload::cadconstraint() const {
  return cadconstraint_;
}
inline ::google::protobuf::RepeatedPtrField< ::edu::vanderbilt::isis::meta::ConstraintType >*
Payload::mutable_cadconstraint() {
  return &cadconstraint_;
}

// -------------------------------------------------------------------

// Notice

// required .edu.vanderbilt.isis.meta.Notice.NoticeType type = 1;
inline bool Notice::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Notice::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Notice::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Notice::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::edu::vanderbilt::isis::meta::Notice_NoticeType Notice::type() const {
  return static_cast< ::edu::vanderbilt::isis::meta::Notice_NoticeType >(type_);
}
inline void Notice::set_type(::edu::vanderbilt::isis::meta::Notice_NoticeType value) {
  assert(::edu::vanderbilt::isis::meta::Notice_NoticeType_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional .edu.vanderbilt.isis.meta.ID _id = 2;
inline bool Notice::has__id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Notice::set_has__id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Notice::clear_has__id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Notice::clear__id() {
  if (_id_ != NULL) _id_->::edu::vanderbilt::isis::meta::ID::Clear();
  clear_has__id();
}
inline const ::edu::vanderbilt::isis::meta::ID& Notice::_id() const {
  return _id_ != NULL ? *_id_ : *default_instance_->_id_;
}
inline ::edu::vanderbilt::isis::meta::ID* Notice::mutable__id() {
  set_has__id();
  if (_id_ == NULL) _id_ = new ::edu::vanderbilt::isis::meta::ID;
  return _id_;
}
inline ::edu::vanderbilt::isis::meta::ID* Notice::release__id() {
  clear_has__id();
  ::edu::vanderbilt::isis::meta::ID* temp = _id_;
  _id_ = NULL;
  return temp;
}
inline void Notice::set_allocated__id(::edu::vanderbilt::isis::meta::ID* _id) {
  delete _id_;
  _id_ = _id;
  if (_id) {
    set_has__id();
  } else {
    clear_has__id();
  }
}

// optional string msg = 3;
inline bool Notice::has_msg() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Notice::set_has_msg() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Notice::clear_has_msg() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Notice::clear_msg() {
  if (msg_ != &::google::protobuf::internal::kEmptyString) {
    msg_->clear();
  }
  clear_has_msg();
}
inline const ::std::string& Notice::msg() const {
  return *msg_;
}
inline void Notice::set_msg(const ::std::string& value) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  msg_->assign(value);
}
inline void Notice::set_msg(const char* value) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  msg_->assign(value);
}
inline void Notice::set_msg(const char* value, size_t size) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  msg_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Notice::mutable_msg() {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  return msg_;
}
inline ::std::string* Notice::release_msg() {
  clear_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = msg_;
    msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Notice::set_allocated_msg(::std::string* msg) {
  if (msg_ != &::google::protobuf::internal::kEmptyString) {
    delete msg_;
  }
  if (msg) {
    set_has_msg();
    msg_ = msg;
  } else {
    clear_has_msg();
    msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bytes code = 4;
inline bool Notice::has_code() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Notice::set_has_code() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Notice::clear_has_code() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Notice::clear_code() {
  if (code_ != &::google::protobuf::internal::kEmptyString) {
    code_->clear();
  }
  clear_has_code();
}
inline const ::std::string& Notice::code() const {
  return *code_;
}
inline void Notice::set_code(const ::std::string& value) {
  set_has_code();
  if (code_ == &::google::protobuf::internal::kEmptyString) {
    code_ = new ::std::string;
  }
  code_->assign(value);
}
inline void Notice::set_code(const char* value) {
  set_has_code();
  if (code_ == &::google::protobuf::internal::kEmptyString) {
    code_ = new ::std::string;
  }
  code_->assign(value);
}
inline void Notice::set_code(const void* value, size_t size) {
  set_has_code();
  if (code_ == &::google::protobuf::internal::kEmptyString) {
    code_ = new ::std::string;
  }
  code_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Notice::mutable_code() {
  set_has_code();
  if (code_ == &::google::protobuf::internal::kEmptyString) {
    code_ = new ::std::string;
  }
  return code_;
}
inline ::std::string* Notice::release_code() {
  clear_has_code();
  if (code_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = code_;
    code_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Notice::set_allocated_code(::std::string* code) {
  if (code_ != &::google::protobuf::internal::kEmptyString) {
    delete code_;
  }
  if (code) {
    set_has_code();
    code_ = code;
  } else {
    clear_has_code();
    code_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace meta
}  // namespace isis
}  // namespace vanderbilt
}  // namespace edu

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::edu::vanderbilt::isis::meta::Control_ActionType>() {
  return ::edu::vanderbilt::isis::meta::Control_ActionType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::edu::vanderbilt::isis::meta::PayloadRaw_EncodingType>() {
  return ::edu::vanderbilt::isis::meta::PayloadRaw_EncodingType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::edu::vanderbilt::isis::meta::Notice_NoticeType>() {
  return ::edu::vanderbilt::isis::meta::Notice_NoticeType_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_CdbMsg_2eproto__INCLUDED
