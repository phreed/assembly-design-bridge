// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MetaLinkMsg.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "MetaLinkMsg.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace edu {
namespace vanderbilt {
namespace isis {
namespace meta {

namespace {

const ::google::protobuf::Descriptor* Edit_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Edit_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Edit_ActionType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* RawPayload_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RawPayload_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* RawPayload_ActionType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* RawPayload_EncodingType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* Payload_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Payload_reflection_ = NULL;
const ::google::protobuf::Descriptor* Environment_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Environment_reflection_ = NULL;
const ::google::protobuf::Descriptor* Notice_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Notice_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Notice_NoticeType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_MetaLinkMsg_2eproto() {
  protobuf_AddDesc_MetaLinkMsg_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "MetaLinkMsg.proto");
  GOOGLE_CHECK(file != NULL);
  Edit_descriptor_ = file->message_type(0);
  static const int Edit_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Edit, action_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Edit, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Edit, topic_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Edit, origin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Edit, sequence_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Edit, notices_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Edit, raw_),
  };
  Edit_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Edit_descriptor_,
      Edit::default_instance_,
      Edit_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Edit, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Edit, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Edit));
  Edit_ActionType_descriptor_ = Edit_descriptor_->enum_type(0);
  RawPayload_descriptor_ = file->message_type(1);
  static const int RawPayload_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RawPayload, action_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RawPayload, encoding_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RawPayload, payload_),
  };
  RawPayload_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RawPayload_descriptor_,
      RawPayload::default_instance_,
      RawPayload_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RawPayload, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RawPayload, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RawPayload));
  RawPayload_ActionType_descriptor_ = RawPayload_descriptor_->enum_type(0);
  RawPayload_EncodingType_descriptor_ = RawPayload_descriptor_->enum_type(1);
  Payload_descriptor_ = file->message_type(2);
  static const int Payload_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Payload, assemblies_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Payload, components_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Payload, constraints_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Payload, parameters_),
  };
  Payload_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Payload_descriptor_,
      Payload::default_instance_,
      Payload_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Payload, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Payload, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Payload));
  Environment_descriptor_ = file->message_type(3);
  static const int Environment_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Environment, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Environment, value_),
  };
  Environment_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Environment_descriptor_,
      Environment::default_instance_,
      Environment_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Environment, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Environment, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Environment));
  Notice_descriptor_ = file->message_type(4);
  static const int Notice_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Notice, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Notice, _id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Notice, msg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Notice, code_),
  };
  Notice_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Notice_descriptor_,
      Notice::default_instance_,
      Notice_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Notice, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Notice, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Notice));
  Notice_NoticeType_descriptor_ = Notice_descriptor_->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_MetaLinkMsg_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Edit_descriptor_, &Edit::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RawPayload_descriptor_, &RawPayload::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Payload_descriptor_, &Payload::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Environment_descriptor_, &Environment::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Notice_descriptor_, &Notice::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_MetaLinkMsg_2eproto() {
  delete Edit::default_instance_;
  delete Edit_reflection_;
  delete RawPayload::default_instance_;
  delete RawPayload_reflection_;
  delete Payload::default_instance_;
  delete Payload_reflection_;
  delete Environment::default_instance_;
  delete Environment_reflection_;
  delete Notice::default_instance_;
  delete Notice_reflection_;
}

void protobuf_AddDesc_MetaLinkMsg_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::edu::vanderbilt::isis::meta::protobuf_AddDesc_XsdTypes_2eproto();
  ::edu::vanderbilt::isis::meta::protobuf_AddDesc_AssemblyInterface_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\021MetaLinkMsg.proto\022\030edu.vanderbilt.isis"
    ".meta\032\016XsdTypes.proto\032\027AssemblyInterface"
    ".proto\"\314\002\n\004Edit\022\?\n\006action\030\001 \002(\0162).edu.va"
    "nderbilt.isis.meta.Edit.ActionType:\004POST"
    "\022(\n\002id\030\002 \001(\0132\034.edu.vanderbilt.isis.meta."
    "ID\022\r\n\005topic\030\003 \003(\t\022\016\n\006origin\030\004 \001(\t\022\020\n\010seq"
    "uence\030\005 \001(\r\0221\n\007notices\030\006 \003(\0132 .edu.vande"
    "rbilt.isis.meta.Notice\0221\n\003raw\030\007 \003(\0132$.ed"
    "u.vanderbilt.isis.meta.RawPayload\"B\n\nAct"
    "ionType\022\013\n\007DISCARD\020\000\022\014\n\010INTEREST\020\001\022\017\n\013DI"
    "SINTEREST\020\002\022\010\n\004POST\020\003\"\256\002\n\nRawPayload\022H\n\006"
    "action\030\001 \002(\0162/.edu.vanderbilt.isis.meta."
    "RawPayload.ActionType:\007REPLACE\022M\n\010encodi"
    "ng\030\002 \002(\01621.edu.vanderbilt.isis.meta.RawP"
    "ayload.EncodingType:\010PROTOBUF\022\017\n\007payload"
    "\030\003 \002(\014\">\n\nActionType\022\013\n\007DISCARD\020\000\022\n\n\006INS"
    "ERT\020\001\022\013\n\007REPLACE\020\002\022\n\n\006UPDATE\020\003\"6\n\014Encodi"
    "ngType\022\007\n\003XML\020\000\022\014\n\010PROTOBUF\020\001\022\017\n\013ENVIRON"
    "MENT\020\002\"\216\002\n\007Payload\022<\n\nassemblies\030\001 \001(\0132("
    ".edu.vanderbilt.isis.meta.AssembliesType"
    "\022>\n\ncomponents\030\002 \003(\0132*.edu.vanderbilt.is"
    "is.meta.CADComponentType\022=\n\013constraints\030"
    "\003 \003(\0132(.edu.vanderbilt.isis.meta.Constra"
    "intType\022F\n\nparameters\030\004 \003(\01322.edu.vander"
    "bilt.isis.meta.ParametricParametersType\""
    "*\n\013Environment\022\014\n\004name\030\001 \002(\t\022\r\n\005value\030\002 "
    "\003(\t\"\357\001\n\006Notice\022\?\n\004type\030\001 \002(\0162+.edu.vande"
    "rbilt.isis.meta.Notice.NoticeType:\004BACK\022"
    ")\n\003_id\030\002 \001(\0132\034.edu.vanderbilt.isis.meta."
    "ID\022\013\n\003msg\030\003 \001(\t\022\014\n\004code\030\004 \001(\014\"^\n\nNoticeT"
    "ype\022\010\n\004BACK\020\000\022\007\n\003ACK\020\001\022\010\n\004DONE\020\002\022\010\n\004INFO"
    "\020\003\022\010\n\004WARN\020\004\022\t\n\005FAULT\020\005\022\n\n\006REJECT\020\006\022\010\n\004F"
    "AIL\020\007", 1285);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "MetaLinkMsg.proto", &protobuf_RegisterTypes);
  Edit::default_instance_ = new Edit();
  RawPayload::default_instance_ = new RawPayload();
  Payload::default_instance_ = new Payload();
  Environment::default_instance_ = new Environment();
  Notice::default_instance_ = new Notice();
  Edit::default_instance_->InitAsDefaultInstance();
  RawPayload::default_instance_->InitAsDefaultInstance();
  Payload::default_instance_->InitAsDefaultInstance();
  Environment::default_instance_->InitAsDefaultInstance();
  Notice::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_MetaLinkMsg_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_MetaLinkMsg_2eproto {
  StaticDescriptorInitializer_MetaLinkMsg_2eproto() {
    protobuf_AddDesc_MetaLinkMsg_2eproto();
  }
} static_descriptor_initializer_MetaLinkMsg_2eproto_;

// ===================================================================

const ::google::protobuf::EnumDescriptor* Edit_ActionType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Edit_ActionType_descriptor_;
}
bool Edit_ActionType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Edit_ActionType Edit::DISCARD;
const Edit_ActionType Edit::INTEREST;
const Edit_ActionType Edit::DISINTEREST;
const Edit_ActionType Edit::POST;
const Edit_ActionType Edit::ActionType_MIN;
const Edit_ActionType Edit::ActionType_MAX;
const int Edit::ActionType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int Edit::kActionFieldNumber;
const int Edit::kIdFieldNumber;
const int Edit::kTopicFieldNumber;
const int Edit::kOriginFieldNumber;
const int Edit::kSequenceFieldNumber;
const int Edit::kNoticesFieldNumber;
const int Edit::kRawFieldNumber;
#endif  // !_MSC_VER

Edit::Edit()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Edit::InitAsDefaultInstance() {
  id_ = const_cast< ::edu::vanderbilt::isis::meta::ID*>(&::edu::vanderbilt::isis::meta::ID::default_instance());
}

Edit::Edit(const Edit& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Edit::SharedCtor() {
  _cached_size_ = 0;
  action_ = 3;
  id_ = NULL;
  origin_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  sequence_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Edit::~Edit() {
  SharedDtor();
}

void Edit::SharedDtor() {
  if (origin_ != &::google::protobuf::internal::kEmptyString) {
    delete origin_;
  }
  if (this != default_instance_) {
    delete id_;
  }
}

void Edit::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Edit::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Edit_descriptor_;
}

const Edit& Edit::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MetaLinkMsg_2eproto();
  return *default_instance_;
}

Edit* Edit::default_instance_ = NULL;

Edit* Edit::New() const {
  return new Edit;
}

void Edit::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    action_ = 3;
    if (has_id()) {
      if (id_ != NULL) id_->::edu::vanderbilt::isis::meta::ID::Clear();
    }
    if (has_origin()) {
      if (origin_ != &::google::protobuf::internal::kEmptyString) {
        origin_->clear();
      }
    }
    sequence_ = 0u;
  }
  topic_.Clear();
  notices_.Clear();
  raw_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Edit::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .edu.vanderbilt.isis.meta.Edit.ActionType action = 1 [default = POST];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::edu::vanderbilt::isis::meta::Edit_ActionType_IsValid(value)) {
            set_action(static_cast< ::edu::vanderbilt::isis::meta::Edit_ActionType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_id;
        break;
      }

      // optional .edu.vanderbilt.isis.meta.ID id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_topic;
        break;
      }

      // repeated string topic = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_topic:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_topic()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->topic(this->topic_size() - 1).data(),
            this->topic(this->topic_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_topic;
        if (input->ExpectTag(34)) goto parse_origin;
        break;
      }

      // optional string origin = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_origin:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_origin()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->origin().data(), this->origin().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_sequence;
        break;
      }

      // optional uint32 sequence = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sequence:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sequence_)));
          set_has_sequence();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_notices;
        break;
      }

      // repeated .edu.vanderbilt.isis.meta.Notice notices = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_notices:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_notices()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_notices;
        if (input->ExpectTag(58)) goto parse_raw;
        break;
      }

      // repeated .edu.vanderbilt.isis.meta.RawPayload raw = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_raw:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_raw()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_raw;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Edit::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .edu.vanderbilt.isis.meta.Edit.ActionType action = 1 [default = POST];
  if (has_action()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->action(), output);
  }

  // optional .edu.vanderbilt.isis.meta.ID id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->id(), output);
  }

  // repeated string topic = 3;
  for (int i = 0; i < this->topic_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->topic(i).data(), this->topic(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->topic(i), output);
  }

  // optional string origin = 4;
  if (has_origin()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->origin().data(), this->origin().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->origin(), output);
  }

  // optional uint32 sequence = 5;
  if (has_sequence()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->sequence(), output);
  }

  // repeated .edu.vanderbilt.isis.meta.Notice notices = 6;
  for (int i = 0; i < this->notices_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->notices(i), output);
  }

  // repeated .edu.vanderbilt.isis.meta.RawPayload raw = 7;
  for (int i = 0; i < this->raw_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->raw(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Edit::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .edu.vanderbilt.isis.meta.Edit.ActionType action = 1 [default = POST];
  if (has_action()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->action(), target);
  }

  // optional .edu.vanderbilt.isis.meta.ID id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->id(), target);
  }

  // repeated string topic = 3;
  for (int i = 0; i < this->topic_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->topic(i).data(), this->topic(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->topic(i), target);
  }

  // optional string origin = 4;
  if (has_origin()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->origin().data(), this->origin().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->origin(), target);
  }

  // optional uint32 sequence = 5;
  if (has_sequence()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->sequence(), target);
  }

  // repeated .edu.vanderbilt.isis.meta.Notice notices = 6;
  for (int i = 0; i < this->notices_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->notices(i), target);
  }

  // repeated .edu.vanderbilt.isis.meta.RawPayload raw = 7;
  for (int i = 0; i < this->raw_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->raw(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Edit::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .edu.vanderbilt.isis.meta.Edit.ActionType action = 1 [default = POST];
    if (has_action()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->action());
    }

    // optional .edu.vanderbilt.isis.meta.ID id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->id());
    }

    // optional string origin = 4;
    if (has_origin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->origin());
    }

    // optional uint32 sequence = 5;
    if (has_sequence()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sequence());
    }

  }
  // repeated string topic = 3;
  total_size += 1 * this->topic_size();
  for (int i = 0; i < this->topic_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->topic(i));
  }

  // repeated .edu.vanderbilt.isis.meta.Notice notices = 6;
  total_size += 1 * this->notices_size();
  for (int i = 0; i < this->notices_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->notices(i));
  }

  // repeated .edu.vanderbilt.isis.meta.RawPayload raw = 7;
  total_size += 1 * this->raw_size();
  for (int i = 0; i < this->raw_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->raw(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Edit::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Edit* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Edit*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Edit::MergeFrom(const Edit& from) {
  GOOGLE_CHECK_NE(&from, this);
  topic_.MergeFrom(from.topic_);
  notices_.MergeFrom(from.notices_);
  raw_.MergeFrom(from.raw_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_action()) {
      set_action(from.action());
    }
    if (from.has_id()) {
      mutable_id()->::edu::vanderbilt::isis::meta::ID::MergeFrom(from.id());
    }
    if (from.has_origin()) {
      set_origin(from.origin());
    }
    if (from.has_sequence()) {
      set_sequence(from.sequence());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Edit::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Edit::CopyFrom(const Edit& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Edit::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_id()) {
    if (!this->id().IsInitialized()) return false;
  }
  for (int i = 0; i < notices_size(); i++) {
    if (!this->notices(i).IsInitialized()) return false;
  }
  for (int i = 0; i < raw_size(); i++) {
    if (!this->raw(i).IsInitialized()) return false;
  }
  return true;
}

void Edit::Swap(Edit* other) {
  if (other != this) {
    std::swap(action_, other->action_);
    std::swap(id_, other->id_);
    topic_.Swap(&other->topic_);
    std::swap(origin_, other->origin_);
    std::swap(sequence_, other->sequence_);
    notices_.Swap(&other->notices_);
    raw_.Swap(&other->raw_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Edit::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Edit_descriptor_;
  metadata.reflection = Edit_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* RawPayload_ActionType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RawPayload_ActionType_descriptor_;
}
bool RawPayload_ActionType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const RawPayload_ActionType RawPayload::DISCARD;
const RawPayload_ActionType RawPayload::INSERT;
const RawPayload_ActionType RawPayload::REPLACE;
const RawPayload_ActionType RawPayload::UPDATE;
const RawPayload_ActionType RawPayload::ActionType_MIN;
const RawPayload_ActionType RawPayload::ActionType_MAX;
const int RawPayload::ActionType_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* RawPayload_EncodingType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RawPayload_EncodingType_descriptor_;
}
bool RawPayload_EncodingType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const RawPayload_EncodingType RawPayload::XML;
const RawPayload_EncodingType RawPayload::PROTOBUF;
const RawPayload_EncodingType RawPayload::ENVIRONMENT;
const RawPayload_EncodingType RawPayload::EncodingType_MIN;
const RawPayload_EncodingType RawPayload::EncodingType_MAX;
const int RawPayload::EncodingType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int RawPayload::kActionFieldNumber;
const int RawPayload::kEncodingFieldNumber;
const int RawPayload::kPayloadFieldNumber;
#endif  // !_MSC_VER

RawPayload::RawPayload()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RawPayload::InitAsDefaultInstance() {
}

RawPayload::RawPayload(const RawPayload& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RawPayload::SharedCtor() {
  _cached_size_ = 0;
  action_ = 2;
  encoding_ = 1;
  payload_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RawPayload::~RawPayload() {
  SharedDtor();
}

void RawPayload::SharedDtor() {
  if (payload_ != &::google::protobuf::internal::kEmptyString) {
    delete payload_;
  }
  if (this != default_instance_) {
  }
}

void RawPayload::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RawPayload::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RawPayload_descriptor_;
}

const RawPayload& RawPayload::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MetaLinkMsg_2eproto();
  return *default_instance_;
}

RawPayload* RawPayload::default_instance_ = NULL;

RawPayload* RawPayload::New() const {
  return new RawPayload;
}

void RawPayload::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    action_ = 2;
    encoding_ = 1;
    if (has_payload()) {
      if (payload_ != &::google::protobuf::internal::kEmptyString) {
        payload_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RawPayload::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .edu.vanderbilt.isis.meta.RawPayload.ActionType action = 1 [default = REPLACE];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::edu::vanderbilt::isis::meta::RawPayload_ActionType_IsValid(value)) {
            set_action(static_cast< ::edu::vanderbilt::isis::meta::RawPayload_ActionType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_encoding;
        break;
      }

      // required .edu.vanderbilt.isis.meta.RawPayload.EncodingType encoding = 2 [default = PROTOBUF];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_encoding:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::edu::vanderbilt::isis::meta::RawPayload_EncodingType_IsValid(value)) {
            set_encoding(static_cast< ::edu::vanderbilt::isis::meta::RawPayload_EncodingType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_payload;
        break;
      }

      // required bytes payload = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_payload:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_payload()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RawPayload::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .edu.vanderbilt.isis.meta.RawPayload.ActionType action = 1 [default = REPLACE];
  if (has_action()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->action(), output);
  }

  // required .edu.vanderbilt.isis.meta.RawPayload.EncodingType encoding = 2 [default = PROTOBUF];
  if (has_encoding()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->encoding(), output);
  }

  // required bytes payload = 3;
  if (has_payload()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->payload(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RawPayload::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .edu.vanderbilt.isis.meta.RawPayload.ActionType action = 1 [default = REPLACE];
  if (has_action()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->action(), target);
  }

  // required .edu.vanderbilt.isis.meta.RawPayload.EncodingType encoding = 2 [default = PROTOBUF];
  if (has_encoding()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->encoding(), target);
  }

  // required bytes payload = 3;
  if (has_payload()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->payload(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RawPayload::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .edu.vanderbilt.isis.meta.RawPayload.ActionType action = 1 [default = REPLACE];
    if (has_action()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->action());
    }

    // required .edu.vanderbilt.isis.meta.RawPayload.EncodingType encoding = 2 [default = PROTOBUF];
    if (has_encoding()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->encoding());
    }

    // required bytes payload = 3;
    if (has_payload()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->payload());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RawPayload::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RawPayload* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RawPayload*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RawPayload::MergeFrom(const RawPayload& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_action()) {
      set_action(from.action());
    }
    if (from.has_encoding()) {
      set_encoding(from.encoding());
    }
    if (from.has_payload()) {
      set_payload(from.payload());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RawPayload::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RawPayload::CopyFrom(const RawPayload& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RawPayload::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void RawPayload::Swap(RawPayload* other) {
  if (other != this) {
    std::swap(action_, other->action_);
    std::swap(encoding_, other->encoding_);
    std::swap(payload_, other->payload_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RawPayload::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RawPayload_descriptor_;
  metadata.reflection = RawPayload_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Payload::kAssembliesFieldNumber;
const int Payload::kComponentsFieldNumber;
const int Payload::kConstraintsFieldNumber;
const int Payload::kParametersFieldNumber;
#endif  // !_MSC_VER

Payload::Payload()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Payload::InitAsDefaultInstance() {
  assemblies_ = const_cast< ::edu::vanderbilt::isis::meta::AssembliesType*>(&::edu::vanderbilt::isis::meta::AssembliesType::default_instance());
}

Payload::Payload(const Payload& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Payload::SharedCtor() {
  _cached_size_ = 0;
  assemblies_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Payload::~Payload() {
  SharedDtor();
}

void Payload::SharedDtor() {
  if (this != default_instance_) {
    delete assemblies_;
  }
}

void Payload::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Payload::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Payload_descriptor_;
}

const Payload& Payload::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MetaLinkMsg_2eproto();
  return *default_instance_;
}

Payload* Payload::default_instance_ = NULL;

Payload* Payload::New() const {
  return new Payload;
}

void Payload::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_assemblies()) {
      if (assemblies_ != NULL) assemblies_->::edu::vanderbilt::isis::meta::AssembliesType::Clear();
    }
  }
  components_.Clear();
  constraints_.Clear();
  parameters_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Payload::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .edu.vanderbilt.isis.meta.AssembliesType assemblies = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_assemblies()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_components;
        break;
      }

      // repeated .edu.vanderbilt.isis.meta.CADComponentType components = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_components:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_components()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_components;
        if (input->ExpectTag(26)) goto parse_constraints;
        break;
      }

      // repeated .edu.vanderbilt.isis.meta.ConstraintType constraints = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_constraints:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_constraints()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_constraints;
        if (input->ExpectTag(34)) goto parse_parameters;
        break;
      }

      // repeated .edu.vanderbilt.isis.meta.ParametricParametersType parameters = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_parameters:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_parameters()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_parameters;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Payload::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .edu.vanderbilt.isis.meta.AssembliesType assemblies = 1;
  if (has_assemblies()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->assemblies(), output);
  }

  // repeated .edu.vanderbilt.isis.meta.CADComponentType components = 2;
  for (int i = 0; i < this->components_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->components(i), output);
  }

  // repeated .edu.vanderbilt.isis.meta.ConstraintType constraints = 3;
  for (int i = 0; i < this->constraints_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->constraints(i), output);
  }

  // repeated .edu.vanderbilt.isis.meta.ParametricParametersType parameters = 4;
  for (int i = 0; i < this->parameters_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->parameters(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Payload::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .edu.vanderbilt.isis.meta.AssembliesType assemblies = 1;
  if (has_assemblies()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->assemblies(), target);
  }

  // repeated .edu.vanderbilt.isis.meta.CADComponentType components = 2;
  for (int i = 0; i < this->components_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->components(i), target);
  }

  // repeated .edu.vanderbilt.isis.meta.ConstraintType constraints = 3;
  for (int i = 0; i < this->constraints_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->constraints(i), target);
  }

  // repeated .edu.vanderbilt.isis.meta.ParametricParametersType parameters = 4;
  for (int i = 0; i < this->parameters_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->parameters(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Payload::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .edu.vanderbilt.isis.meta.AssembliesType assemblies = 1;
    if (has_assemblies()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->assemblies());
    }

  }
  // repeated .edu.vanderbilt.isis.meta.CADComponentType components = 2;
  total_size += 1 * this->components_size();
  for (int i = 0; i < this->components_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->components(i));
  }

  // repeated .edu.vanderbilt.isis.meta.ConstraintType constraints = 3;
  total_size += 1 * this->constraints_size();
  for (int i = 0; i < this->constraints_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->constraints(i));
  }

  // repeated .edu.vanderbilt.isis.meta.ParametricParametersType parameters = 4;
  total_size += 1 * this->parameters_size();
  for (int i = 0; i < this->parameters_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->parameters(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Payload::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Payload* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Payload*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Payload::MergeFrom(const Payload& from) {
  GOOGLE_CHECK_NE(&from, this);
  components_.MergeFrom(from.components_);
  constraints_.MergeFrom(from.constraints_);
  parameters_.MergeFrom(from.parameters_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_assemblies()) {
      mutable_assemblies()->::edu::vanderbilt::isis::meta::AssembliesType::MergeFrom(from.assemblies());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Payload::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Payload::CopyFrom(const Payload& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Payload::IsInitialized() const {

  if (has_assemblies()) {
    if (!this->assemblies().IsInitialized()) return false;
  }
  for (int i = 0; i < components_size(); i++) {
    if (!this->components(i).IsInitialized()) return false;
  }
  for (int i = 0; i < constraints_size(); i++) {
    if (!this->constraints(i).IsInitialized()) return false;
  }
  for (int i = 0; i < parameters_size(); i++) {
    if (!this->parameters(i).IsInitialized()) return false;
  }
  return true;
}

void Payload::Swap(Payload* other) {
  if (other != this) {
    std::swap(assemblies_, other->assemblies_);
    components_.Swap(&other->components_);
    constraints_.Swap(&other->constraints_);
    parameters_.Swap(&other->parameters_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Payload::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Payload_descriptor_;
  metadata.reflection = Payload_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Environment::kNameFieldNumber;
const int Environment::kValueFieldNumber;
#endif  // !_MSC_VER

Environment::Environment()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Environment::InitAsDefaultInstance() {
}

Environment::Environment(const Environment& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Environment::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Environment::~Environment() {
  SharedDtor();
}

void Environment::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void Environment::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Environment::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Environment_descriptor_;
}

const Environment& Environment::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MetaLinkMsg_2eproto();
  return *default_instance_;
}

Environment* Environment::default_instance_ = NULL;

Environment* Environment::New() const {
  return new Environment;
}

void Environment::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
  }
  value_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Environment::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_value;
        break;
      }

      // repeated string value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_value()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->value(this->value_size() - 1).data(),
            this->value(this->value_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_value;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Environment::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  // repeated string value = 2;
  for (int i = 0; i < this->value_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->value(i).data(), this->value(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->value(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Environment::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // repeated string value = 2;
  for (int i = 0; i < this->value_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->value(i).data(), this->value(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->value(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Environment::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

  }
  // repeated string value = 2;
  total_size += 1 * this->value_size();
  for (int i = 0; i < this->value_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->value(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Environment::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Environment* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Environment*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Environment::MergeFrom(const Environment& from) {
  GOOGLE_CHECK_NE(&from, this);
  value_.MergeFrom(from.value_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Environment::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Environment::CopyFrom(const Environment& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Environment::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Environment::Swap(Environment* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    value_.Swap(&other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Environment::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Environment_descriptor_;
  metadata.reflection = Environment_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* Notice_NoticeType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Notice_NoticeType_descriptor_;
}
bool Notice_NoticeType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Notice_NoticeType Notice::BACK;
const Notice_NoticeType Notice::ACK;
const Notice_NoticeType Notice::DONE;
const Notice_NoticeType Notice::INFO;
const Notice_NoticeType Notice::WARN;
const Notice_NoticeType Notice::FAULT;
const Notice_NoticeType Notice::REJECT;
const Notice_NoticeType Notice::FAIL;
const Notice_NoticeType Notice::NoticeType_MIN;
const Notice_NoticeType Notice::NoticeType_MAX;
const int Notice::NoticeType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int Notice::kTypeFieldNumber;
const int Notice::kIdFieldNumber;
const int Notice::kMsgFieldNumber;
const int Notice::kCodeFieldNumber;
#endif  // !_MSC_VER

Notice::Notice()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Notice::InitAsDefaultInstance() {
  _id_ = const_cast< ::edu::vanderbilt::isis::meta::ID*>(&::edu::vanderbilt::isis::meta::ID::default_instance());
}

Notice::Notice(const Notice& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Notice::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  _id_ = NULL;
  msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  code_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Notice::~Notice() {
  SharedDtor();
}

void Notice::SharedDtor() {
  if (msg_ != &::google::protobuf::internal::kEmptyString) {
    delete msg_;
  }
  if (code_ != &::google::protobuf::internal::kEmptyString) {
    delete code_;
  }
  if (this != default_instance_) {
    delete _id_;
  }
}

void Notice::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Notice::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Notice_descriptor_;
}

const Notice& Notice::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MetaLinkMsg_2eproto();
  return *default_instance_;
}

Notice* Notice::default_instance_ = NULL;

Notice* Notice::New() const {
  return new Notice;
}

void Notice::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    if (has__id()) {
      if (_id_ != NULL) _id_->::edu::vanderbilt::isis::meta::ID::Clear();
    }
    if (has_msg()) {
      if (msg_ != &::google::protobuf::internal::kEmptyString) {
        msg_->clear();
      }
    }
    if (has_code()) {
      if (code_ != &::google::protobuf::internal::kEmptyString) {
        code_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Notice::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .edu.vanderbilt.isis.meta.Notice.NoticeType type = 1 [default = BACK];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::edu::vanderbilt::isis::meta::Notice_NoticeType_IsValid(value)) {
            set_type(static_cast< ::edu::vanderbilt::isis::meta::Notice_NoticeType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse__id;
        break;
      }

      // optional .edu.vanderbilt.isis.meta.ID _id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse__id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_msg;
        break;
      }

      // optional string msg = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msg().data(), this->msg().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_code;
        break;
      }

      // optional bytes code = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_code:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_code()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Notice::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .edu.vanderbilt.isis.meta.Notice.NoticeType type = 1 [default = BACK];
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional .edu.vanderbilt.isis.meta.ID _id = 2;
  if (has__id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_id(), output);
  }

  // optional string msg = 3;
  if (has_msg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msg().data(), this->msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->msg(), output);
  }

  // optional bytes code = 4;
  if (has_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->code(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Notice::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .edu.vanderbilt.isis.meta.Notice.NoticeType type = 1 [default = BACK];
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional .edu.vanderbilt.isis.meta.ID _id = 2;
  if (has__id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->_id(), target);
  }

  // optional string msg = 3;
  if (has_msg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msg().data(), this->msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->msg(), target);
  }

  // optional bytes code = 4;
  if (has_code()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->code(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Notice::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .edu.vanderbilt.isis.meta.Notice.NoticeType type = 1 [default = BACK];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional .edu.vanderbilt.isis.meta.ID _id = 2;
    if (has__id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_id());
    }

    // optional string msg = 3;
    if (has_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msg());
    }

    // optional bytes code = 4;
    if (has_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->code());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Notice::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Notice* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Notice*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Notice::MergeFrom(const Notice& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has__id()) {
      mutable__id()->::edu::vanderbilt::isis::meta::ID::MergeFrom(from._id());
    }
    if (from.has_msg()) {
      set_msg(from.msg());
    }
    if (from.has_code()) {
      set_code(from.code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Notice::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Notice::CopyFrom(const Notice& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Notice::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has__id()) {
    if (!this->_id().IsInitialized()) return false;
  }
  return true;
}

void Notice::Swap(Notice* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(_id_, other->_id_);
    std::swap(msg_, other->msg_);
    std::swap(code_, other->code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Notice::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Notice_descriptor_;
  metadata.reflection = Notice_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace meta
}  // namespace isis
}  // namespace vanderbilt
}  // namespace edu

// @@protoc_insertion_point(global_scope)
