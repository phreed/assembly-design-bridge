// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: AssemblyInterface.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "AssemblyInterface.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace edu {
namespace vanderbilt {
namespace isis {
namespace meta {

namespace {

const ::google::protobuf::Descriptor* AccelerationType_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AccelerationType_reflection_ = NULL;
const ::google::protobuf::Descriptor* AnalysesType_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AnalysesType_reflection_ = NULL;
const ::google::protobuf::Descriptor* AnalysisComponentsType_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AnalysisComponentsType_reflection_ = NULL;
const ::google::protobuf::Descriptor* AnalysisConstraintType_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AnalysisConstraintType_reflection_ = NULL;
const ::google::protobuf::Descriptor* AnalysisConstraintsType_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AnalysisConstraintsType_reflection_ = NULL;
const ::google::protobuf::Descriptor* AssembliesType_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AssembliesType_reflection_ = NULL;
const ::google::protobuf::Descriptor* AssemblyType_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AssemblyType_reflection_ = NULL;
const ::google::protobuf::Descriptor* AxialDisplacementType_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AxialDisplacementType_reflection_ = NULL;
const ::google::protobuf::Descriptor* AxialRotationType_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AxialRotationType_reflection_ = NULL;
const ::google::protobuf::Descriptor* BallType_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BallType_reflection_ = NULL;
const ::google::protobuf::Descriptor* BallisticType_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BallisticType_reflection_ = NULL;
const ::google::protobuf::Descriptor* BoundingBoxType_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BoundingBoxType_reflection_ = NULL;
const ::google::protobuf::Descriptor* CADComponentType_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CADComponentType_reflection_ = NULL;
const ::google::protobuf::Descriptor* CADParameterType_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CADParameterType_reflection_ = NULL;
const ::google::protobuf::Descriptor* CenterOfGravityType_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CenterOfGravityType_reflection_ = NULL;
const ::google::protobuf::Descriptor* ComponentType_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ComponentType_reflection_ = NULL;
const ::google::protobuf::Descriptor* ComputationsType_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ComputationsType_reflection_ = NULL;
const ::google::protobuf::Descriptor* ConditionType_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ConditionType_reflection_ = NULL;
const ::google::protobuf::Descriptor* ConditionsType_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ConditionsType_reflection_ = NULL;
const ::google::protobuf::Descriptor* ConstraintFeatureType_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ConstraintFeatureType_reflection_ = NULL;
const ::google::protobuf::Descriptor* ConstraintOffsetType_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ConstraintOffsetType_reflection_ = NULL;
const ::google::protobuf::Descriptor* ConstraintType_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ConstraintType_reflection_ = NULL;
const ::google::protobuf::Descriptor* DataExchangeType_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DataExchangeType_reflection_ = NULL;
const ::google::protobuf::Descriptor* DisplacementType_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DisplacementType_reflection_ = NULL;
const ::google::protobuf::Descriptor* FEAType_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FEAType_reflection_ = NULL;
const ::google::protobuf::Descriptor* FeatureType_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FeatureType_reflection_ = NULL;
const ::google::protobuf::Descriptor* FeaturesType_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FeaturesType_reflection_ = NULL;
const ::google::protobuf::Descriptor* FixedType_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FixedType_reflection_ = NULL;
const ::google::protobuf::Descriptor* ForceMomentType_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ForceMomentType_reflection_ = NULL;
const ::google::protobuf::Descriptor* ForceType_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ForceType_reflection_ = NULL;
const ::google::protobuf::Descriptor* GeometryType_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GeometryType_reflection_ = NULL;
const ::google::protobuf::Descriptor* InterferenceType_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  InterferenceType_reflection_ = NULL;
const ::google::protobuf::Descriptor* KinematicConnectionsType_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  KinematicConnectionsType_reflection_ = NULL;
const ::google::protobuf::Descriptor* KinematicFeatureType_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  KinematicFeatureType_reflection_ = NULL;
const ::google::protobuf::Descriptor* LoadType_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LoadType_reflection_ = NULL;
const ::google::protobuf::Descriptor* LoadsType_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LoadsType_reflection_ = NULL;
const ::google::protobuf::Descriptor* MassType_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MassType_reflection_ = NULL;
const ::google::protobuf::Descriptor* MaterialPropertyType_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MaterialPropertyType_reflection_ = NULL;
const ::google::protobuf::Descriptor* MaterialType_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MaterialType_reflection_ = NULL;
const ::google::protobuf::Descriptor* MaterialsType_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MaterialsType_reflection_ = NULL;
const ::google::protobuf::Descriptor* MetricType_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MetricType_reflection_ = NULL;
const ::google::protobuf::Descriptor* MetricsType_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MetricsType_reflection_ = NULL;
const ::google::protobuf::Descriptor* MomentType_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MomentType_reflection_ = NULL;
const ::google::protobuf::Descriptor* PairType_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PairType_reflection_ = NULL;
const ::google::protobuf::Descriptor* ParametricParametersType_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ParametricParametersType_reflection_ = NULL;
const ::google::protobuf::Descriptor* PartInterfaceType_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PartInterfaceType_reflection_ = NULL;
const ::google::protobuf::Descriptor* PartInterfacesType_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PartInterfacesType_reflection_ = NULL;
const ::google::protobuf::Descriptor* PinType_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PinType_reflection_ = NULL;
const ::google::protobuf::Descriptor* PointCoordinatesType_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PointCoordinatesType_reflection_ = NULL;
const ::google::protobuf::Descriptor* PressureType_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PressureType_reflection_ = NULL;
const ::google::protobuf::Descriptor* PrismaticType_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PrismaticType_reflection_ = NULL;
const ::google::protobuf::Descriptor* PropertiesType_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PropertiesType_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReferencePlaneType_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReferencePlaneType_reflection_ = NULL;
const ::google::protobuf::Descriptor* RevoluteType_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RevoluteType_reflection_ = NULL;
const ::google::protobuf::Descriptor* RotationType_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RotationType_reflection_ = NULL;
const ::google::protobuf::Descriptor* STEPFormatType_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  STEPFormatType_reflection_ = NULL;
const ::google::protobuf::Descriptor* SetOperationType_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SetOperationType_reflection_ = NULL;
const ::google::protobuf::Descriptor* ShotlineType_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ShotlineType_reflection_ = NULL;
const ::google::protobuf::Descriptor* ShotlinesType_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ShotlinesType_reflection_ = NULL;
const ::google::protobuf::Descriptor* SolverType_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SolverType_reflection_ = NULL;
const ::google::protobuf::Descriptor* SolversType_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SolversType_reflection_ = NULL;
const ::google::protobuf::Descriptor* SphericalType_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SphericalType_reflection_ = NULL;
const ::google::protobuf::Descriptor* SurfaceTreatmentType_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SurfaceTreatmentType_reflection_ = NULL;
const ::google::protobuf::Descriptor* SurfaceTreatmentsType_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SurfaceTreatmentsType_reflection_ = NULL;
const ::google::protobuf::Descriptor* ToleranceType_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ToleranceType_reflection_ = NULL;
const ::google::protobuf::Descriptor* TranslationType_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TranslationType_reflection_ = NULL;
const ::google::protobuf::Descriptor* UnassembledComponentsType_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UnassembledComponentsType_reflection_ = NULL;
const ::google::protobuf::Descriptor* UnitsType_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UnitsType_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_AssemblyInterface_2eproto() {
  protobuf_AddDesc_AssemblyInterface_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "AssemblyInterface.proto");
  GOOGLE_CHECK(file != NULL);
  AccelerationType_descriptor_ = file->message_type(0);
  static const int AccelerationType_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccelerationType, units_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccelerationType, _id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccelerationType, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccelerationType, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccelerationType, z_),
  };
  AccelerationType_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AccelerationType_descriptor_,
      AccelerationType::default_instance_,
      AccelerationType_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccelerationType, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccelerationType, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AccelerationType));
  AnalysesType_descriptor_ = file->message_type(1);
  static const int AnalysesType_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnalysesType, ballistic_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnalysesType, fea_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnalysesType, interference_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnalysesType, tolerance_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnalysesType, _id_),
  };
  AnalysesType_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AnalysesType_descriptor_,
      AnalysesType::default_instance_,
      AnalysesType_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnalysesType, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnalysesType, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AnalysesType));
  AnalysisComponentsType_descriptor_ = file->message_type(2);
  static const int AnalysisComponentsType_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnalysisComponentsType, component_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnalysisComponentsType, _id_),
  };
  AnalysisComponentsType_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AnalysisComponentsType_descriptor_,
      AnalysisComponentsType::default_instance_,
      AnalysisComponentsType_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnalysisComponentsType, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnalysisComponentsType, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AnalysisComponentsType));
  AnalysisConstraintType_descriptor_ = file->message_type(3);
  static const int AnalysisConstraintType_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnalysisConstraintType, ball_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnalysisConstraintType, displacement_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnalysisConstraintType, geometry_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnalysisConstraintType, pin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnalysisConstraintType, _id_),
  };
  AnalysisConstraintType_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AnalysisConstraintType_descriptor_,
      AnalysisConstraintType::default_instance_,
      AnalysisConstraintType_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnalysisConstraintType, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnalysisConstraintType, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AnalysisConstraintType));
  AnalysisConstraintsType_descriptor_ = file->message_type(4);
  static const int AnalysisConstraintsType_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnalysisConstraintsType, analysisconstraint_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnalysisConstraintsType, _id_),
  };
  AnalysisConstraintsType_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AnalysisConstraintsType_descriptor_,
      AnalysisConstraintsType::default_instance_,
      AnalysisConstraintsType_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnalysisConstraintsType, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnalysisConstraintsType, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AnalysisConstraintsType));
  AssembliesType_descriptor_ = file->message_type(5);
  static const int AssembliesType_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AssembliesType, assembly_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AssembliesType, dataexchange_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AssembliesType, materials_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AssembliesType, unassembledcomponents_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AssembliesType, assemblies_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AssembliesType, versioninfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AssembliesType, _id_),
  };
  AssembliesType_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AssembliesType_descriptor_,
      AssembliesType::default_instance_,
      AssembliesType_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AssembliesType, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AssembliesType, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AssembliesType));
  AssemblyType_descriptor_ = file->message_type(6);
  static const int AssemblyType_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AssemblyType, analyses_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AssemblyType, cadcomponent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AssemblyType, computations_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AssemblyType, properties_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AssemblyType, configurationid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AssemblyType, _id_),
  };
  AssemblyType_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AssemblyType_descriptor_,
      AssemblyType::default_instance_,
      AssemblyType_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AssemblyType, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AssemblyType, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AssemblyType));
  AxialDisplacementType_descriptor_ = file->message_type(7);
  static const int AxialDisplacementType_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AxialDisplacementType, property_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AxialDisplacementType, _id_),
  };
  AxialDisplacementType_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AxialDisplacementType_descriptor_,
      AxialDisplacementType::default_instance_,
      AxialDisplacementType_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AxialDisplacementType, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AxialDisplacementType, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AxialDisplacementType));
  AxialRotationType_descriptor_ = file->message_type(8);
  static const int AxialRotationType_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AxialRotationType, property_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AxialRotationType, _id_),
  };
  AxialRotationType_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AxialRotationType_descriptor_,
      AxialRotationType::default_instance_,
      AxialRotationType_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AxialRotationType, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AxialRotationType, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AxialRotationType));
  BallType_descriptor_ = file->message_type(9);
  static const int BallType_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BallType, _id_),
  };
  BallType_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BallType_descriptor_,
      BallType::default_instance_,
      BallType_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BallType, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BallType, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BallType));
  BallisticType_descriptor_ = file->message_type(10);
  static const int BallisticType_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BallisticType, referenceplane_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BallisticType, shotlines_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BallisticType, analysisid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BallisticType, _id_),
  };
  BallisticType_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BallisticType_descriptor_,
      BallisticType::default_instance_,
      BallisticType_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BallisticType, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BallisticType, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BallisticType));
  BoundingBoxType_descriptor_ = file->message_type(11);
  static const int BoundingBoxType_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BoundingBoxType, componentid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BoundingBoxType, metricid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BoundingBoxType, requestedvaluetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BoundingBoxType, _id_),
  };
  BoundingBoxType_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BoundingBoxType_descriptor_,
      BoundingBoxType::default_instance_,
      BoundingBoxType_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BoundingBoxType, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BoundingBoxType, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BoundingBoxType));
  CADComponentType_descriptor_ = file->message_type(12);
  static const int CADComponentType_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CADComponentType, cadcomponent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CADComponentType, constraint_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CADComponentType, kinematicconnections_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CADComponentType, parametricparameters_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CADComponentType, componentid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CADComponentType, materialid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CADComponentType, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CADComponentType, specialinstruction_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CADComponentType, standalone_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CADComponentType, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CADComponentType, _id_),
  };
  CADComponentType_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CADComponentType_descriptor_,
      CADComponentType::default_instance_,
      CADComponentType_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CADComponentType, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CADComponentType, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CADComponentType));
  CADParameterType_descriptor_ = file->message_type(13);
  static const int CADParameterType_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CADParameterType, units_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CADParameterType, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CADParameterType, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CADParameterType, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CADParameterType, _id_),
  };
  CADParameterType_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CADParameterType_descriptor_,
      CADParameterType::default_instance_,
      CADParameterType_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CADParameterType, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CADParameterType, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CADParameterType));
  CenterOfGravityType_descriptor_ = file->message_type(14);
  static const int CenterOfGravityType_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CenterOfGravityType, componentid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CenterOfGravityType, metricid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CenterOfGravityType, requestedvaluetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CenterOfGravityType, _id_),
  };
  CenterOfGravityType_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CenterOfGravityType_descriptor_,
      CenterOfGravityType::default_instance_,
      CenterOfGravityType_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CenterOfGravityType, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CenterOfGravityType, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CenterOfGravityType));
  ComponentType_descriptor_ = file->message_type(15);
  static const int ComponentType_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComponentType, metrics_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComponentType, componentid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComponentType, infinitecycle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComponentType, _id_),
  };
  ComponentType_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ComponentType_descriptor_,
      ComponentType::default_instance_,
      ComponentType_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComponentType, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComponentType, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ComponentType));
  ComputationsType_descriptor_ = file->message_type(16);
  static const int ComputationsType_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComputationsType, boundingbox_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComputationsType, centerofgravity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComputationsType, mass_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComputationsType, pointcoordinates_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComputationsType, _id_),
  };
  ComputationsType_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ComputationsType_descriptor_,
      ComputationsType::default_instance_,
      ComputationsType_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComputationsType, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComputationsType, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ComputationsType));
  ConditionType_descriptor_ = file->message_type(17);
  static const int ConditionType_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConditionType, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConditionType, units_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConditionType, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConditionType, _id_),
  };
  ConditionType_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ConditionType_descriptor_,
      ConditionType::default_instance_,
      ConditionType_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConditionType, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConditionType, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ConditionType));
  ConditionsType_descriptor_ = file->message_type(18);
  static const int ConditionsType_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConditionsType, condition_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConditionsType, _id_),
  };
  ConditionsType_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ConditionsType_descriptor_,
      ConditionsType::default_instance_,
      ConditionsType_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConditionsType, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConditionsType, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ConditionsType));
  ConstraintFeatureType_descriptor_ = file->message_type(19);
  static const int ConstraintFeatureType_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConstraintFeatureType, componentid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConstraintFeatureType, featurename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConstraintFeatureType, featureorientationtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConstraintFeatureType, _id_),
  };
  ConstraintFeatureType_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ConstraintFeatureType_descriptor_,
      ConstraintFeatureType::default_instance_,
      ConstraintFeatureType_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConstraintFeatureType, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConstraintFeatureType, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ConstraintFeatureType));
  ConstraintOffsetType_descriptor_ = file->message_type(20);
  static const int ConstraintOffsetType_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConstraintOffsetType, units_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConstraintOffsetType, offsetalignmenttype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConstraintOffsetType, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConstraintOffsetType, _id_),
  };
  ConstraintOffsetType_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ConstraintOffsetType_descriptor_,
      ConstraintOffsetType::default_instance_,
      ConstraintOffsetType_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConstraintOffsetType, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConstraintOffsetType, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ConstraintOffsetType));
  ConstraintType_descriptor_ = file->message_type(21);
  static const int ConstraintType_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConstraintType, pair_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConstraintType, _id_),
  };
  ConstraintType_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ConstraintType_descriptor_,
      ConstraintType::default_instance_,
      ConstraintType_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConstraintType, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConstraintType, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ConstraintType));
  DataExchangeType_descriptor_ = file->message_type(22);
  static const int DataExchangeType_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataExchangeType, stepformat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataExchangeType, _id_),
  };
  DataExchangeType_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DataExchangeType_descriptor_,
      DataExchangeType::default_instance_,
      DataExchangeType_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataExchangeType, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataExchangeType, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DataExchangeType));
  DisplacementType_descriptor_ = file->message_type(23);
  static const int DisplacementType_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DisplacementType, rotation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DisplacementType, translation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DisplacementType, _id_),
  };
  DisplacementType_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DisplacementType_descriptor_,
      DisplacementType::default_instance_,
      DisplacementType_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DisplacementType, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DisplacementType, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DisplacementType));
  FEAType_descriptor_ = file->message_type(24);
  static const int FEAType_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FEAType, analysiscomponents_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FEAType, analysisconstraints_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FEAType, conditions_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FEAType, loads_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FEAType, partinterfaces_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FEAType, solvers_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FEAType, surfacetreatments_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FEAType, analysisid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FEAType, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FEAType, _id_),
  };
  FEAType_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FEAType_descriptor_,
      FEAType::default_instance_,
      FEAType_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FEAType, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FEAType, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FEAType));
  FeatureType_descriptor_ = file->message_type(25);
  static const int FeatureType_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeatureType, componentid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeatureType, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeatureType, _id_),
  };
  FeatureType_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FeatureType_descriptor_,
      FeatureType::default_instance_,
      FeatureType_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeatureType, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeatureType, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FeatureType));
  FeaturesType_descriptor_ = file->message_type(26);
  static const int FeaturesType_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeaturesType, feature_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeaturesType, featuregeometrytype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeaturesType, featureid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeaturesType, featureinterfacetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeaturesType, geometrytype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeaturesType, primarygeometryqualifier_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeaturesType, secondarygeometryqualifier_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeaturesType, _id_),
  };
  FeaturesType_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FeaturesType_descriptor_,
      FeaturesType::default_instance_,
      FeaturesType_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeaturesType, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeaturesType, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FeaturesType));
  FixedType_descriptor_ = file->message_type(27);
  static const int FixedType_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FixedType, kinematicfeature_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FixedType, cfm_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FixedType, connectedcomponentid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FixedType, connectionid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FixedType, erp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FixedType, featureinterfacetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FixedType, _id_),
  };
  FixedType_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FixedType_descriptor_,
      FixedType::default_instance_,
      FixedType_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FixedType, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FixedType, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FixedType));
  ForceMomentType_descriptor_ = file->message_type(28);
  static const int ForceMomentType_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForceMomentType, force_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForceMomentType, moment_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForceMomentType, _id_),
  };
  ForceMomentType_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ForceMomentType_descriptor_,
      ForceMomentType::default_instance_,
      ForceMomentType_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForceMomentType, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForceMomentType, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ForceMomentType));
  ForceType_descriptor_ = file->message_type(29);
  static const int ForceType_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForceType, units_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForceType, _id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForceType, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForceType, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForceType, z_),
  };
  ForceType_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ForceType_descriptor_,
      ForceType::default_instance_,
      ForceType_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForceType, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForceType, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ForceType));
  GeometryType_descriptor_ = file->message_type(30);
  static const int GeometryType_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GeometryType, features_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GeometryType, setoperation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GeometryType, _id_),
  };
  GeometryType_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GeometryType_descriptor_,
      GeometryType::default_instance_,
      GeometryType_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GeometryType, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GeometryType, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GeometryType));
  InterferenceType_descriptor_ = file->message_type(31);
  static const int InterferenceType_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InterferenceType, analysisid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InterferenceType, _id_),
  };
  InterferenceType_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      InterferenceType_descriptor_,
      InterferenceType::default_instance_,
      InterferenceType_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InterferenceType, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InterferenceType, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(InterferenceType));
  KinematicConnectionsType_descriptor_ = file->message_type(32);
  static const int KinematicConnectionsType_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KinematicConnectionsType, fixed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KinematicConnectionsType, prismatic_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KinematicConnectionsType, revolute_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KinematicConnectionsType, spherical_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KinematicConnectionsType, _id_),
  };
  KinematicConnectionsType_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      KinematicConnectionsType_descriptor_,
      KinematicConnectionsType::default_instance_,
      KinematicConnectionsType_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KinematicConnectionsType, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KinematicConnectionsType, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(KinematicConnectionsType));
  KinematicFeatureType_descriptor_ = file->message_type(33);
  static const int KinematicFeatureType_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KinematicFeatureType, componentid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KinematicFeatureType, datumname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KinematicFeatureType, featuregeometrytype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KinematicFeatureType, _id_),
  };
  KinematicFeatureType_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      KinematicFeatureType_descriptor_,
      KinematicFeatureType::default_instance_,
      KinematicFeatureType_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KinematicFeatureType, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KinematicFeatureType, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(KinematicFeatureType));
  LoadType_descriptor_ = file->message_type(34);
  static const int LoadType_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoadType, acceleration_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoadType, forcemoment_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoadType, geometry_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoadType, pressure_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoadType, _id_),
  };
  LoadType_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LoadType_descriptor_,
      LoadType::default_instance_,
      LoadType_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoadType, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoadType, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LoadType));
  LoadsType_descriptor_ = file->message_type(35);
  static const int LoadsType_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoadsType, load_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoadsType, _id_),
  };
  LoadsType_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LoadsType_descriptor_,
      LoadsType::default_instance_,
      LoadsType_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoadsType, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoadsType, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LoadsType));
  MassType_descriptor_ = file->message_type(36);
  static const int MassType_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MassType, componentid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MassType, metricid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MassType, requestedvaluetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MassType, _id_),
  };
  MassType_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MassType_descriptor_,
      MassType::default_instance_,
      MassType_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MassType, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MassType, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MassType));
  MaterialPropertyType_descriptor_ = file->message_type(37);
  static const int MaterialPropertyType_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MaterialPropertyType, propertyname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MaterialPropertyType, units_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MaterialPropertyType, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MaterialPropertyType, _id_),
  };
  MaterialPropertyType_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MaterialPropertyType_descriptor_,
      MaterialPropertyType::default_instance_,
      MaterialPropertyType_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MaterialPropertyType, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MaterialPropertyType, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MaterialPropertyType));
  MaterialType_descriptor_ = file->message_type(38);
  static const int MaterialType_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MaterialType, materialproperty_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MaterialType, materialid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MaterialType, materialname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MaterialType, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MaterialType, _id_),
  };
  MaterialType_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MaterialType_descriptor_,
      MaterialType::default_instance_,
      MaterialType_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MaterialType, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MaterialType, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MaterialType));
  MaterialsType_descriptor_ = file->message_type(39);
  static const int MaterialsType_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MaterialsType, material_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MaterialsType, _id_),
  };
  MaterialsType_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MaterialsType_descriptor_,
      MaterialsType::default_instance_,
      MaterialsType_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MaterialsType, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MaterialsType, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MaterialsType));
  MetricType_descriptor_ = file->message_type(40);
  static const int MetricType_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MetricType, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MetricType, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MetricType, _id_),
  };
  MetricType_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MetricType_descriptor_,
      MetricType::default_instance_,
      MetricType_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MetricType, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MetricType, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MetricType));
  MetricsType_descriptor_ = file->message_type(41);
  static const int MetricsType_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MetricsType, metric_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MetricsType, _id_),
  };
  MetricsType_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MetricsType_descriptor_,
      MetricsType::default_instance_,
      MetricsType_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MetricsType, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MetricsType, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MetricsType));
  MomentType_descriptor_ = file->message_type(42);
  static const int MomentType_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MomentType, units_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MomentType, _id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MomentType, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MomentType, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MomentType, z_),
  };
  MomentType_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MomentType_descriptor_,
      MomentType::default_instance_,
      MomentType_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MomentType, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MomentType, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MomentType));
  PairType_descriptor_ = file->message_type(43);
  static const int PairType_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PairType, constraintfeaturea_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PairType, constraintfeatureb_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PairType, constraintoffset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PairType, featurealignmenttype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PairType, featuregeometrytype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PairType, featureinterfacetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PairType, _id_),
  };
  PairType_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PairType_descriptor_,
      PairType::default_instance_,
      PairType_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PairType, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PairType, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PairType));
  ParametricParametersType_descriptor_ = file->message_type(44);
  static const int ParametricParametersType_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParametricParametersType, cadparameter_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParametricParametersType, _id_),
  };
  ParametricParametersType_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ParametricParametersType_descriptor_,
      ParametricParametersType::default_instance_,
      ParametricParametersType_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParametricParametersType, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParametricParametersType, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ParametricParametersType));
  PartInterfaceType_descriptor_ = file->message_type(45);
  static const int PartInterfaceType_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PartInterfaceType, componentid_1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PartInterfaceType, componentid_2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PartInterfaceType, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PartInterfaceType, _id_),
  };
  PartInterfaceType_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PartInterfaceType_descriptor_,
      PartInterfaceType::default_instance_,
      PartInterfaceType_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PartInterfaceType, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PartInterfaceType, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PartInterfaceType));
  PartInterfacesType_descriptor_ = file->message_type(46);
  static const int PartInterfacesType_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PartInterfacesType, partinterface_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PartInterfacesType, _id_),
  };
  PartInterfacesType_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PartInterfacesType_descriptor_,
      PartInterfacesType::default_instance_,
      PartInterfacesType_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PartInterfacesType, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PartInterfacesType, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PartInterfacesType));
  PinType_descriptor_ = file->message_type(47);
  static const int PinType_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PinType, axialdisplacement_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PinType, axialrotation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PinType, _id_),
  };
  PinType_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PinType_descriptor_,
      PinType::default_instance_,
      PinType_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PinType, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PinType, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PinType));
  PointCoordinatesType_descriptor_ = file->message_type(48);
  static const int PointCoordinatesType_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PointCoordinatesType, componentid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PointCoordinatesType, featuredatumname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PointCoordinatesType, metricid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PointCoordinatesType, requestedvaluetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PointCoordinatesType, _id_),
  };
  PointCoordinatesType_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PointCoordinatesType_descriptor_,
      PointCoordinatesType::default_instance_,
      PointCoordinatesType_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PointCoordinatesType, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PointCoordinatesType, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PointCoordinatesType));
  PressureType_descriptor_ = file->message_type(49);
  static const int PressureType_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PressureType, units_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PressureType, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PressureType, _id_),
  };
  PressureType_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PressureType_descriptor_,
      PressureType::default_instance_,
      PressureType_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PressureType, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PressureType, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PressureType));
  PrismaticType_descriptor_ = file->message_type(50);
  static const int PrismaticType_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrismaticType, kinematicfeature_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrismaticType, cfm_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrismaticType, connectedcomponentid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrismaticType, connectionid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrismaticType, erp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrismaticType, featureinterfacetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrismaticType, _id_),
  };
  PrismaticType_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PrismaticType_descriptor_,
      PrismaticType::default_instance_,
      PrismaticType_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrismaticType, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrismaticType, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PrismaticType));
  PropertiesType_descriptor_ = file->message_type(51);
  static const int PropertiesType_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PropertiesType, units_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PropertiesType, _id_),
  };
  PropertiesType_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PropertiesType_descriptor_,
      PropertiesType::default_instance_,
      PropertiesType_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PropertiesType, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PropertiesType, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PropertiesType));
  ReferencePlaneType_descriptor_ = file->message_type(52);
  static const int ReferencePlaneType_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReferencePlaneType, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReferencePlaneType, _id_),
  };
  ReferencePlaneType_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReferencePlaneType_descriptor_,
      ReferencePlaneType::default_instance_,
      ReferencePlaneType_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReferencePlaneType, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReferencePlaneType, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReferencePlaneType));
  RevoluteType_descriptor_ = file->message_type(53);
  static const int RevoluteType_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RevoluteType, kinematicfeature_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RevoluteType, cfm_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RevoluteType, connectedcomponentid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RevoluteType, connectionid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RevoluteType, erp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RevoluteType, featureinterfacetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RevoluteType, _id_),
  };
  RevoluteType_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RevoluteType_descriptor_,
      RevoluteType::default_instance_,
      RevoluteType_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RevoluteType, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RevoluteType, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RevoluteType));
  RotationType_descriptor_ = file->message_type(54);
  static const int RotationType_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RotationType, units_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RotationType, _id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RotationType, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RotationType, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RotationType, z_),
  };
  RotationType_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RotationType_descriptor_,
      RotationType::default_instance_,
      RotationType_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RotationType, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RotationType, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RotationType));
  STEPFormatType_descriptor_ = file->message_type(55);
  static const int STEPFormatType_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(STEPFormatType, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(STEPFormatType, _id_),
  };
  STEPFormatType_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      STEPFormatType_descriptor_,
      STEPFormatType::default_instance_,
      STEPFormatType_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(STEPFormatType, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(STEPFormatType, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(STEPFormatType));
  SetOperationType_descriptor_ = file->message_type(56);
  static const int SetOperationType_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetOperationType, featureid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetOperationType, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetOperationType, _id_),
  };
  SetOperationType_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SetOperationType_descriptor_,
      SetOperationType::default_instance_,
      SetOperationType_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetOperationType, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetOperationType, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SetOperationType));
  ShotlineType_descriptor_ = file->message_type(57);
  static const int ShotlineType_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShotlineType, azimuth_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShotlineType, ballisticthreatref_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShotlineType, componentid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShotlineType, datumpoint_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShotlineType, elevation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShotlineType, _id_),
  };
  ShotlineType_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ShotlineType_descriptor_,
      ShotlineType::default_instance_,
      ShotlineType_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShotlineType, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShotlineType, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ShotlineType));
  ShotlinesType_descriptor_ = file->message_type(58);
  static const int ShotlinesType_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShotlinesType, shotline_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShotlinesType, _id_),
  };
  ShotlinesType_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ShotlinesType_descriptor_,
      ShotlinesType::default_instance_,
      ShotlinesType_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShotlinesType, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShotlinesType, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ShotlinesType));
  SolverType_descriptor_ = file->message_type(59);
  static const int SolverType_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverType, elementshapetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverType, meshtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverType, shellelementtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverType, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverType, _id_),
  };
  SolverType_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SolverType_descriptor_,
      SolverType::default_instance_,
      SolverType_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverType, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolverType, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SolverType));
  SolversType_descriptor_ = file->message_type(60);
  static const int SolversType_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolversType, solver_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolversType, _id_),
  };
  SolversType_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SolversType_descriptor_,
      SolversType::default_instance_,
      SolversType_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolversType, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolversType, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SolversType));
  SphericalType_descriptor_ = file->message_type(61);
  static const int SphericalType_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SphericalType, kinematicfeature_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SphericalType, cfm_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SphericalType, connectedcomponentid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SphericalType, connectionid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SphericalType, erp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SphericalType, featureinterfacetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SphericalType, _id_),
  };
  SphericalType_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SphericalType_descriptor_,
      SphericalType::default_instance_,
      SphericalType_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SphericalType, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SphericalType, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SphericalType));
  SurfaceTreatmentType_descriptor_ = file->message_type(62);
  static const int SurfaceTreatmentType_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SurfaceTreatmentType, geometry_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SurfaceTreatmentType, adjoiningparts_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SurfaceTreatmentType, _id_),
  };
  SurfaceTreatmentType_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SurfaceTreatmentType_descriptor_,
      SurfaceTreatmentType::default_instance_,
      SurfaceTreatmentType_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SurfaceTreatmentType, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SurfaceTreatmentType, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SurfaceTreatmentType));
  SurfaceTreatmentsType_descriptor_ = file->message_type(63);
  static const int SurfaceTreatmentsType_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SurfaceTreatmentsType, surfacetreatment_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SurfaceTreatmentsType, _id_),
  };
  SurfaceTreatmentsType_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SurfaceTreatmentsType_descriptor_,
      SurfaceTreatmentsType::default_instance_,
      SurfaceTreatmentsType_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SurfaceTreatmentsType, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SurfaceTreatmentsType, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SurfaceTreatmentsType));
  ToleranceType_descriptor_ = file->message_type(64);
  static const int ToleranceType_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ToleranceType, analysisid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ToleranceType, _id_),
  };
  ToleranceType_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ToleranceType_descriptor_,
      ToleranceType::default_instance_,
      ToleranceType_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ToleranceType, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ToleranceType, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ToleranceType));
  TranslationType_descriptor_ = file->message_type(65);
  static const int TranslationType_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TranslationType, units_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TranslationType, _id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TranslationType, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TranslationType, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TranslationType, z_),
  };
  TranslationType_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TranslationType_descriptor_,
      TranslationType::default_instance_,
      TranslationType_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TranslationType, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TranslationType, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TranslationType));
  UnassembledComponentsType_descriptor_ = file->message_type(66);
  static const int UnassembledComponentsType_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnassembledComponentsType, cadcomponent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnassembledComponentsType, _id_),
  };
  UnassembledComponentsType_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UnassembledComponentsType_descriptor_,
      UnassembledComponentsType::default_instance_,
      UnassembledComponentsType_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnassembledComponentsType, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnassembledComponentsType, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UnassembledComponentsType));
  UnitsType_descriptor_ = file->message_type(67);
  static const int UnitsType_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnitsType, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnitsType, _id_),
  };
  UnitsType_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UnitsType_descriptor_,
      UnitsType::default_instance_,
      UnitsType_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnitsType, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnitsType, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UnitsType));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_AssemblyInterface_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AccelerationType_descriptor_, &AccelerationType::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AnalysesType_descriptor_, &AnalysesType::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AnalysisComponentsType_descriptor_, &AnalysisComponentsType::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AnalysisConstraintType_descriptor_, &AnalysisConstraintType::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AnalysisConstraintsType_descriptor_, &AnalysisConstraintsType::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AssembliesType_descriptor_, &AssembliesType::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AssemblyType_descriptor_, &AssemblyType::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AxialDisplacementType_descriptor_, &AxialDisplacementType::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AxialRotationType_descriptor_, &AxialRotationType::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BallType_descriptor_, &BallType::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BallisticType_descriptor_, &BallisticType::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BoundingBoxType_descriptor_, &BoundingBoxType::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CADComponentType_descriptor_, &CADComponentType::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CADParameterType_descriptor_, &CADParameterType::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CenterOfGravityType_descriptor_, &CenterOfGravityType::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ComponentType_descriptor_, &ComponentType::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ComputationsType_descriptor_, &ComputationsType::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ConditionType_descriptor_, &ConditionType::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ConditionsType_descriptor_, &ConditionsType::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ConstraintFeatureType_descriptor_, &ConstraintFeatureType::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ConstraintOffsetType_descriptor_, &ConstraintOffsetType::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ConstraintType_descriptor_, &ConstraintType::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DataExchangeType_descriptor_, &DataExchangeType::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DisplacementType_descriptor_, &DisplacementType::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FEAType_descriptor_, &FEAType::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FeatureType_descriptor_, &FeatureType::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FeaturesType_descriptor_, &FeaturesType::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FixedType_descriptor_, &FixedType::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ForceMomentType_descriptor_, &ForceMomentType::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ForceType_descriptor_, &ForceType::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GeometryType_descriptor_, &GeometryType::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    InterferenceType_descriptor_, &InterferenceType::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    KinematicConnectionsType_descriptor_, &KinematicConnectionsType::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    KinematicFeatureType_descriptor_, &KinematicFeatureType::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LoadType_descriptor_, &LoadType::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LoadsType_descriptor_, &LoadsType::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MassType_descriptor_, &MassType::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MaterialPropertyType_descriptor_, &MaterialPropertyType::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MaterialType_descriptor_, &MaterialType::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MaterialsType_descriptor_, &MaterialsType::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MetricType_descriptor_, &MetricType::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MetricsType_descriptor_, &MetricsType::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MomentType_descriptor_, &MomentType::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PairType_descriptor_, &PairType::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ParametricParametersType_descriptor_, &ParametricParametersType::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PartInterfaceType_descriptor_, &PartInterfaceType::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PartInterfacesType_descriptor_, &PartInterfacesType::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PinType_descriptor_, &PinType::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PointCoordinatesType_descriptor_, &PointCoordinatesType::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PressureType_descriptor_, &PressureType::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PrismaticType_descriptor_, &PrismaticType::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PropertiesType_descriptor_, &PropertiesType::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReferencePlaneType_descriptor_, &ReferencePlaneType::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RevoluteType_descriptor_, &RevoluteType::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RotationType_descriptor_, &RotationType::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    STEPFormatType_descriptor_, &STEPFormatType::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SetOperationType_descriptor_, &SetOperationType::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ShotlineType_descriptor_, &ShotlineType::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ShotlinesType_descriptor_, &ShotlinesType::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SolverType_descriptor_, &SolverType::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SolversType_descriptor_, &SolversType::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SphericalType_descriptor_, &SphericalType::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SurfaceTreatmentType_descriptor_, &SurfaceTreatmentType::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SurfaceTreatmentsType_descriptor_, &SurfaceTreatmentsType::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ToleranceType_descriptor_, &ToleranceType::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TranslationType_descriptor_, &TranslationType::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UnassembledComponentsType_descriptor_, &UnassembledComponentsType::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UnitsType_descriptor_, &UnitsType::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_AssemblyInterface_2eproto() {
  delete AccelerationType::default_instance_;
  delete AccelerationType_reflection_;
  delete AnalysesType::default_instance_;
  delete AnalysesType_reflection_;
  delete AnalysisComponentsType::default_instance_;
  delete AnalysisComponentsType_reflection_;
  delete AnalysisConstraintType::default_instance_;
  delete AnalysisConstraintType_reflection_;
  delete AnalysisConstraintsType::default_instance_;
  delete AnalysisConstraintsType_reflection_;
  delete AssembliesType::default_instance_;
  delete AssembliesType_reflection_;
  delete AssemblyType::default_instance_;
  delete AssemblyType_reflection_;
  delete AxialDisplacementType::default_instance_;
  delete AxialDisplacementType_reflection_;
  delete AxialRotationType::default_instance_;
  delete AxialRotationType_reflection_;
  delete BallType::default_instance_;
  delete BallType_reflection_;
  delete BallisticType::default_instance_;
  delete BallisticType_reflection_;
  delete BoundingBoxType::default_instance_;
  delete BoundingBoxType_reflection_;
  delete CADComponentType::default_instance_;
  delete CADComponentType_reflection_;
  delete CADParameterType::default_instance_;
  delete CADParameterType_reflection_;
  delete CenterOfGravityType::default_instance_;
  delete CenterOfGravityType_reflection_;
  delete ComponentType::default_instance_;
  delete ComponentType_reflection_;
  delete ComputationsType::default_instance_;
  delete ComputationsType_reflection_;
  delete ConditionType::default_instance_;
  delete ConditionType_reflection_;
  delete ConditionsType::default_instance_;
  delete ConditionsType_reflection_;
  delete ConstraintFeatureType::default_instance_;
  delete ConstraintFeatureType_reflection_;
  delete ConstraintOffsetType::default_instance_;
  delete ConstraintOffsetType_reflection_;
  delete ConstraintType::default_instance_;
  delete ConstraintType_reflection_;
  delete DataExchangeType::default_instance_;
  delete DataExchangeType_reflection_;
  delete DisplacementType::default_instance_;
  delete DisplacementType_reflection_;
  delete FEAType::default_instance_;
  delete FEAType_reflection_;
  delete FeatureType::default_instance_;
  delete FeatureType_reflection_;
  delete FeaturesType::default_instance_;
  delete FeaturesType_reflection_;
  delete FixedType::default_instance_;
  delete FixedType_reflection_;
  delete ForceMomentType::default_instance_;
  delete ForceMomentType_reflection_;
  delete ForceType::default_instance_;
  delete ForceType_reflection_;
  delete GeometryType::default_instance_;
  delete GeometryType_reflection_;
  delete InterferenceType::default_instance_;
  delete InterferenceType_reflection_;
  delete KinematicConnectionsType::default_instance_;
  delete KinematicConnectionsType_reflection_;
  delete KinematicFeatureType::default_instance_;
  delete KinematicFeatureType_reflection_;
  delete LoadType::default_instance_;
  delete LoadType_reflection_;
  delete LoadsType::default_instance_;
  delete LoadsType_reflection_;
  delete MassType::default_instance_;
  delete MassType_reflection_;
  delete MaterialPropertyType::default_instance_;
  delete MaterialPropertyType_reflection_;
  delete MaterialType::default_instance_;
  delete MaterialType_reflection_;
  delete MaterialsType::default_instance_;
  delete MaterialsType_reflection_;
  delete MetricType::default_instance_;
  delete MetricType_reflection_;
  delete MetricsType::default_instance_;
  delete MetricsType_reflection_;
  delete MomentType::default_instance_;
  delete MomentType_reflection_;
  delete PairType::default_instance_;
  delete PairType_reflection_;
  delete ParametricParametersType::default_instance_;
  delete ParametricParametersType_reflection_;
  delete PartInterfaceType::default_instance_;
  delete PartInterfaceType_reflection_;
  delete PartInterfacesType::default_instance_;
  delete PartInterfacesType_reflection_;
  delete PinType::default_instance_;
  delete PinType_reflection_;
  delete PointCoordinatesType::default_instance_;
  delete PointCoordinatesType_reflection_;
  delete PressureType::default_instance_;
  delete PressureType_reflection_;
  delete PrismaticType::default_instance_;
  delete PrismaticType_reflection_;
  delete PropertiesType::default_instance_;
  delete PropertiesType_reflection_;
  delete ReferencePlaneType::default_instance_;
  delete ReferencePlaneType_reflection_;
  delete RevoluteType::default_instance_;
  delete RevoluteType_reflection_;
  delete RotationType::default_instance_;
  delete RotationType_reflection_;
  delete STEPFormatType::default_instance_;
  delete STEPFormatType_reflection_;
  delete SetOperationType::default_instance_;
  delete SetOperationType_reflection_;
  delete ShotlineType::default_instance_;
  delete ShotlineType_reflection_;
  delete ShotlinesType::default_instance_;
  delete ShotlinesType_reflection_;
  delete SolverType::default_instance_;
  delete SolverType_reflection_;
  delete SolversType::default_instance_;
  delete SolversType_reflection_;
  delete SphericalType::default_instance_;
  delete SphericalType_reflection_;
  delete SurfaceTreatmentType::default_instance_;
  delete SurfaceTreatmentType_reflection_;
  delete SurfaceTreatmentsType::default_instance_;
  delete SurfaceTreatmentsType_reflection_;
  delete ToleranceType::default_instance_;
  delete ToleranceType_reflection_;
  delete TranslationType::default_instance_;
  delete TranslationType_reflection_;
  delete UnassembledComponentsType::default_instance_;
  delete UnassembledComponentsType_reflection_;
  delete UnitsType::default_instance_;
  delete UnitsType_reflection_;
}

void protobuf_AddDesc_AssemblyInterface_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::edu::vanderbilt::isis::meta::protobuf_AddDesc_XsdTypes_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\027AssemblyInterface.proto\022\030edu.vanderbil"
    "t.isis.meta\032\016XsdTypes.proto\"m\n\020Accelerat"
    "ionType\022\r\n\005Units\030\001 \002(\t\022)\n\003_id\030\002 \001(\0132\034.ed"
    "u.vanderbilt.isis.meta.ID\022\t\n\001x\030\003 \002(\001\022\t\n\001"
    "y\030\004 \002(\001\022\t\n\001z\030\005 \002(\001\"\243\002\n\014AnalysesType\022:\n\tB"
    "allistic\030\001 \003(\0132\'.edu.vanderbilt.isis.met"
    "a.BallisticType\022.\n\003FEA\030\002 \003(\0132!.edu.vande"
    "rbilt.isis.meta.FEAType\022@\n\014Interference\030"
    "\003 \003(\0132*.edu.vanderbilt.isis.meta.Interfe"
    "renceType\022:\n\tTolerance\030\004 \003(\0132\'.edu.vande"
    "rbilt.isis.meta.ToleranceType\022)\n\003_id\030\005 \001"
    "(\0132\034.edu.vanderbilt.isis.meta.ID\"\177\n\026Anal"
    "ysisComponentsType\022:\n\tComponent\030\001 \003(\0132\'."
    "edu.vanderbilt.isis.meta.ComponentType\022)"
    "\n\003_id\030\002 \001(\0132\034.edu.vanderbilt.isis.meta.I"
    "D\"\241\002\n\026AnalysisConstraintType\0220\n\004Ball\030\001 \001"
    "(\0132\".edu.vanderbilt.isis.meta.BallType\022@"
    "\n\014Displacement\030\002 \001(\0132*.edu.vanderbilt.is"
    "is.meta.DisplacementType\0228\n\010Geometry\030\003 \001"
    "(\0132&.edu.vanderbilt.isis.meta.GeometryTy"
    "pe\022.\n\003Pin\030\004 \001(\0132!.edu.vanderbilt.isis.me"
    "ta.PinType\022)\n\003_id\030\005 \001(\0132\034.edu.vanderbilt"
    ".isis.meta.ID\"\222\001\n\027AnalysisConstraintsTyp"
    "e\022L\n\022AnalysisConstraint\030\001 \003(\01320.edu.vand"
    "erbilt.isis.meta.AnalysisConstraintType\022"
    ")\n\003_id\030\002 \001(\0132\034.edu.vanderbilt.isis.meta."
    "ID\"\232\003\n\016AssembliesType\0228\n\010Assembly\030\001 \003(\0132"
    "&.edu.vanderbilt.isis.meta.AssemblyType\022"
    "@\n\014DataExchange\030\002 \001(\0132*.edu.vanderbilt.i"
    "sis.meta.DataExchangeType\022:\n\tMaterials\030\003"
    " \003(\0132\'.edu.vanderbilt.isis.meta.Material"
    "sType\022R\n\025UnassembledComponents\030\004 \001(\01323.e"
    "du.vanderbilt.isis.meta.UnassembledCompo"
    "nentsType\022<\n\nAssemblies\030\005 \003(\0132(.edu.vand"
    "erbilt.isis.meta.AssembliesType\022\023\n\013Versi"
    "onInfo\030\006 \002(\t\022)\n\003_id\030\007 \001(\0132\034.edu.vanderbi"
    "lt.isis.meta.ID\"\316\002\n\014AssemblyType\0228\n\010Anal"
    "yses\030\001 \001(\0132&.edu.vanderbilt.isis.meta.An"
    "alysesType\022@\n\014CADComponent\030\002 \001(\0132*.edu.v"
    "anderbilt.isis.meta.CADComponentType\022@\n\014"
    "Computations\030\003 \001(\0132*.edu.vanderbilt.isis"
    ".meta.ComputationsType\022<\n\nProperties\030\004 \002"
    "(\0132(.edu.vanderbilt.isis.meta.Properties"
    "Type\022\027\n\017ConfigurationID\030\005 \002(\t\022)\n\003_id\030\006 \001"
    "(\0132\034.edu.vanderbilt.isis.meta.ID\"T\n\025Axia"
    "lDisplacementType\022\020\n\010Property\030\001 \002(\t\022)\n\003_"
    "id\030\002 \001(\0132\034.edu.vanderbilt.isis.meta.ID\"P"
    "\n\021AxialRotationType\022\020\n\010Property\030\001 \002(\t\022)\n"
    "\003_id\030\002 \001(\0132\034.edu.vanderbilt.isis.meta.ID"
    "\"5\n\010BallType\022)\n\003_id\030\001 \001(\0132\034.edu.vanderbi"
    "lt.isis.meta.ID\"\320\001\n\rBallisticType\022D\n\016Ref"
    "erencePlane\030\001 \001(\0132,.edu.vanderbilt.isis."
    "meta.ReferencePlaneType\022:\n\tShotlines\030\002 \001"
    "(\0132\'.edu.vanderbilt.isis.meta.ShotlinesT"
    "ype\022\022\n\nAnalysisID\030\003 \002(\t\022)\n\003_id\030\004 \001(\0132\034.e"
    "du.vanderbilt.isis.meta.ID\"\177\n\017BoundingBo"
    "xType\022\023\n\013ComponentID\030\001 \002(\t\022\020\n\010MetricID\030\002"
    " \002(\t\022\032\n\022RequestedValueType\030\003 \002(\t\022)\n\003_id\030"
    "\004 \001(\0132\034.edu.vanderbilt.isis.meta.ID\"\326\003\n\020"
    "CADComponentType\022@\n\014CADComponent\030\001 \003(\0132*"
    ".edu.vanderbilt.isis.meta.CADComponentTy"
    "pe\022<\n\nConstraint\030\002 \003(\0132(.edu.vanderbilt."
    "isis.meta.ConstraintType\022P\n\024KinematicCon"
    "nections\030\003 \001(\01322.edu.vanderbilt.isis.met"
    "a.KinematicConnectionsType\022P\n\024Parametric"
    "Parameters\030\004 \001(\01322.edu.vanderbilt.isis.m"
    "eta.ParametricParametersType\022\023\n\013Componen"
    "tID\030\005 \002(\t\022\022\n\nMaterialID\030\006 \001(\t\022\014\n\004Name\030\007 "
    "\001(\t\022\032\n\022SpecialInstruction\030\010 \001(\t\022\022\n\nStand"
    "alone\030\t \001(\010\022\014\n\004Type\030\n \001(\t\022)\n\003_id\030\013 \001(\0132\034"
    ".edu.vanderbilt.isis.meta.ID\"\234\001\n\020CADPara"
    "meterType\0222\n\005Units\030\001 \001(\0132#.edu.vanderbil"
    "t.isis.meta.UnitsType\022\014\n\004Name\030\002 \002(\t\022\014\n\004T"
    "ype\030\003 \002(\t\022\r\n\005Value\030\004 \002(\t\022)\n\003_id\030\005 \001(\0132\034."
    "edu.vanderbilt.isis.meta.ID\"\203\001\n\023CenterOf"
    "GravityType\022\023\n\013ComponentID\030\001 \002(\t\022\020\n\010Metr"
    "icID\030\002 \002(\t\022\032\n\022RequestedValueType\030\003 \002(\t\022)"
    "\n\003_id\030\004 \001(\0132\034.edu.vanderbilt.isis.meta.I"
    "D\"\236\001\n\rComponentType\0226\n\007Metrics\030\001 \001(\0132%.e"
    "du.vanderbilt.isis.meta.MetricsType\022\023\n\013C"
    "omponentID\030\002 \002(\t\022\025\n\rInfiniteCycle\030\003 \002(\010\022"
    ")\n\003_id\030\004 \001(\0132\034.edu.vanderbilt.isis.meta."
    "ID\"\301\002\n\020ComputationsType\022>\n\013BoundingBox\030\001"
    " \003(\0132).edu.vanderbilt.isis.meta.Bounding"
    "BoxType\022F\n\017CenterOfGravity\030\002 \003(\0132-.edu.v"
    "anderbilt.isis.meta.CenterOfGravityType\022"
    "0\n\004Mass\030\003 \003(\0132\".edu.vanderbilt.isis.meta"
    ".MassType\022H\n\020PointCoordinates\030\004 \003(\0132..ed"
    "u.vanderbilt.isis.meta.PointCoordinatesT"
    "ype\022)\n\003_id\030\005 \001(\0132\034.edu.vanderbilt.isis.m"
    "eta.ID\"f\n\rConditionType\022\014\n\004Name\030\001 \002(\t\022\r\n"
    "\005Units\030\002 \002(\t\022\r\n\005Value\030\003 \002(\001\022)\n\003_id\030\004 \001(\013"
    "2\034.edu.vanderbilt.isis.meta.ID\"w\n\016Condit"
    "ionsType\022:\n\tCondition\030\001 \003(\0132\'.edu.vander"
    "bilt.isis.meta.ConditionType\022)\n\003_id\030\002 \001("
    "\0132\034.edu.vanderbilt.isis.meta.ID\"\214\001\n\025Cons"
    "traintFeatureType\022\023\n\013ComponentID\030\001 \002(\t\022\023"
    "\n\013FeatureName\030\002 \002(\t\022\036\n\026FeatureOrientatio"
    "nType\030\003 \002(\t\022)\n\003_id\030\004 \001(\0132\034.edu.vanderbil"
    "t.isis.meta.ID\"\241\001\n\024ConstraintOffsetType\022"
    "2\n\005Units\030\001 \001(\0132#.edu.vanderbilt.isis.met"
    "a.UnitsType\022\033\n\023OffsetAlignmentType\030\002 \002(\t"
    "\022\r\n\005Value\030\003 \002(\001\022)\n\003_id\030\004 \001(\0132\034.edu.vande"
    "rbilt.isis.meta.ID\"m\n\016ConstraintType\0220\n\004"
    "Pair\030\001 \003(\0132\".edu.vanderbilt.isis.meta.Pa"
    "irType\022)\n\003_id\030\002 \001(\0132\034.edu.vanderbilt.isi"
    "s.meta.ID\"{\n\020DataExchangeType\022<\n\nSTEPFor"
    "mat\030\001 \003(\0132(.edu.vanderbilt.isis.meta.STE"
    "PFormatType\022)\n\003_id\030\002 \001(\0132\034.edu.vanderbil"
    "t.isis.meta.ID\"\267\001\n\020DisplacementType\0228\n\010R"
    "otation\030\001 \002(\0132&.edu.vanderbilt.isis.meta"
    ".RotationType\022>\n\013Translation\030\002 \002(\0132).edu"
    ".vanderbilt.isis.meta.TranslationType\022)\n"
    "\003_id\030\003 \001(\0132\034.edu.vanderbilt.isis.meta.ID"
    "\"\260\004\n\007FEAType\022L\n\022AnalysisComponents\030\001 \001(\013"
    "20.edu.vanderbilt.isis.meta.AnalysisComp"
    "onentsType\022N\n\023AnalysisConstraints\030\002 \001(\0132"
    "1.edu.vanderbilt.isis.meta.AnalysisConst"
    "raintsType\022<\n\nConditions\030\003 \001(\0132(.edu.van"
    "derbilt.isis.meta.ConditionsType\0222\n\005Load"
    "s\030\004 \001(\0132#.edu.vanderbilt.isis.meta.Loads"
    "Type\022D\n\016PartInterfaces\030\005 \001(\0132,.edu.vande"
    "rbilt.isis.meta.PartInterfacesType\0226\n\007So"
    "lvers\030\006 \002(\0132%.edu.vanderbilt.isis.meta.S"
    "olversType\022J\n\021SurfaceTreatments\030\007 \003(\0132/."
    "edu.vanderbilt.isis.meta.SurfaceTreatmen"
    "tsType\022\022\n\nAnalysisID\030\010 \002(\t\022\014\n\004Type\030\t \002(\t"
    "\022)\n\003_id\030\n \001(\0132\034.edu.vanderbilt.isis.meta"
    ".ID\"[\n\013FeatureType\022\023\n\013ComponentID\030\001 \002(\t\022"
    "\014\n\004Name\030\002 \002(\t\022)\n\003_id\030\003 \001(\0132\034.edu.vanderb"
    "ilt.isis.meta.ID\"\233\002\n\014FeaturesType\0226\n\007Fea"
    "ture\030\001 \003(\0132%.edu.vanderbilt.isis.meta.Fe"
    "atureType\022\033\n\023FeatureGeometryType\030\002 \002(\t\022\021"
    "\n\tFeatureID\030\003 \002(\t\022\034\n\024FeatureInterfaceTyp"
    "e\030\004 \002(\t\022\024\n\014GeometryType\030\005 \002(\t\022 \n\030Primary"
    "GeometryQualifier\030\006 \002(\t\022\"\n\032SecondaryGeom"
    "etryQualifier\030\007 \002(\t\022)\n\003_id\030\010 \001(\0132\034.edu.v"
    "anderbilt.isis.meta.ID\"\354\001\n\tFixedType\022H\n\020"
    "KinematicFeature\030\001 \003(\0132..edu.vanderbilt."
    "isis.meta.KinematicFeatureType\022\013\n\003CFM\030\002 "
    "\002(\001\022\034\n\024ConnectedComponentID\030\003 \002(\t\022\024\n\014Con"
    "nectionID\030\004 \002(\t\022\013\n\003ERP\030\005 \002(\001\022\034\n\024FeatureI"
    "nterfaceType\030\006 \002(\t\022)\n\003_id\030\007 \001(\0132\034.edu.va"
    "nderbilt.isis.meta.ID\"\246\001\n\017ForceMomentTyp"
    "e\0222\n\005Force\030\001 \002(\0132#.edu.vanderbilt.isis.m"
    "eta.ForceType\0224\n\006Moment\030\002 \002(\0132$.edu.vand"
    "erbilt.isis.meta.MomentType\022)\n\003_id\030\003 \001(\013"
    "2\034.edu.vanderbilt.isis.meta.ID\"f\n\tForceT"
    "ype\022\r\n\005Units\030\001 \002(\t\022)\n\003_id\030\002 \001(\0132\034.edu.va"
    "nderbilt.isis.meta.ID\022\t\n\001x\030\003 \002(\001\022\t\n\001y\030\004 "
    "\002(\001\022\t\n\001z\030\005 \002(\001\"\265\001\n\014GeometryType\0228\n\010Featu"
    "res\030\001 \003(\0132&.edu.vanderbilt.isis.meta.Fea"
    "turesType\022@\n\014SetOperation\030\002 \003(\0132*.edu.va"
    "nderbilt.isis.meta.SetOperationType\022)\n\003_"
    "id\030\003 \001(\0132\034.edu.vanderbilt.isis.meta.ID\"Q"
    "\n\020InterferenceType\022\022\n\nAnalysisID\030\001 \002(\t\022)"
    "\n\003_id\030\002 \001(\0132\034.edu.vanderbilt.isis.meta.I"
    "D\"\253\002\n\030KinematicConnectionsType\0222\n\005Fixed\030"
    "\001 \003(\0132#.edu.vanderbilt.isis.meta.FixedTy"
    "pe\022:\n\tPrismatic\030\002 \003(\0132\'.edu.vanderbilt.i"
    "sis.meta.PrismaticType\0228\n\010Revolute\030\003 \003(\013"
    "2&.edu.vanderbilt.isis.meta.RevoluteType"
    "\022:\n\tSpherical\030\004 \003(\0132\'.edu.vanderbilt.isi"
    "s.meta.SphericalType\022)\n\003_id\030\005 \001(\0132\034.edu."
    "vanderbilt.isis.meta.ID\"\206\001\n\024KinematicFea"
    "tureType\022\023\n\013ComponentID\030\001 \002(\t\022\021\n\tDatumNa"
    "me\030\002 \002(\t\022\033\n\023FeatureGeometryType\030\003 \002(\t\022)\n"
    "\003_id\030\004 \001(\0132\034.edu.vanderbilt.isis.meta.ID"
    "\"\253\002\n\010LoadType\022@\n\014Acceleration\030\001 \001(\0132*.ed"
    "u.vanderbilt.isis.meta.AccelerationType\022"
    ">\n\013ForceMoment\030\002 \001(\0132).edu.vanderbilt.is"
    "is.meta.ForceMomentType\0228\n\010Geometry\030\003 \001("
    "\0132&.edu.vanderbilt.isis.meta.GeometryTyp"
    "e\0228\n\010Pressure\030\004 \001(\0132&.edu.vanderbilt.isi"
    "s.meta.PressureType\022)\n\003_id\030\005 \001(\0132\034.edu.v"
    "anderbilt.isis.meta.ID\"h\n\tLoadsType\0220\n\004L"
    "oad\030\001 \003(\0132\".edu.vanderbilt.isis.meta.Loa"
    "dType\022)\n\003_id\030\002 \001(\0132\034.edu.vanderbilt.isis"
    ".meta.ID\"x\n\010MassType\022\023\n\013ComponentID\030\001 \002("
    "\t\022\020\n\010MetricID\030\002 \002(\t\022\032\n\022RequestedValueTyp"
    "e\030\003 \002(\t\022)\n\003_id\030\004 \001(\0132\034.edu.vanderbilt.is"
    "is.meta.ID\"u\n\024MaterialPropertyType\022\024\n\014Pr"
    "opertyName\030\001 \002(\t\022\r\n\005Units\030\002 \002(\t\022\r\n\005Value"
    "\030\003 \002(\001\022)\n\003_id\030\004 \001(\0132\034.edu.vanderbilt.isi"
    "s.meta.ID\"\273\001\n\014MaterialType\022H\n\020MaterialPr"
    "operty\030\001 \003(\0132..edu.vanderbilt.isis.meta."
    "MaterialPropertyType\022\022\n\nMaterialID\030\002 \002(\t"
    "\022\024\n\014MaterialName\030\003 \002(\t\022\014\n\004Type\030\004 \002(\t\022)\n\003"
    "_id\030\005 \001(\0132\034.edu.vanderbilt.isis.meta.ID\""
    "t\n\rMaterialsType\0228\n\010Material\030\001 \003(\0132&.edu"
    ".vanderbilt.isis.meta.MaterialType\022)\n\003_i"
    "d\030\002 \001(\0132\034.edu.vanderbilt.isis.meta.ID\"Q\n"
    "\nMetricType\022\n\n\002ID\030\001 \002(\t\022\014\n\004Type\030\002 \002(\t\022)\n"
    "\003_id\030\003 \001(\0132\034.edu.vanderbilt.isis.meta.ID"
    "\"n\n\013MetricsType\0224\n\006Metric\030\001 \003(\0132$.edu.va"
    "nderbilt.isis.meta.MetricType\022)\n\003_id\030\002 \001"
    "(\0132\034.edu.vanderbilt.isis.meta.ID\"g\n\nMome"
    "ntType\022\r\n\005Units\030\001 \002(\t\022)\n\003_id\030\002 \001(\0132\034.edu"
    ".vanderbilt.isis.meta.ID\022\t\n\001x\030\003 \002(\001\022\t\n\001y"
    "\030\004 \002(\001\022\t\n\001z\030\005 \002(\001\"\362\002\n\010PairType\022K\n\022Constr"
    "aintFeatureA\030\001 \002(\0132/.edu.vanderbilt.isis"
    ".meta.ConstraintFeatureType\022K\n\022Constrain"
    "tFeatureB\030\002 \002(\0132/.edu.vanderbilt.isis.me"
    "ta.ConstraintFeatureType\022H\n\020ConstraintOf"
    "fset\030\003 \001(\0132..edu.vanderbilt.isis.meta.Co"
    "nstraintOffsetType\022\034\n\024FeatureAlignmentTy"
    "pe\030\004 \002(\t\022\033\n\023FeatureGeometryType\030\005 \002(\t\022\034\n"
    "\024FeatureInterfaceType\030\006 \002(\t\022)\n\003_id\030\007 \001(\013"
    "2\034.edu.vanderbilt.isis.meta.ID\"\207\001\n\030Param"
    "etricParametersType\022@\n\014CADParameter\030\001 \003("
    "\0132*.edu.vanderbilt.isis.meta.CADParamete"
    "rType\022)\n\003_id\030\002 \001(\0132\034.edu.vanderbilt.isis"
    ".meta.ID\"z\n\021PartInterfaceType\022\025\n\rCompone"
    "ntID_1\030\001 \002(\t\022\025\n\rComponentID_2\030\002 \002(\t\022\014\n\004T"
    "ype\030\003 \002(\t\022)\n\003_id\030\004 \001(\0132\034.edu.vanderbilt."
    "isis.meta.ID\"\203\001\n\022PartInterfacesType\022B\n\rP"
    "artInterface\030\001 \003(\0132+.edu.vanderbilt.isis"
    ".meta.PartInterfaceType\022)\n\003_id\030\002 \001(\0132\034.e"
    "du.vanderbilt.isis.meta.ID\"\304\001\n\007PinType\022J"
    "\n\021AxialDisplacement\030\001 \002(\0132/.edu.vanderbi"
    "lt.isis.meta.AxialDisplacementType\022B\n\rAx"
    "ialRotation\030\002 \002(\0132+.edu.vanderbilt.isis."
    "meta.AxialRotationType\022)\n\003_id\030\003 \001(\0132\034.ed"
    "u.vanderbilt.isis.meta.ID\"\236\001\n\024PointCoord"
    "inatesType\022\023\n\013ComponentID\030\001 \002(\t\022\030\n\020Featu"
    "reDatumName\030\002 \002(\t\022\020\n\010MetricID\030\003 \002(\t\022\032\n\022R"
    "equestedValueType\030\004 \002(\t\022)\n\003_id\030\005 \001(\0132\034.e"
    "du.vanderbilt.isis.meta.ID\"W\n\014PressureTy"
    "pe\022\r\n\005Units\030\001 \002(\t\022\r\n\005Value\030\002 \002(\001\022)\n\003_id\030"
    "\003 \001(\0132\034.edu.vanderbilt.isis.meta.ID\"\360\001\n\r"
    "PrismaticType\022H\n\020KinematicFeature\030\001 \003(\0132"
    "..edu.vanderbilt.isis.meta.KinematicFeat"
    "ureType\022\013\n\003CFM\030\002 \002(\001\022\034\n\024ConnectedCompone"
    "ntID\030\003 \002(\t\022\024\n\014ConnectionID\030\004 \002(\t\022\013\n\003ERP\030"
    "\005 \002(\001\022\034\n\024FeatureInterfaceType\030\006 \002(\t\022)\n\003_"
    "id\030\007 \001(\0132\034.edu.vanderbilt.isis.meta.ID\"o"
    "\n\016PropertiesType\0222\n\005Units\030\001 \001(\0132#.edu.va"
    "nderbilt.isis.meta.UnitsType\022)\n\003_id\030\002 \001("
    "\0132\034.edu.vanderbilt.isis.meta.ID\"M\n\022Refer"
    "encePlaneType\022\014\n\004Type\030\001 \002(\t\022)\n\003_id\030\002 \001(\013"
    "2\034.edu.vanderbilt.isis.meta.ID\"\357\001\n\014Revol"
    "uteType\022H\n\020KinematicFeature\030\001 \003(\0132..edu."
    "vanderbilt.isis.meta.KinematicFeatureTyp"
    "e\022\013\n\003CFM\030\002 \002(\001\022\034\n\024ConnectedComponentID\030\003"
    " \002(\t\022\024\n\014ConnectionID\030\004 \002(\t\022\013\n\003ERP\030\005 \002(\001\022"
    "\034\n\024FeatureInterfaceType\030\006 \002(\t\022)\n\003_id\030\007 \001"
    "(\0132\034.edu.vanderbilt.isis.meta.ID\"i\n\014Rota"
    "tionType\022\r\n\005Units\030\001 \002(\t\022)\n\003_id\030\002 \001(\0132\034.e"
    "du.vanderbilt.isis.meta.ID\022\t\n\001x\030\003 \002(\t\022\t\n"
    "\001y\030\004 \002(\t\022\t\n\001z\030\005 \002(\t\"I\n\016STEPFormatType\022\014\n"
    "\004Name\030\001 \002(\t\022)\n\003_id\030\002 \001(\0132\034.edu.vanderbil"
    "t.isis.meta.ID\"^\n\020SetOperationType\022\021\n\tFe"
    "atureID\030\001 \002(\t\022\014\n\004Type\030\002 \002(\t\022)\n\003_id\030\003 \001(\013"
    "2\034.edu.vanderbilt.isis.meta.ID\"\242\001\n\014Shotl"
    "ineType\022\017\n\007Azimuth\030\001 \002(\001\022\032\n\022BallisticThr"
    "eatRef\030\002 \002(\t\022\023\n\013ComponentID\030\003 \002(\t\022\022\n\nDat"
    "umPoint\030\004 \002(\t\022\021\n\tElevation\030\005 \002(\001\022)\n\003_id\030"
    "\006 \001(\0132\034.edu.vanderbilt.isis.meta.ID\"t\n\rS"
    "hotlinesType\0228\n\010Shotline\030\001 \003(\0132&.edu.van"
    "derbilt.isis.meta.ShotlineType\022)\n\003_id\030\002 "
    "\001(\0132\034.edu.vanderbilt.isis.meta.ID\"\213\001\n\nSo"
    "lverType\022\030\n\020ElementShapeType\030\001 \002(\t\022\020\n\010Me"
    "shType\030\002 \002(\t\022\030\n\020ShellElementType\030\003 \002(\t\022\014"
    "\n\004Type\030\004 \002(\t\022)\n\003_id\030\005 \001(\0132\034.edu.vanderbi"
    "lt.isis.meta.ID\"n\n\013SolversType\0224\n\006Solver"
    "\030\001 \003(\0132$.edu.vanderbilt.isis.meta.Solver"
    "Type\022)\n\003_id\030\002 \001(\0132\034.edu.vanderbilt.isis."
    "meta.ID\"\360\001\n\rSphericalType\022H\n\020KinematicFe"
    "ature\030\001 \003(\0132..edu.vanderbilt.isis.meta.K"
    "inematicFeatureType\022\013\n\003CFM\030\002 \002(\001\022\034\n\024Conn"
    "ectedComponentID\030\003 \002(\t\022\024\n\014ConnectionID\030\004"
    " \002(\t\022\013\n\003ERP\030\005 \002(\001\022\034\n\024FeatureInterfaceTyp"
    "e\030\006 \002(\t\022)\n\003_id\030\007 \001(\0132\034.edu.vanderbilt.is"
    "is.meta.ID\"\223\001\n\024SurfaceTreatmentType\0228\n\010G"
    "eometry\030\001 \001(\0132&.edu.vanderbilt.isis.meta"
    ".GeometryType\022\026\n\016AdjoiningParts\030\002 \001(\t\022)\n"
    "\003_id\030\003 \001(\0132\034.edu.vanderbilt.isis.meta.ID"
    "\"\214\001\n\025SurfaceTreatmentsType\022H\n\020SurfaceTre"
    "atment\030\001 \003(\0132..edu.vanderbilt.isis.meta."
    "SurfaceTreatmentType\022)\n\003_id\030\002 \001(\0132\034.edu."
    "vanderbilt.isis.meta.ID\"N\n\rToleranceType"
    "\022\022\n\nAnalysisID\030\001 \002(\t\022)\n\003_id\030\002 \001(\0132\034.edu."
    "vanderbilt.isis.meta.ID\"l\n\017TranslationTy"
    "pe\022\r\n\005Units\030\001 \002(\t\022)\n\003_id\030\002 \001(\0132\034.edu.van"
    "derbilt.isis.meta.ID\022\t\n\001x\030\003 \002(\t\022\t\n\001y\030\004 \002"
    "(\t\022\t\n\001z\030\005 \002(\t\"\210\001\n\031UnassembledComponentsT"
    "ype\022@\n\014CADComponent\030\001 \003(\0132*.edu.vanderbi"
    "lt.isis.meta.CADComponentType\022)\n\003_id\030\002 \001"
    "(\0132\034.edu.vanderbilt.isis.meta.ID\"E\n\tUnit"
    "sType\022\r\n\005Value\030\001 \002(\t\022)\n\003_id\030\002 \001(\0132\034.edu."
    "vanderbilt.isis.meta.ID", 11623);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "AssemblyInterface.proto", &protobuf_RegisterTypes);
  AccelerationType::default_instance_ = new AccelerationType();
  AnalysesType::default_instance_ = new AnalysesType();
  AnalysisComponentsType::default_instance_ = new AnalysisComponentsType();
  AnalysisConstraintType::default_instance_ = new AnalysisConstraintType();
  AnalysisConstraintsType::default_instance_ = new AnalysisConstraintsType();
  AssembliesType::default_instance_ = new AssembliesType();
  AssemblyType::default_instance_ = new AssemblyType();
  AxialDisplacementType::default_instance_ = new AxialDisplacementType();
  AxialRotationType::default_instance_ = new AxialRotationType();
  BallType::default_instance_ = new BallType();
  BallisticType::default_instance_ = new BallisticType();
  BoundingBoxType::default_instance_ = new BoundingBoxType();
  CADComponentType::default_instance_ = new CADComponentType();
  CADParameterType::default_instance_ = new CADParameterType();
  CenterOfGravityType::default_instance_ = new CenterOfGravityType();
  ComponentType::default_instance_ = new ComponentType();
  ComputationsType::default_instance_ = new ComputationsType();
  ConditionType::default_instance_ = new ConditionType();
  ConditionsType::default_instance_ = new ConditionsType();
  ConstraintFeatureType::default_instance_ = new ConstraintFeatureType();
  ConstraintOffsetType::default_instance_ = new ConstraintOffsetType();
  ConstraintType::default_instance_ = new ConstraintType();
  DataExchangeType::default_instance_ = new DataExchangeType();
  DisplacementType::default_instance_ = new DisplacementType();
  FEAType::default_instance_ = new FEAType();
  FeatureType::default_instance_ = new FeatureType();
  FeaturesType::default_instance_ = new FeaturesType();
  FixedType::default_instance_ = new FixedType();
  ForceMomentType::default_instance_ = new ForceMomentType();
  ForceType::default_instance_ = new ForceType();
  GeometryType::default_instance_ = new GeometryType();
  InterferenceType::default_instance_ = new InterferenceType();
  KinematicConnectionsType::default_instance_ = new KinematicConnectionsType();
  KinematicFeatureType::default_instance_ = new KinematicFeatureType();
  LoadType::default_instance_ = new LoadType();
  LoadsType::default_instance_ = new LoadsType();
  MassType::default_instance_ = new MassType();
  MaterialPropertyType::default_instance_ = new MaterialPropertyType();
  MaterialType::default_instance_ = new MaterialType();
  MaterialsType::default_instance_ = new MaterialsType();
  MetricType::default_instance_ = new MetricType();
  MetricsType::default_instance_ = new MetricsType();
  MomentType::default_instance_ = new MomentType();
  PairType::default_instance_ = new PairType();
  ParametricParametersType::default_instance_ = new ParametricParametersType();
  PartInterfaceType::default_instance_ = new PartInterfaceType();
  PartInterfacesType::default_instance_ = new PartInterfacesType();
  PinType::default_instance_ = new PinType();
  PointCoordinatesType::default_instance_ = new PointCoordinatesType();
  PressureType::default_instance_ = new PressureType();
  PrismaticType::default_instance_ = new PrismaticType();
  PropertiesType::default_instance_ = new PropertiesType();
  ReferencePlaneType::default_instance_ = new ReferencePlaneType();
  RevoluteType::default_instance_ = new RevoluteType();
  RotationType::default_instance_ = new RotationType();
  STEPFormatType::default_instance_ = new STEPFormatType();
  SetOperationType::default_instance_ = new SetOperationType();
  ShotlineType::default_instance_ = new ShotlineType();
  ShotlinesType::default_instance_ = new ShotlinesType();
  SolverType::default_instance_ = new SolverType();
  SolversType::default_instance_ = new SolversType();
  SphericalType::default_instance_ = new SphericalType();
  SurfaceTreatmentType::default_instance_ = new SurfaceTreatmentType();
  SurfaceTreatmentsType::default_instance_ = new SurfaceTreatmentsType();
  ToleranceType::default_instance_ = new ToleranceType();
  TranslationType::default_instance_ = new TranslationType();
  UnassembledComponentsType::default_instance_ = new UnassembledComponentsType();
  UnitsType::default_instance_ = new UnitsType();
  AccelerationType::default_instance_->InitAsDefaultInstance();
  AnalysesType::default_instance_->InitAsDefaultInstance();
  AnalysisComponentsType::default_instance_->InitAsDefaultInstance();
  AnalysisConstraintType::default_instance_->InitAsDefaultInstance();
  AnalysisConstraintsType::default_instance_->InitAsDefaultInstance();
  AssembliesType::default_instance_->InitAsDefaultInstance();
  AssemblyType::default_instance_->InitAsDefaultInstance();
  AxialDisplacementType::default_instance_->InitAsDefaultInstance();
  AxialRotationType::default_instance_->InitAsDefaultInstance();
  BallType::default_instance_->InitAsDefaultInstance();
  BallisticType::default_instance_->InitAsDefaultInstance();
  BoundingBoxType::default_instance_->InitAsDefaultInstance();
  CADComponentType::default_instance_->InitAsDefaultInstance();
  CADParameterType::default_instance_->InitAsDefaultInstance();
  CenterOfGravityType::default_instance_->InitAsDefaultInstance();
  ComponentType::default_instance_->InitAsDefaultInstance();
  ComputationsType::default_instance_->InitAsDefaultInstance();
  ConditionType::default_instance_->InitAsDefaultInstance();
  ConditionsType::default_instance_->InitAsDefaultInstance();
  ConstraintFeatureType::default_instance_->InitAsDefaultInstance();
  ConstraintOffsetType::default_instance_->InitAsDefaultInstance();
  ConstraintType::default_instance_->InitAsDefaultInstance();
  DataExchangeType::default_instance_->InitAsDefaultInstance();
  DisplacementType::default_instance_->InitAsDefaultInstance();
  FEAType::default_instance_->InitAsDefaultInstance();
  FeatureType::default_instance_->InitAsDefaultInstance();
  FeaturesType::default_instance_->InitAsDefaultInstance();
  FixedType::default_instance_->InitAsDefaultInstance();
  ForceMomentType::default_instance_->InitAsDefaultInstance();
  ForceType::default_instance_->InitAsDefaultInstance();
  GeometryType::default_instance_->InitAsDefaultInstance();
  InterferenceType::default_instance_->InitAsDefaultInstance();
  KinematicConnectionsType::default_instance_->InitAsDefaultInstance();
  KinematicFeatureType::default_instance_->InitAsDefaultInstance();
  LoadType::default_instance_->InitAsDefaultInstance();
  LoadsType::default_instance_->InitAsDefaultInstance();
  MassType::default_instance_->InitAsDefaultInstance();
  MaterialPropertyType::default_instance_->InitAsDefaultInstance();
  MaterialType::default_instance_->InitAsDefaultInstance();
  MaterialsType::default_instance_->InitAsDefaultInstance();
  MetricType::default_instance_->InitAsDefaultInstance();
  MetricsType::default_instance_->InitAsDefaultInstance();
  MomentType::default_instance_->InitAsDefaultInstance();
  PairType::default_instance_->InitAsDefaultInstance();
  ParametricParametersType::default_instance_->InitAsDefaultInstance();
  PartInterfaceType::default_instance_->InitAsDefaultInstance();
  PartInterfacesType::default_instance_->InitAsDefaultInstance();
  PinType::default_instance_->InitAsDefaultInstance();
  PointCoordinatesType::default_instance_->InitAsDefaultInstance();
  PressureType::default_instance_->InitAsDefaultInstance();
  PrismaticType::default_instance_->InitAsDefaultInstance();
  PropertiesType::default_instance_->InitAsDefaultInstance();
  ReferencePlaneType::default_instance_->InitAsDefaultInstance();
  RevoluteType::default_instance_->InitAsDefaultInstance();
  RotationType::default_instance_->InitAsDefaultInstance();
  STEPFormatType::default_instance_->InitAsDefaultInstance();
  SetOperationType::default_instance_->InitAsDefaultInstance();
  ShotlineType::default_instance_->InitAsDefaultInstance();
  ShotlinesType::default_instance_->InitAsDefaultInstance();
  SolverType::default_instance_->InitAsDefaultInstance();
  SolversType::default_instance_->InitAsDefaultInstance();
  SphericalType::default_instance_->InitAsDefaultInstance();
  SurfaceTreatmentType::default_instance_->InitAsDefaultInstance();
  SurfaceTreatmentsType::default_instance_->InitAsDefaultInstance();
  ToleranceType::default_instance_->InitAsDefaultInstance();
  TranslationType::default_instance_->InitAsDefaultInstance();
  UnassembledComponentsType::default_instance_->InitAsDefaultInstance();
  UnitsType::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_AssemblyInterface_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_AssemblyInterface_2eproto {
  StaticDescriptorInitializer_AssemblyInterface_2eproto() {
    protobuf_AddDesc_AssemblyInterface_2eproto();
  }
} static_descriptor_initializer_AssemblyInterface_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int AccelerationType::kUnitsFieldNumber;
const int AccelerationType::kIdFieldNumber;
const int AccelerationType::kXFieldNumber;
const int AccelerationType::kYFieldNumber;
const int AccelerationType::kZFieldNumber;
#endif  // !_MSC_VER

AccelerationType::AccelerationType()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AccelerationType::InitAsDefaultInstance() {
  _id_ = const_cast< ::edu::vanderbilt::isis::meta::ID*>(&::edu::vanderbilt::isis::meta::ID::default_instance());
}

AccelerationType::AccelerationType(const AccelerationType& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AccelerationType::SharedCtor() {
  _cached_size_ = 0;
  units_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  _id_ = NULL;
  x_ = 0;
  y_ = 0;
  z_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AccelerationType::~AccelerationType() {
  SharedDtor();
}

void AccelerationType::SharedDtor() {
  if (units_ != &::google::protobuf::internal::kEmptyString) {
    delete units_;
  }
  if (this != default_instance_) {
    delete _id_;
  }
}

void AccelerationType::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AccelerationType::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AccelerationType_descriptor_;
}

const AccelerationType& AccelerationType::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AssemblyInterface_2eproto();
  return *default_instance_;
}

AccelerationType* AccelerationType::default_instance_ = NULL;

AccelerationType* AccelerationType::New() const {
  return new AccelerationType;
}

void AccelerationType::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_units()) {
      if (units_ != &::google::protobuf::internal::kEmptyString) {
        units_->clear();
      }
    }
    if (has__id()) {
      if (_id_ != NULL) _id_->::edu::vanderbilt::isis::meta::ID::Clear();
    }
    x_ = 0;
    y_ = 0;
    z_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AccelerationType::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string Units = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_units()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->units().data(), this->units().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse__id;
        break;
      }

      // optional .edu.vanderbilt.isis.meta.ID _id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse__id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_x;
        break;
      }

      // required double x = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_y;
        break;
      }

      // required double y = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(41)) goto parse_z;
        break;
      }

      // required double z = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_z:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &z_)));
          set_has_z();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AccelerationType::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string Units = 1;
  if (has_units()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->units().data(), this->units().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->units(), output);
  }

  // optional .edu.vanderbilt.isis.meta.ID _id = 2;
  if (has__id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_id(), output);
  }

  // required double x = 3;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->x(), output);
  }

  // required double y = 4;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->y(), output);
  }

  // required double z = 5;
  if (has_z()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->z(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AccelerationType::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string Units = 1;
  if (has_units()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->units().data(), this->units().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->units(), target);
  }

  // optional .edu.vanderbilt.isis.meta.ID _id = 2;
  if (has__id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->_id(), target);
  }

  // required double x = 3;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->x(), target);
  }

  // required double y = 4;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->y(), target);
  }

  // required double z = 5;
  if (has_z()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->z(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AccelerationType::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string Units = 1;
    if (has_units()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->units());
    }

    // optional .edu.vanderbilt.isis.meta.ID _id = 2;
    if (has__id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_id());
    }

    // required double x = 3;
    if (has_x()) {
      total_size += 1 + 8;
    }

    // required double y = 4;
    if (has_y()) {
      total_size += 1 + 8;
    }

    // required double z = 5;
    if (has_z()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AccelerationType::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AccelerationType* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AccelerationType*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AccelerationType::MergeFrom(const AccelerationType& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_units()) {
      set_units(from.units());
    }
    if (from.has__id()) {
      mutable__id()->::edu::vanderbilt::isis::meta::ID::MergeFrom(from._id());
    }
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
    if (from.has_z()) {
      set_z(from.z());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AccelerationType::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AccelerationType::CopyFrom(const AccelerationType& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AccelerationType::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001d) != 0x0000001d) return false;

  if (has__id()) {
    if (!this->_id().IsInitialized()) return false;
  }
  return true;
}

void AccelerationType::Swap(AccelerationType* other) {
  if (other != this) {
    std::swap(units_, other->units_);
    std::swap(_id_, other->_id_);
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(z_, other->z_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AccelerationType::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AccelerationType_descriptor_;
  metadata.reflection = AccelerationType_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AnalysesType::kBallisticFieldNumber;
const int AnalysesType::kFEAFieldNumber;
const int AnalysesType::kInterferenceFieldNumber;
const int AnalysesType::kToleranceFieldNumber;
const int AnalysesType::kIdFieldNumber;
#endif  // !_MSC_VER

AnalysesType::AnalysesType()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AnalysesType::InitAsDefaultInstance() {
  _id_ = const_cast< ::edu::vanderbilt::isis::meta::ID*>(&::edu::vanderbilt::isis::meta::ID::default_instance());
}

AnalysesType::AnalysesType(const AnalysesType& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AnalysesType::SharedCtor() {
  _cached_size_ = 0;
  _id_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AnalysesType::~AnalysesType() {
  SharedDtor();
}

void AnalysesType::SharedDtor() {
  if (this != default_instance_) {
    delete _id_;
  }
}

void AnalysesType::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AnalysesType::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AnalysesType_descriptor_;
}

const AnalysesType& AnalysesType::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AssemblyInterface_2eproto();
  return *default_instance_;
}

AnalysesType* AnalysesType::default_instance_ = NULL;

AnalysesType* AnalysesType::New() const {
  return new AnalysesType;
}

void AnalysesType::Clear() {
  if (_has_bits_[4 / 32] & (0xffu << (4 % 32))) {
    if (has__id()) {
      if (_id_ != NULL) _id_->::edu::vanderbilt::isis::meta::ID::Clear();
    }
  }
  ballistic_.Clear();
  fea_.Clear();
  interference_.Clear();
  tolerance_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AnalysesType::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .edu.vanderbilt.isis.meta.BallisticType Ballistic = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Ballistic:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_ballistic()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_Ballistic;
        if (input->ExpectTag(18)) goto parse_FEA;
        break;
      }

      // repeated .edu.vanderbilt.isis.meta.FEAType FEA = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_FEA:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_fea()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_FEA;
        if (input->ExpectTag(26)) goto parse_Interference;
        break;
      }

      // repeated .edu.vanderbilt.isis.meta.InterferenceType Interference = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Interference:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_interference()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_Interference;
        if (input->ExpectTag(34)) goto parse_Tolerance;
        break;
      }

      // repeated .edu.vanderbilt.isis.meta.ToleranceType Tolerance = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Tolerance:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_tolerance()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_Tolerance;
        if (input->ExpectTag(42)) goto parse__id;
        break;
      }

      // optional .edu.vanderbilt.isis.meta.ID _id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse__id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AnalysesType::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .edu.vanderbilt.isis.meta.BallisticType Ballistic = 1;
  for (int i = 0; i < this->ballistic_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->ballistic(i), output);
  }

  // repeated .edu.vanderbilt.isis.meta.FEAType FEA = 2;
  for (int i = 0; i < this->fea_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->fea(i), output);
  }

  // repeated .edu.vanderbilt.isis.meta.InterferenceType Interference = 3;
  for (int i = 0; i < this->interference_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->interference(i), output);
  }

  // repeated .edu.vanderbilt.isis.meta.ToleranceType Tolerance = 4;
  for (int i = 0; i < this->tolerance_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->tolerance(i), output);
  }

  // optional .edu.vanderbilt.isis.meta.ID _id = 5;
  if (has__id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AnalysesType::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .edu.vanderbilt.isis.meta.BallisticType Ballistic = 1;
  for (int i = 0; i < this->ballistic_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->ballistic(i), target);
  }

  // repeated .edu.vanderbilt.isis.meta.FEAType FEA = 2;
  for (int i = 0; i < this->fea_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->fea(i), target);
  }

  // repeated .edu.vanderbilt.isis.meta.InterferenceType Interference = 3;
  for (int i = 0; i < this->interference_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->interference(i), target);
  }

  // repeated .edu.vanderbilt.isis.meta.ToleranceType Tolerance = 4;
  for (int i = 0; i < this->tolerance_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->tolerance(i), target);
  }

  // optional .edu.vanderbilt.isis.meta.ID _id = 5;
  if (has__id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AnalysesType::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[4 / 32] & (0xffu << (4 % 32))) {
    // optional .edu.vanderbilt.isis.meta.ID _id = 5;
    if (has__id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_id());
    }

  }
  // repeated .edu.vanderbilt.isis.meta.BallisticType Ballistic = 1;
  total_size += 1 * this->ballistic_size();
  for (int i = 0; i < this->ballistic_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->ballistic(i));
  }

  // repeated .edu.vanderbilt.isis.meta.FEAType FEA = 2;
  total_size += 1 * this->fea_size();
  for (int i = 0; i < this->fea_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->fea(i));
  }

  // repeated .edu.vanderbilt.isis.meta.InterferenceType Interference = 3;
  total_size += 1 * this->interference_size();
  for (int i = 0; i < this->interference_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->interference(i));
  }

  // repeated .edu.vanderbilt.isis.meta.ToleranceType Tolerance = 4;
  total_size += 1 * this->tolerance_size();
  for (int i = 0; i < this->tolerance_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->tolerance(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AnalysesType::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AnalysesType* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AnalysesType*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AnalysesType::MergeFrom(const AnalysesType& from) {
  GOOGLE_CHECK_NE(&from, this);
  ballistic_.MergeFrom(from.ballistic_);
  fea_.MergeFrom(from.fea_);
  interference_.MergeFrom(from.interference_);
  tolerance_.MergeFrom(from.tolerance_);
  if (from._has_bits_[4 / 32] & (0xffu << (4 % 32))) {
    if (from.has__id()) {
      mutable__id()->::edu::vanderbilt::isis::meta::ID::MergeFrom(from._id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AnalysesType::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AnalysesType::CopyFrom(const AnalysesType& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AnalysesType::IsInitialized() const {

  for (int i = 0; i < ballistic_size(); i++) {
    if (!this->ballistic(i).IsInitialized()) return false;
  }
  for (int i = 0; i < fea_size(); i++) {
    if (!this->fea(i).IsInitialized()) return false;
  }
  for (int i = 0; i < interference_size(); i++) {
    if (!this->interference(i).IsInitialized()) return false;
  }
  for (int i = 0; i < tolerance_size(); i++) {
    if (!this->tolerance(i).IsInitialized()) return false;
  }
  if (has__id()) {
    if (!this->_id().IsInitialized()) return false;
  }
  return true;
}

void AnalysesType::Swap(AnalysesType* other) {
  if (other != this) {
    ballistic_.Swap(&other->ballistic_);
    fea_.Swap(&other->fea_);
    interference_.Swap(&other->interference_);
    tolerance_.Swap(&other->tolerance_);
    std::swap(_id_, other->_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AnalysesType::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AnalysesType_descriptor_;
  metadata.reflection = AnalysesType_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AnalysisComponentsType::kComponentFieldNumber;
const int AnalysisComponentsType::kIdFieldNumber;
#endif  // !_MSC_VER

AnalysisComponentsType::AnalysisComponentsType()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AnalysisComponentsType::InitAsDefaultInstance() {
  _id_ = const_cast< ::edu::vanderbilt::isis::meta::ID*>(&::edu::vanderbilt::isis::meta::ID::default_instance());
}

AnalysisComponentsType::AnalysisComponentsType(const AnalysisComponentsType& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AnalysisComponentsType::SharedCtor() {
  _cached_size_ = 0;
  _id_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AnalysisComponentsType::~AnalysisComponentsType() {
  SharedDtor();
}

void AnalysisComponentsType::SharedDtor() {
  if (this != default_instance_) {
    delete _id_;
  }
}

void AnalysisComponentsType::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AnalysisComponentsType::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AnalysisComponentsType_descriptor_;
}

const AnalysisComponentsType& AnalysisComponentsType::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AssemblyInterface_2eproto();
  return *default_instance_;
}

AnalysisComponentsType* AnalysisComponentsType::default_instance_ = NULL;

AnalysisComponentsType* AnalysisComponentsType::New() const {
  return new AnalysisComponentsType;
}

void AnalysisComponentsType::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (has__id()) {
      if (_id_ != NULL) _id_->::edu::vanderbilt::isis::meta::ID::Clear();
    }
  }
  component_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AnalysisComponentsType::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .edu.vanderbilt.isis.meta.ComponentType Component = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Component:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_component()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_Component;
        if (input->ExpectTag(18)) goto parse__id;
        break;
      }

      // optional .edu.vanderbilt.isis.meta.ID _id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse__id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AnalysisComponentsType::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .edu.vanderbilt.isis.meta.ComponentType Component = 1;
  for (int i = 0; i < this->component_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->component(i), output);
  }

  // optional .edu.vanderbilt.isis.meta.ID _id = 2;
  if (has__id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AnalysisComponentsType::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .edu.vanderbilt.isis.meta.ComponentType Component = 1;
  for (int i = 0; i < this->component_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->component(i), target);
  }

  // optional .edu.vanderbilt.isis.meta.ID _id = 2;
  if (has__id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AnalysisComponentsType::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional .edu.vanderbilt.isis.meta.ID _id = 2;
    if (has__id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_id());
    }

  }
  // repeated .edu.vanderbilt.isis.meta.ComponentType Component = 1;
  total_size += 1 * this->component_size();
  for (int i = 0; i < this->component_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->component(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AnalysisComponentsType::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AnalysisComponentsType* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AnalysisComponentsType*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AnalysisComponentsType::MergeFrom(const AnalysisComponentsType& from) {
  GOOGLE_CHECK_NE(&from, this);
  component_.MergeFrom(from.component_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has__id()) {
      mutable__id()->::edu::vanderbilt::isis::meta::ID::MergeFrom(from._id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AnalysisComponentsType::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AnalysisComponentsType::CopyFrom(const AnalysisComponentsType& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AnalysisComponentsType::IsInitialized() const {

  for (int i = 0; i < component_size(); i++) {
    if (!this->component(i).IsInitialized()) return false;
  }
  if (has__id()) {
    if (!this->_id().IsInitialized()) return false;
  }
  return true;
}

void AnalysisComponentsType::Swap(AnalysisComponentsType* other) {
  if (other != this) {
    component_.Swap(&other->component_);
    std::swap(_id_, other->_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AnalysisComponentsType::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AnalysisComponentsType_descriptor_;
  metadata.reflection = AnalysisComponentsType_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AnalysisConstraintType::kBallFieldNumber;
const int AnalysisConstraintType::kDisplacementFieldNumber;
const int AnalysisConstraintType::kGeometryFieldNumber;
const int AnalysisConstraintType::kPinFieldNumber;
const int AnalysisConstraintType::kIdFieldNumber;
#endif  // !_MSC_VER

AnalysisConstraintType::AnalysisConstraintType()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AnalysisConstraintType::InitAsDefaultInstance() {
  ball_ = const_cast< ::edu::vanderbilt::isis::meta::BallType*>(&::edu::vanderbilt::isis::meta::BallType::default_instance());
  displacement_ = const_cast< ::edu::vanderbilt::isis::meta::DisplacementType*>(&::edu::vanderbilt::isis::meta::DisplacementType::default_instance());
  geometry_ = const_cast< ::edu::vanderbilt::isis::meta::GeometryType*>(&::edu::vanderbilt::isis::meta::GeometryType::default_instance());
  pin_ = const_cast< ::edu::vanderbilt::isis::meta::PinType*>(&::edu::vanderbilt::isis::meta::PinType::default_instance());
  _id_ = const_cast< ::edu::vanderbilt::isis::meta::ID*>(&::edu::vanderbilt::isis::meta::ID::default_instance());
}

AnalysisConstraintType::AnalysisConstraintType(const AnalysisConstraintType& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AnalysisConstraintType::SharedCtor() {
  _cached_size_ = 0;
  ball_ = NULL;
  displacement_ = NULL;
  geometry_ = NULL;
  pin_ = NULL;
  _id_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AnalysisConstraintType::~AnalysisConstraintType() {
  SharedDtor();
}

void AnalysisConstraintType::SharedDtor() {
  if (this != default_instance_) {
    delete ball_;
    delete displacement_;
    delete geometry_;
    delete pin_;
    delete _id_;
  }
}

void AnalysisConstraintType::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AnalysisConstraintType::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AnalysisConstraintType_descriptor_;
}

const AnalysisConstraintType& AnalysisConstraintType::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AssemblyInterface_2eproto();
  return *default_instance_;
}

AnalysisConstraintType* AnalysisConstraintType::default_instance_ = NULL;

AnalysisConstraintType* AnalysisConstraintType::New() const {
  return new AnalysisConstraintType;
}

void AnalysisConstraintType::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_ball()) {
      if (ball_ != NULL) ball_->::edu::vanderbilt::isis::meta::BallType::Clear();
    }
    if (has_displacement()) {
      if (displacement_ != NULL) displacement_->::edu::vanderbilt::isis::meta::DisplacementType::Clear();
    }
    if (has_geometry()) {
      if (geometry_ != NULL) geometry_->::edu::vanderbilt::isis::meta::GeometryType::Clear();
    }
    if (has_pin()) {
      if (pin_ != NULL) pin_->::edu::vanderbilt::isis::meta::PinType::Clear();
    }
    if (has__id()) {
      if (_id_ != NULL) _id_->::edu::vanderbilt::isis::meta::ID::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AnalysisConstraintType::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .edu.vanderbilt.isis.meta.BallType Ball = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ball()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_Displacement;
        break;
      }

      // optional .edu.vanderbilt.isis.meta.DisplacementType Displacement = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Displacement:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_displacement()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_Geometry;
        break;
      }

      // optional .edu.vanderbilt.isis.meta.GeometryType Geometry = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Geometry:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_geometry()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_Pin;
        break;
      }

      // optional .edu.vanderbilt.isis.meta.PinType Pin = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Pin:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pin()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse__id;
        break;
      }

      // optional .edu.vanderbilt.isis.meta.ID _id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse__id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AnalysisConstraintType::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .edu.vanderbilt.isis.meta.BallType Ball = 1;
  if (has_ball()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->ball(), output);
  }

  // optional .edu.vanderbilt.isis.meta.DisplacementType Displacement = 2;
  if (has_displacement()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->displacement(), output);
  }

  // optional .edu.vanderbilt.isis.meta.GeometryType Geometry = 3;
  if (has_geometry()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->geometry(), output);
  }

  // optional .edu.vanderbilt.isis.meta.PinType Pin = 4;
  if (has_pin()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->pin(), output);
  }

  // optional .edu.vanderbilt.isis.meta.ID _id = 5;
  if (has__id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AnalysisConstraintType::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .edu.vanderbilt.isis.meta.BallType Ball = 1;
  if (has_ball()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->ball(), target);
  }

  // optional .edu.vanderbilt.isis.meta.DisplacementType Displacement = 2;
  if (has_displacement()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->displacement(), target);
  }

  // optional .edu.vanderbilt.isis.meta.GeometryType Geometry = 3;
  if (has_geometry()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->geometry(), target);
  }

  // optional .edu.vanderbilt.isis.meta.PinType Pin = 4;
  if (has_pin()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->pin(), target);
  }

  // optional .edu.vanderbilt.isis.meta.ID _id = 5;
  if (has__id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AnalysisConstraintType::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .edu.vanderbilt.isis.meta.BallType Ball = 1;
    if (has_ball()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ball());
    }

    // optional .edu.vanderbilt.isis.meta.DisplacementType Displacement = 2;
    if (has_displacement()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->displacement());
    }

    // optional .edu.vanderbilt.isis.meta.GeometryType Geometry = 3;
    if (has_geometry()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->geometry());
    }

    // optional .edu.vanderbilt.isis.meta.PinType Pin = 4;
    if (has_pin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pin());
    }

    // optional .edu.vanderbilt.isis.meta.ID _id = 5;
    if (has__id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AnalysisConstraintType::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AnalysisConstraintType* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AnalysisConstraintType*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AnalysisConstraintType::MergeFrom(const AnalysisConstraintType& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ball()) {
      mutable_ball()->::edu::vanderbilt::isis::meta::BallType::MergeFrom(from.ball());
    }
    if (from.has_displacement()) {
      mutable_displacement()->::edu::vanderbilt::isis::meta::DisplacementType::MergeFrom(from.displacement());
    }
    if (from.has_geometry()) {
      mutable_geometry()->::edu::vanderbilt::isis::meta::GeometryType::MergeFrom(from.geometry());
    }
    if (from.has_pin()) {
      mutable_pin()->::edu::vanderbilt::isis::meta::PinType::MergeFrom(from.pin());
    }
    if (from.has__id()) {
      mutable__id()->::edu::vanderbilt::isis::meta::ID::MergeFrom(from._id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AnalysisConstraintType::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AnalysisConstraintType::CopyFrom(const AnalysisConstraintType& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AnalysisConstraintType::IsInitialized() const {

  if (has_ball()) {
    if (!this->ball().IsInitialized()) return false;
  }
  if (has_displacement()) {
    if (!this->displacement().IsInitialized()) return false;
  }
  if (has_geometry()) {
    if (!this->geometry().IsInitialized()) return false;
  }
  if (has_pin()) {
    if (!this->pin().IsInitialized()) return false;
  }
  if (has__id()) {
    if (!this->_id().IsInitialized()) return false;
  }
  return true;
}

void AnalysisConstraintType::Swap(AnalysisConstraintType* other) {
  if (other != this) {
    std::swap(ball_, other->ball_);
    std::swap(displacement_, other->displacement_);
    std::swap(geometry_, other->geometry_);
    std::swap(pin_, other->pin_);
    std::swap(_id_, other->_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AnalysisConstraintType::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AnalysisConstraintType_descriptor_;
  metadata.reflection = AnalysisConstraintType_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AnalysisConstraintsType::kAnalysisConstraintFieldNumber;
const int AnalysisConstraintsType::kIdFieldNumber;
#endif  // !_MSC_VER

AnalysisConstraintsType::AnalysisConstraintsType()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AnalysisConstraintsType::InitAsDefaultInstance() {
  _id_ = const_cast< ::edu::vanderbilt::isis::meta::ID*>(&::edu::vanderbilt::isis::meta::ID::default_instance());
}

AnalysisConstraintsType::AnalysisConstraintsType(const AnalysisConstraintsType& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AnalysisConstraintsType::SharedCtor() {
  _cached_size_ = 0;
  _id_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AnalysisConstraintsType::~AnalysisConstraintsType() {
  SharedDtor();
}

void AnalysisConstraintsType::SharedDtor() {
  if (this != default_instance_) {
    delete _id_;
  }
}

void AnalysisConstraintsType::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AnalysisConstraintsType::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AnalysisConstraintsType_descriptor_;
}

const AnalysisConstraintsType& AnalysisConstraintsType::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AssemblyInterface_2eproto();
  return *default_instance_;
}

AnalysisConstraintsType* AnalysisConstraintsType::default_instance_ = NULL;

AnalysisConstraintsType* AnalysisConstraintsType::New() const {
  return new AnalysisConstraintsType;
}

void AnalysisConstraintsType::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (has__id()) {
      if (_id_ != NULL) _id_->::edu::vanderbilt::isis::meta::ID::Clear();
    }
  }
  analysisconstraint_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AnalysisConstraintsType::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .edu.vanderbilt.isis.meta.AnalysisConstraintType AnalysisConstraint = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_AnalysisConstraint:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_analysisconstraint()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_AnalysisConstraint;
        if (input->ExpectTag(18)) goto parse__id;
        break;
      }

      // optional .edu.vanderbilt.isis.meta.ID _id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse__id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AnalysisConstraintsType::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .edu.vanderbilt.isis.meta.AnalysisConstraintType AnalysisConstraint = 1;
  for (int i = 0; i < this->analysisconstraint_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->analysisconstraint(i), output);
  }

  // optional .edu.vanderbilt.isis.meta.ID _id = 2;
  if (has__id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AnalysisConstraintsType::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .edu.vanderbilt.isis.meta.AnalysisConstraintType AnalysisConstraint = 1;
  for (int i = 0; i < this->analysisconstraint_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->analysisconstraint(i), target);
  }

  // optional .edu.vanderbilt.isis.meta.ID _id = 2;
  if (has__id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AnalysisConstraintsType::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional .edu.vanderbilt.isis.meta.ID _id = 2;
    if (has__id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_id());
    }

  }
  // repeated .edu.vanderbilt.isis.meta.AnalysisConstraintType AnalysisConstraint = 1;
  total_size += 1 * this->analysisconstraint_size();
  for (int i = 0; i < this->analysisconstraint_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->analysisconstraint(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AnalysisConstraintsType::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AnalysisConstraintsType* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AnalysisConstraintsType*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AnalysisConstraintsType::MergeFrom(const AnalysisConstraintsType& from) {
  GOOGLE_CHECK_NE(&from, this);
  analysisconstraint_.MergeFrom(from.analysisconstraint_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has__id()) {
      mutable__id()->::edu::vanderbilt::isis::meta::ID::MergeFrom(from._id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AnalysisConstraintsType::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AnalysisConstraintsType::CopyFrom(const AnalysisConstraintsType& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AnalysisConstraintsType::IsInitialized() const {

  for (int i = 0; i < analysisconstraint_size(); i++) {
    if (!this->analysisconstraint(i).IsInitialized()) return false;
  }
  if (has__id()) {
    if (!this->_id().IsInitialized()) return false;
  }
  return true;
}

void AnalysisConstraintsType::Swap(AnalysisConstraintsType* other) {
  if (other != this) {
    analysisconstraint_.Swap(&other->analysisconstraint_);
    std::swap(_id_, other->_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AnalysisConstraintsType::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AnalysisConstraintsType_descriptor_;
  metadata.reflection = AnalysisConstraintsType_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AssembliesType::kAssemblyFieldNumber;
const int AssembliesType::kDataExchangeFieldNumber;
const int AssembliesType::kMaterialsFieldNumber;
const int AssembliesType::kUnassembledComponentsFieldNumber;
const int AssembliesType::kAssembliesFieldNumber;
const int AssembliesType::kVersionInfoFieldNumber;
const int AssembliesType::kIdFieldNumber;
#endif  // !_MSC_VER

AssembliesType::AssembliesType()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AssembliesType::InitAsDefaultInstance() {
  dataexchange_ = const_cast< ::edu::vanderbilt::isis::meta::DataExchangeType*>(&::edu::vanderbilt::isis::meta::DataExchangeType::default_instance());
  unassembledcomponents_ = const_cast< ::edu::vanderbilt::isis::meta::UnassembledComponentsType*>(&::edu::vanderbilt::isis::meta::UnassembledComponentsType::default_instance());
  _id_ = const_cast< ::edu::vanderbilt::isis::meta::ID*>(&::edu::vanderbilt::isis::meta::ID::default_instance());
}

AssembliesType::AssembliesType(const AssembliesType& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AssembliesType::SharedCtor() {
  _cached_size_ = 0;
  dataexchange_ = NULL;
  unassembledcomponents_ = NULL;
  versioninfo_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  _id_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AssembliesType::~AssembliesType() {
  SharedDtor();
}

void AssembliesType::SharedDtor() {
  if (versioninfo_ != &::google::protobuf::internal::kEmptyString) {
    delete versioninfo_;
  }
  if (this != default_instance_) {
    delete dataexchange_;
    delete unassembledcomponents_;
    delete _id_;
  }
}

void AssembliesType::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AssembliesType::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AssembliesType_descriptor_;
}

const AssembliesType& AssembliesType::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AssemblyInterface_2eproto();
  return *default_instance_;
}

AssembliesType* AssembliesType::default_instance_ = NULL;

AssembliesType* AssembliesType::New() const {
  return new AssembliesType;
}

void AssembliesType::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (has_dataexchange()) {
      if (dataexchange_ != NULL) dataexchange_->::edu::vanderbilt::isis::meta::DataExchangeType::Clear();
    }
    if (has_unassembledcomponents()) {
      if (unassembledcomponents_ != NULL) unassembledcomponents_->::edu::vanderbilt::isis::meta::UnassembledComponentsType::Clear();
    }
    if (has_versioninfo()) {
      if (versioninfo_ != &::google::protobuf::internal::kEmptyString) {
        versioninfo_->clear();
      }
    }
    if (has__id()) {
      if (_id_ != NULL) _id_->::edu::vanderbilt::isis::meta::ID::Clear();
    }
  }
  assembly_.Clear();
  materials_.Clear();
  assemblies_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AssembliesType::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .edu.vanderbilt.isis.meta.AssemblyType Assembly = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Assembly:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_assembly()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_Assembly;
        if (input->ExpectTag(18)) goto parse_DataExchange;
        break;
      }

      // optional .edu.vanderbilt.isis.meta.DataExchangeType DataExchange = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_DataExchange:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_dataexchange()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_Materials;
        break;
      }

      // repeated .edu.vanderbilt.isis.meta.MaterialsType Materials = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Materials:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_materials()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_Materials;
        if (input->ExpectTag(34)) goto parse_UnassembledComponents;
        break;
      }

      // optional .edu.vanderbilt.isis.meta.UnassembledComponentsType UnassembledComponents = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_UnassembledComponents:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_unassembledcomponents()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_Assemblies;
        break;
      }

      // repeated .edu.vanderbilt.isis.meta.AssembliesType Assemblies = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Assemblies:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_assemblies()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_Assemblies;
        if (input->ExpectTag(50)) goto parse_VersionInfo;
        break;
      }

      // required string VersionInfo = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_VersionInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_versioninfo()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->versioninfo().data(), this->versioninfo().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse__id;
        break;
      }

      // optional .edu.vanderbilt.isis.meta.ID _id = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse__id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AssembliesType::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .edu.vanderbilt.isis.meta.AssemblyType Assembly = 1;
  for (int i = 0; i < this->assembly_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->assembly(i), output);
  }

  // optional .edu.vanderbilt.isis.meta.DataExchangeType DataExchange = 2;
  if (has_dataexchange()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->dataexchange(), output);
  }

  // repeated .edu.vanderbilt.isis.meta.MaterialsType Materials = 3;
  for (int i = 0; i < this->materials_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->materials(i), output);
  }

  // optional .edu.vanderbilt.isis.meta.UnassembledComponentsType UnassembledComponents = 4;
  if (has_unassembledcomponents()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->unassembledcomponents(), output);
  }

  // repeated .edu.vanderbilt.isis.meta.AssembliesType Assemblies = 5;
  for (int i = 0; i < this->assemblies_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->assemblies(i), output);
  }

  // required string VersionInfo = 6;
  if (has_versioninfo()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->versioninfo().data(), this->versioninfo().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->versioninfo(), output);
  }

  // optional .edu.vanderbilt.isis.meta.ID _id = 7;
  if (has__id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AssembliesType::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .edu.vanderbilt.isis.meta.AssemblyType Assembly = 1;
  for (int i = 0; i < this->assembly_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->assembly(i), target);
  }

  // optional .edu.vanderbilt.isis.meta.DataExchangeType DataExchange = 2;
  if (has_dataexchange()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->dataexchange(), target);
  }

  // repeated .edu.vanderbilt.isis.meta.MaterialsType Materials = 3;
  for (int i = 0; i < this->materials_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->materials(i), target);
  }

  // optional .edu.vanderbilt.isis.meta.UnassembledComponentsType UnassembledComponents = 4;
  if (has_unassembledcomponents()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->unassembledcomponents(), target);
  }

  // repeated .edu.vanderbilt.isis.meta.AssembliesType Assemblies = 5;
  for (int i = 0; i < this->assemblies_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->assemblies(i), target);
  }

  // required string VersionInfo = 6;
  if (has_versioninfo()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->versioninfo().data(), this->versioninfo().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->versioninfo(), target);
  }

  // optional .edu.vanderbilt.isis.meta.ID _id = 7;
  if (has__id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AssembliesType::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional .edu.vanderbilt.isis.meta.DataExchangeType DataExchange = 2;
    if (has_dataexchange()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->dataexchange());
    }

    // optional .edu.vanderbilt.isis.meta.UnassembledComponentsType UnassembledComponents = 4;
    if (has_unassembledcomponents()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->unassembledcomponents());
    }

    // required string VersionInfo = 6;
    if (has_versioninfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->versioninfo());
    }

    // optional .edu.vanderbilt.isis.meta.ID _id = 7;
    if (has__id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_id());
    }

  }
  // repeated .edu.vanderbilt.isis.meta.AssemblyType Assembly = 1;
  total_size += 1 * this->assembly_size();
  for (int i = 0; i < this->assembly_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->assembly(i));
  }

  // repeated .edu.vanderbilt.isis.meta.MaterialsType Materials = 3;
  total_size += 1 * this->materials_size();
  for (int i = 0; i < this->materials_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->materials(i));
  }

  // repeated .edu.vanderbilt.isis.meta.AssembliesType Assemblies = 5;
  total_size += 1 * this->assemblies_size();
  for (int i = 0; i < this->assemblies_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->assemblies(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AssembliesType::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AssembliesType* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AssembliesType*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AssembliesType::MergeFrom(const AssembliesType& from) {
  GOOGLE_CHECK_NE(&from, this);
  assembly_.MergeFrom(from.assembly_);
  materials_.MergeFrom(from.materials_);
  assemblies_.MergeFrom(from.assemblies_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_dataexchange()) {
      mutable_dataexchange()->::edu::vanderbilt::isis::meta::DataExchangeType::MergeFrom(from.dataexchange());
    }
    if (from.has_unassembledcomponents()) {
      mutable_unassembledcomponents()->::edu::vanderbilt::isis::meta::UnassembledComponentsType::MergeFrom(from.unassembledcomponents());
    }
    if (from.has_versioninfo()) {
      set_versioninfo(from.versioninfo());
    }
    if (from.has__id()) {
      mutable__id()->::edu::vanderbilt::isis::meta::ID::MergeFrom(from._id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AssembliesType::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AssembliesType::CopyFrom(const AssembliesType& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AssembliesType::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000020) != 0x00000020) return false;

  for (int i = 0; i < assembly_size(); i++) {
    if (!this->assembly(i).IsInitialized()) return false;
  }
  if (has_dataexchange()) {
    if (!this->dataexchange().IsInitialized()) return false;
  }
  for (int i = 0; i < materials_size(); i++) {
    if (!this->materials(i).IsInitialized()) return false;
  }
  if (has_unassembledcomponents()) {
    if (!this->unassembledcomponents().IsInitialized()) return false;
  }
  for (int i = 0; i < assemblies_size(); i++) {
    if (!this->assemblies(i).IsInitialized()) return false;
  }
  if (has__id()) {
    if (!this->_id().IsInitialized()) return false;
  }
  return true;
}

void AssembliesType::Swap(AssembliesType* other) {
  if (other != this) {
    assembly_.Swap(&other->assembly_);
    std::swap(dataexchange_, other->dataexchange_);
    materials_.Swap(&other->materials_);
    std::swap(unassembledcomponents_, other->unassembledcomponents_);
    assemblies_.Swap(&other->assemblies_);
    std::swap(versioninfo_, other->versioninfo_);
    std::swap(_id_, other->_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AssembliesType::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AssembliesType_descriptor_;
  metadata.reflection = AssembliesType_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AssemblyType::kAnalysesFieldNumber;
const int AssemblyType::kCADComponentFieldNumber;
const int AssemblyType::kComputationsFieldNumber;
const int AssemblyType::kPropertiesFieldNumber;
const int AssemblyType::kConfigurationIDFieldNumber;
const int AssemblyType::kIdFieldNumber;
#endif  // !_MSC_VER

AssemblyType::AssemblyType()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AssemblyType::InitAsDefaultInstance() {
  analyses_ = const_cast< ::edu::vanderbilt::isis::meta::AnalysesType*>(&::edu::vanderbilt::isis::meta::AnalysesType::default_instance());
  cadcomponent_ = const_cast< ::edu::vanderbilt::isis::meta::CADComponentType*>(&::edu::vanderbilt::isis::meta::CADComponentType::default_instance());
  computations_ = const_cast< ::edu::vanderbilt::isis::meta::ComputationsType*>(&::edu::vanderbilt::isis::meta::ComputationsType::default_instance());
  properties_ = const_cast< ::edu::vanderbilt::isis::meta::PropertiesType*>(&::edu::vanderbilt::isis::meta::PropertiesType::default_instance());
  _id_ = const_cast< ::edu::vanderbilt::isis::meta::ID*>(&::edu::vanderbilt::isis::meta::ID::default_instance());
}

AssemblyType::AssemblyType(const AssemblyType& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AssemblyType::SharedCtor() {
  _cached_size_ = 0;
  analyses_ = NULL;
  cadcomponent_ = NULL;
  computations_ = NULL;
  properties_ = NULL;
  configurationid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  _id_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AssemblyType::~AssemblyType() {
  SharedDtor();
}

void AssemblyType::SharedDtor() {
  if (configurationid_ != &::google::protobuf::internal::kEmptyString) {
    delete configurationid_;
  }
  if (this != default_instance_) {
    delete analyses_;
    delete cadcomponent_;
    delete computations_;
    delete properties_;
    delete _id_;
  }
}

void AssemblyType::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AssemblyType::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AssemblyType_descriptor_;
}

const AssemblyType& AssemblyType::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AssemblyInterface_2eproto();
  return *default_instance_;
}

AssemblyType* AssemblyType::default_instance_ = NULL;

AssemblyType* AssemblyType::New() const {
  return new AssemblyType;
}

void AssemblyType::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_analyses()) {
      if (analyses_ != NULL) analyses_->::edu::vanderbilt::isis::meta::AnalysesType::Clear();
    }
    if (has_cadcomponent()) {
      if (cadcomponent_ != NULL) cadcomponent_->::edu::vanderbilt::isis::meta::CADComponentType::Clear();
    }
    if (has_computations()) {
      if (computations_ != NULL) computations_->::edu::vanderbilt::isis::meta::ComputationsType::Clear();
    }
    if (has_properties()) {
      if (properties_ != NULL) properties_->::edu::vanderbilt::isis::meta::PropertiesType::Clear();
    }
    if (has_configurationid()) {
      if (configurationid_ != &::google::protobuf::internal::kEmptyString) {
        configurationid_->clear();
      }
    }
    if (has__id()) {
      if (_id_ != NULL) _id_->::edu::vanderbilt::isis::meta::ID::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AssemblyType::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .edu.vanderbilt.isis.meta.AnalysesType Analyses = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_analyses()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_CADComponent;
        break;
      }

      // optional .edu.vanderbilt.isis.meta.CADComponentType CADComponent = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_CADComponent:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cadcomponent()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_Computations;
        break;
      }

      // optional .edu.vanderbilt.isis.meta.ComputationsType Computations = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Computations:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_computations()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_Properties;
        break;
      }

      // required .edu.vanderbilt.isis.meta.PropertiesType Properties = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Properties:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_properties()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_ConfigurationID;
        break;
      }

      // required string ConfigurationID = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ConfigurationID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_configurationid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->configurationid().data(), this->configurationid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse__id;
        break;
      }

      // optional .edu.vanderbilt.isis.meta.ID _id = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse__id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AssemblyType::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .edu.vanderbilt.isis.meta.AnalysesType Analyses = 1;
  if (has_analyses()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->analyses(), output);
  }

  // optional .edu.vanderbilt.isis.meta.CADComponentType CADComponent = 2;
  if (has_cadcomponent()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->cadcomponent(), output);
  }

  // optional .edu.vanderbilt.isis.meta.ComputationsType Computations = 3;
  if (has_computations()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->computations(), output);
  }

  // required .edu.vanderbilt.isis.meta.PropertiesType Properties = 4;
  if (has_properties()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->properties(), output);
  }

  // required string ConfigurationID = 5;
  if (has_configurationid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->configurationid().data(), this->configurationid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->configurationid(), output);
  }

  // optional .edu.vanderbilt.isis.meta.ID _id = 6;
  if (has__id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AssemblyType::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .edu.vanderbilt.isis.meta.AnalysesType Analyses = 1;
  if (has_analyses()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->analyses(), target);
  }

  // optional .edu.vanderbilt.isis.meta.CADComponentType CADComponent = 2;
  if (has_cadcomponent()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->cadcomponent(), target);
  }

  // optional .edu.vanderbilt.isis.meta.ComputationsType Computations = 3;
  if (has_computations()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->computations(), target);
  }

  // required .edu.vanderbilt.isis.meta.PropertiesType Properties = 4;
  if (has_properties()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->properties(), target);
  }

  // required string ConfigurationID = 5;
  if (has_configurationid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->configurationid().data(), this->configurationid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->configurationid(), target);
  }

  // optional .edu.vanderbilt.isis.meta.ID _id = 6;
  if (has__id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AssemblyType::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .edu.vanderbilt.isis.meta.AnalysesType Analyses = 1;
    if (has_analyses()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->analyses());
    }

    // optional .edu.vanderbilt.isis.meta.CADComponentType CADComponent = 2;
    if (has_cadcomponent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->cadcomponent());
    }

    // optional .edu.vanderbilt.isis.meta.ComputationsType Computations = 3;
    if (has_computations()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->computations());
    }

    // required .edu.vanderbilt.isis.meta.PropertiesType Properties = 4;
    if (has_properties()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->properties());
    }

    // required string ConfigurationID = 5;
    if (has_configurationid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->configurationid());
    }

    // optional .edu.vanderbilt.isis.meta.ID _id = 6;
    if (has__id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AssemblyType::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AssemblyType* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AssemblyType*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AssemblyType::MergeFrom(const AssemblyType& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_analyses()) {
      mutable_analyses()->::edu::vanderbilt::isis::meta::AnalysesType::MergeFrom(from.analyses());
    }
    if (from.has_cadcomponent()) {
      mutable_cadcomponent()->::edu::vanderbilt::isis::meta::CADComponentType::MergeFrom(from.cadcomponent());
    }
    if (from.has_computations()) {
      mutable_computations()->::edu::vanderbilt::isis::meta::ComputationsType::MergeFrom(from.computations());
    }
    if (from.has_properties()) {
      mutable_properties()->::edu::vanderbilt::isis::meta::PropertiesType::MergeFrom(from.properties());
    }
    if (from.has_configurationid()) {
      set_configurationid(from.configurationid());
    }
    if (from.has__id()) {
      mutable__id()->::edu::vanderbilt::isis::meta::ID::MergeFrom(from._id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AssemblyType::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AssemblyType::CopyFrom(const AssemblyType& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AssemblyType::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000018) != 0x00000018) return false;

  if (has_analyses()) {
    if (!this->analyses().IsInitialized()) return false;
  }
  if (has_cadcomponent()) {
    if (!this->cadcomponent().IsInitialized()) return false;
  }
  if (has_computations()) {
    if (!this->computations().IsInitialized()) return false;
  }
  if (has_properties()) {
    if (!this->properties().IsInitialized()) return false;
  }
  if (has__id()) {
    if (!this->_id().IsInitialized()) return false;
  }
  return true;
}

void AssemblyType::Swap(AssemblyType* other) {
  if (other != this) {
    std::swap(analyses_, other->analyses_);
    std::swap(cadcomponent_, other->cadcomponent_);
    std::swap(computations_, other->computations_);
    std::swap(properties_, other->properties_);
    std::swap(configurationid_, other->configurationid_);
    std::swap(_id_, other->_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AssemblyType::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AssemblyType_descriptor_;
  metadata.reflection = AssemblyType_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AxialDisplacementType::kPropertyFieldNumber;
const int AxialDisplacementType::kIdFieldNumber;
#endif  // !_MSC_VER

AxialDisplacementType::AxialDisplacementType()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AxialDisplacementType::InitAsDefaultInstance() {
  _id_ = const_cast< ::edu::vanderbilt::isis::meta::ID*>(&::edu::vanderbilt::isis::meta::ID::default_instance());
}

AxialDisplacementType::AxialDisplacementType(const AxialDisplacementType& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AxialDisplacementType::SharedCtor() {
  _cached_size_ = 0;
  property_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  _id_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AxialDisplacementType::~AxialDisplacementType() {
  SharedDtor();
}

void AxialDisplacementType::SharedDtor() {
  if (property_ != &::google::protobuf::internal::kEmptyString) {
    delete property_;
  }
  if (this != default_instance_) {
    delete _id_;
  }
}

void AxialDisplacementType::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AxialDisplacementType::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AxialDisplacementType_descriptor_;
}

const AxialDisplacementType& AxialDisplacementType::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AssemblyInterface_2eproto();
  return *default_instance_;
}

AxialDisplacementType* AxialDisplacementType::default_instance_ = NULL;

AxialDisplacementType* AxialDisplacementType::New() const {
  return new AxialDisplacementType;
}

void AxialDisplacementType::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_property()) {
      if (property_ != &::google::protobuf::internal::kEmptyString) {
        property_->clear();
      }
    }
    if (has__id()) {
      if (_id_ != NULL) _id_->::edu::vanderbilt::isis::meta::ID::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AxialDisplacementType::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string Property = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_property()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->property().data(), this->property().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse__id;
        break;
      }

      // optional .edu.vanderbilt.isis.meta.ID _id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse__id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AxialDisplacementType::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string Property = 1;
  if (has_property()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->property().data(), this->property().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->property(), output);
  }

  // optional .edu.vanderbilt.isis.meta.ID _id = 2;
  if (has__id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AxialDisplacementType::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string Property = 1;
  if (has_property()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->property().data(), this->property().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->property(), target);
  }

  // optional .edu.vanderbilt.isis.meta.ID _id = 2;
  if (has__id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AxialDisplacementType::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string Property = 1;
    if (has_property()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->property());
    }

    // optional .edu.vanderbilt.isis.meta.ID _id = 2;
    if (has__id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AxialDisplacementType::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AxialDisplacementType* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AxialDisplacementType*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AxialDisplacementType::MergeFrom(const AxialDisplacementType& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_property()) {
      set_property(from.property());
    }
    if (from.has__id()) {
      mutable__id()->::edu::vanderbilt::isis::meta::ID::MergeFrom(from._id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AxialDisplacementType::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AxialDisplacementType::CopyFrom(const AxialDisplacementType& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AxialDisplacementType::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has__id()) {
    if (!this->_id().IsInitialized()) return false;
  }
  return true;
}

void AxialDisplacementType::Swap(AxialDisplacementType* other) {
  if (other != this) {
    std::swap(property_, other->property_);
    std::swap(_id_, other->_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AxialDisplacementType::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AxialDisplacementType_descriptor_;
  metadata.reflection = AxialDisplacementType_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AxialRotationType::kPropertyFieldNumber;
const int AxialRotationType::kIdFieldNumber;
#endif  // !_MSC_VER

AxialRotationType::AxialRotationType()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AxialRotationType::InitAsDefaultInstance() {
  _id_ = const_cast< ::edu::vanderbilt::isis::meta::ID*>(&::edu::vanderbilt::isis::meta::ID::default_instance());
}

AxialRotationType::AxialRotationType(const AxialRotationType& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AxialRotationType::SharedCtor() {
  _cached_size_ = 0;
  property_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  _id_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AxialRotationType::~AxialRotationType() {
  SharedDtor();
}

void AxialRotationType::SharedDtor() {
  if (property_ != &::google::protobuf::internal::kEmptyString) {
    delete property_;
  }
  if (this != default_instance_) {
    delete _id_;
  }
}

void AxialRotationType::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AxialRotationType::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AxialRotationType_descriptor_;
}

const AxialRotationType& AxialRotationType::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AssemblyInterface_2eproto();
  return *default_instance_;
}

AxialRotationType* AxialRotationType::default_instance_ = NULL;

AxialRotationType* AxialRotationType::New() const {
  return new AxialRotationType;
}

void AxialRotationType::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_property()) {
      if (property_ != &::google::protobuf::internal::kEmptyString) {
        property_->clear();
      }
    }
    if (has__id()) {
      if (_id_ != NULL) _id_->::edu::vanderbilt::isis::meta::ID::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AxialRotationType::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string Property = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_property()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->property().data(), this->property().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse__id;
        break;
      }

      // optional .edu.vanderbilt.isis.meta.ID _id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse__id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AxialRotationType::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string Property = 1;
  if (has_property()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->property().data(), this->property().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->property(), output);
  }

  // optional .edu.vanderbilt.isis.meta.ID _id = 2;
  if (has__id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AxialRotationType::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string Property = 1;
  if (has_property()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->property().data(), this->property().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->property(), target);
  }

  // optional .edu.vanderbilt.isis.meta.ID _id = 2;
  if (has__id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AxialRotationType::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string Property = 1;
    if (has_property()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->property());
    }

    // optional .edu.vanderbilt.isis.meta.ID _id = 2;
    if (has__id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AxialRotationType::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AxialRotationType* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AxialRotationType*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AxialRotationType::MergeFrom(const AxialRotationType& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_property()) {
      set_property(from.property());
    }
    if (from.has__id()) {
      mutable__id()->::edu::vanderbilt::isis::meta::ID::MergeFrom(from._id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AxialRotationType::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AxialRotationType::CopyFrom(const AxialRotationType& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AxialRotationType::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has__id()) {
    if (!this->_id().IsInitialized()) return false;
  }
  return true;
}

void AxialRotationType::Swap(AxialRotationType* other) {
  if (other != this) {
    std::swap(property_, other->property_);
    std::swap(_id_, other->_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AxialRotationType::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AxialRotationType_descriptor_;
  metadata.reflection = AxialRotationType_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BallType::kIdFieldNumber;
#endif  // !_MSC_VER

BallType::BallType()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BallType::InitAsDefaultInstance() {
  _id_ = const_cast< ::edu::vanderbilt::isis::meta::ID*>(&::edu::vanderbilt::isis::meta::ID::default_instance());
}

BallType::BallType(const BallType& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BallType::SharedCtor() {
  _cached_size_ = 0;
  _id_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BallType::~BallType() {
  SharedDtor();
}

void BallType::SharedDtor() {
  if (this != default_instance_) {
    delete _id_;
  }
}

void BallType::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BallType::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BallType_descriptor_;
}

const BallType& BallType::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AssemblyInterface_2eproto();
  return *default_instance_;
}

BallType* BallType::default_instance_ = NULL;

BallType* BallType::New() const {
  return new BallType;
}

void BallType::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has__id()) {
      if (_id_ != NULL) _id_->::edu::vanderbilt::isis::meta::ID::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BallType::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .edu.vanderbilt.isis.meta.ID _id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BallType::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .edu.vanderbilt.isis.meta.ID _id = 1;
  if (has__id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BallType::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .edu.vanderbilt.isis.meta.ID _id = 1;
  if (has__id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BallType::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .edu.vanderbilt.isis.meta.ID _id = 1;
    if (has__id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BallType::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BallType* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BallType*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BallType::MergeFrom(const BallType& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has__id()) {
      mutable__id()->::edu::vanderbilt::isis::meta::ID::MergeFrom(from._id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BallType::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BallType::CopyFrom(const BallType& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BallType::IsInitialized() const {

  if (has__id()) {
    if (!this->_id().IsInitialized()) return false;
  }
  return true;
}

void BallType::Swap(BallType* other) {
  if (other != this) {
    std::swap(_id_, other->_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BallType::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BallType_descriptor_;
  metadata.reflection = BallType_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BallisticType::kReferencePlaneFieldNumber;
const int BallisticType::kShotlinesFieldNumber;
const int BallisticType::kAnalysisIDFieldNumber;
const int BallisticType::kIdFieldNumber;
#endif  // !_MSC_VER

BallisticType::BallisticType()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BallisticType::InitAsDefaultInstance() {
  referenceplane_ = const_cast< ::edu::vanderbilt::isis::meta::ReferencePlaneType*>(&::edu::vanderbilt::isis::meta::ReferencePlaneType::default_instance());
  shotlines_ = const_cast< ::edu::vanderbilt::isis::meta::ShotlinesType*>(&::edu::vanderbilt::isis::meta::ShotlinesType::default_instance());
  _id_ = const_cast< ::edu::vanderbilt::isis::meta::ID*>(&::edu::vanderbilt::isis::meta::ID::default_instance());
}

BallisticType::BallisticType(const BallisticType& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BallisticType::SharedCtor() {
  _cached_size_ = 0;
  referenceplane_ = NULL;
  shotlines_ = NULL;
  analysisid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  _id_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BallisticType::~BallisticType() {
  SharedDtor();
}

void BallisticType::SharedDtor() {
  if (analysisid_ != &::google::protobuf::internal::kEmptyString) {
    delete analysisid_;
  }
  if (this != default_instance_) {
    delete referenceplane_;
    delete shotlines_;
    delete _id_;
  }
}

void BallisticType::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BallisticType::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BallisticType_descriptor_;
}

const BallisticType& BallisticType::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AssemblyInterface_2eproto();
  return *default_instance_;
}

BallisticType* BallisticType::default_instance_ = NULL;

BallisticType* BallisticType::New() const {
  return new BallisticType;
}

void BallisticType::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_referenceplane()) {
      if (referenceplane_ != NULL) referenceplane_->::edu::vanderbilt::isis::meta::ReferencePlaneType::Clear();
    }
    if (has_shotlines()) {
      if (shotlines_ != NULL) shotlines_->::edu::vanderbilt::isis::meta::ShotlinesType::Clear();
    }
    if (has_analysisid()) {
      if (analysisid_ != &::google::protobuf::internal::kEmptyString) {
        analysisid_->clear();
      }
    }
    if (has__id()) {
      if (_id_ != NULL) _id_->::edu::vanderbilt::isis::meta::ID::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BallisticType::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .edu.vanderbilt.isis.meta.ReferencePlaneType ReferencePlane = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_referenceplane()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_Shotlines;
        break;
      }

      // optional .edu.vanderbilt.isis.meta.ShotlinesType Shotlines = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Shotlines:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_shotlines()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_AnalysisID;
        break;
      }

      // required string AnalysisID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_AnalysisID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_analysisid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->analysisid().data(), this->analysisid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse__id;
        break;
      }

      // optional .edu.vanderbilt.isis.meta.ID _id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse__id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BallisticType::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .edu.vanderbilt.isis.meta.ReferencePlaneType ReferencePlane = 1;
  if (has_referenceplane()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->referenceplane(), output);
  }

  // optional .edu.vanderbilt.isis.meta.ShotlinesType Shotlines = 2;
  if (has_shotlines()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->shotlines(), output);
  }

  // required string AnalysisID = 3;
  if (has_analysisid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->analysisid().data(), this->analysisid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->analysisid(), output);
  }

  // optional .edu.vanderbilt.isis.meta.ID _id = 4;
  if (has__id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BallisticType::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .edu.vanderbilt.isis.meta.ReferencePlaneType ReferencePlane = 1;
  if (has_referenceplane()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->referenceplane(), target);
  }

  // optional .edu.vanderbilt.isis.meta.ShotlinesType Shotlines = 2;
  if (has_shotlines()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->shotlines(), target);
  }

  // required string AnalysisID = 3;
  if (has_analysisid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->analysisid().data(), this->analysisid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->analysisid(), target);
  }

  // optional .edu.vanderbilt.isis.meta.ID _id = 4;
  if (has__id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BallisticType::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .edu.vanderbilt.isis.meta.ReferencePlaneType ReferencePlane = 1;
    if (has_referenceplane()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->referenceplane());
    }

    // optional .edu.vanderbilt.isis.meta.ShotlinesType Shotlines = 2;
    if (has_shotlines()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->shotlines());
    }

    // required string AnalysisID = 3;
    if (has_analysisid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->analysisid());
    }

    // optional .edu.vanderbilt.isis.meta.ID _id = 4;
    if (has__id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BallisticType::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BallisticType* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BallisticType*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BallisticType::MergeFrom(const BallisticType& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_referenceplane()) {
      mutable_referenceplane()->::edu::vanderbilt::isis::meta::ReferencePlaneType::MergeFrom(from.referenceplane());
    }
    if (from.has_shotlines()) {
      mutable_shotlines()->::edu::vanderbilt::isis::meta::ShotlinesType::MergeFrom(from.shotlines());
    }
    if (from.has_analysisid()) {
      set_analysisid(from.analysisid());
    }
    if (from.has__id()) {
      mutable__id()->::edu::vanderbilt::isis::meta::ID::MergeFrom(from._id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BallisticType::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BallisticType::CopyFrom(const BallisticType& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BallisticType::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000004) != 0x00000004) return false;

  if (has_referenceplane()) {
    if (!this->referenceplane().IsInitialized()) return false;
  }
  if (has_shotlines()) {
    if (!this->shotlines().IsInitialized()) return false;
  }
  if (has__id()) {
    if (!this->_id().IsInitialized()) return false;
  }
  return true;
}

void BallisticType::Swap(BallisticType* other) {
  if (other != this) {
    std::swap(referenceplane_, other->referenceplane_);
    std::swap(shotlines_, other->shotlines_);
    std::swap(analysisid_, other->analysisid_);
    std::swap(_id_, other->_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BallisticType::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BallisticType_descriptor_;
  metadata.reflection = BallisticType_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BoundingBoxType::kComponentIDFieldNumber;
const int BoundingBoxType::kMetricIDFieldNumber;
const int BoundingBoxType::kRequestedValueTypeFieldNumber;
const int BoundingBoxType::kIdFieldNumber;
#endif  // !_MSC_VER

BoundingBoxType::BoundingBoxType()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BoundingBoxType::InitAsDefaultInstance() {
  _id_ = const_cast< ::edu::vanderbilt::isis::meta::ID*>(&::edu::vanderbilt::isis::meta::ID::default_instance());
}

BoundingBoxType::BoundingBoxType(const BoundingBoxType& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BoundingBoxType::SharedCtor() {
  _cached_size_ = 0;
  componentid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  metricid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  requestedvaluetype_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  _id_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BoundingBoxType::~BoundingBoxType() {
  SharedDtor();
}

void BoundingBoxType::SharedDtor() {
  if (componentid_ != &::google::protobuf::internal::kEmptyString) {
    delete componentid_;
  }
  if (metricid_ != &::google::protobuf::internal::kEmptyString) {
    delete metricid_;
  }
  if (requestedvaluetype_ != &::google::protobuf::internal::kEmptyString) {
    delete requestedvaluetype_;
  }
  if (this != default_instance_) {
    delete _id_;
  }
}

void BoundingBoxType::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BoundingBoxType::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BoundingBoxType_descriptor_;
}

const BoundingBoxType& BoundingBoxType::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AssemblyInterface_2eproto();
  return *default_instance_;
}

BoundingBoxType* BoundingBoxType::default_instance_ = NULL;

BoundingBoxType* BoundingBoxType::New() const {
  return new BoundingBoxType;
}

void BoundingBoxType::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_componentid()) {
      if (componentid_ != &::google::protobuf::internal::kEmptyString) {
        componentid_->clear();
      }
    }
    if (has_metricid()) {
      if (metricid_ != &::google::protobuf::internal::kEmptyString) {
        metricid_->clear();
      }
    }
    if (has_requestedvaluetype()) {
      if (requestedvaluetype_ != &::google::protobuf::internal::kEmptyString) {
        requestedvaluetype_->clear();
      }
    }
    if (has__id()) {
      if (_id_ != NULL) _id_->::edu::vanderbilt::isis::meta::ID::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BoundingBoxType::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string ComponentID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_componentid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->componentid().data(), this->componentid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_MetricID;
        break;
      }

      // required string MetricID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_MetricID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_metricid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->metricid().data(), this->metricid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_RequestedValueType;
        break;
      }

      // required string RequestedValueType = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_RequestedValueType:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_requestedvaluetype()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->requestedvaluetype().data(), this->requestedvaluetype().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse__id;
        break;
      }

      // optional .edu.vanderbilt.isis.meta.ID _id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse__id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BoundingBoxType::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string ComponentID = 1;
  if (has_componentid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->componentid().data(), this->componentid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->componentid(), output);
  }

  // required string MetricID = 2;
  if (has_metricid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->metricid().data(), this->metricid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->metricid(), output);
  }

  // required string RequestedValueType = 3;
  if (has_requestedvaluetype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->requestedvaluetype().data(), this->requestedvaluetype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->requestedvaluetype(), output);
  }

  // optional .edu.vanderbilt.isis.meta.ID _id = 4;
  if (has__id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BoundingBoxType::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string ComponentID = 1;
  if (has_componentid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->componentid().data(), this->componentid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->componentid(), target);
  }

  // required string MetricID = 2;
  if (has_metricid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->metricid().data(), this->metricid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->metricid(), target);
  }

  // required string RequestedValueType = 3;
  if (has_requestedvaluetype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->requestedvaluetype().data(), this->requestedvaluetype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->requestedvaluetype(), target);
  }

  // optional .edu.vanderbilt.isis.meta.ID _id = 4;
  if (has__id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BoundingBoxType::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string ComponentID = 1;
    if (has_componentid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->componentid());
    }

    // required string MetricID = 2;
    if (has_metricid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->metricid());
    }

    // required string RequestedValueType = 3;
    if (has_requestedvaluetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->requestedvaluetype());
    }

    // optional .edu.vanderbilt.isis.meta.ID _id = 4;
    if (has__id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BoundingBoxType::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BoundingBoxType* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BoundingBoxType*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BoundingBoxType::MergeFrom(const BoundingBoxType& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_componentid()) {
      set_componentid(from.componentid());
    }
    if (from.has_metricid()) {
      set_metricid(from.metricid());
    }
    if (from.has_requestedvaluetype()) {
      set_requestedvaluetype(from.requestedvaluetype());
    }
    if (from.has__id()) {
      mutable__id()->::edu::vanderbilt::isis::meta::ID::MergeFrom(from._id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BoundingBoxType::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BoundingBoxType::CopyFrom(const BoundingBoxType& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BoundingBoxType::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has__id()) {
    if (!this->_id().IsInitialized()) return false;
  }
  return true;
}

void BoundingBoxType::Swap(BoundingBoxType* other) {
  if (other != this) {
    std::swap(componentid_, other->componentid_);
    std::swap(metricid_, other->metricid_);
    std::swap(requestedvaluetype_, other->requestedvaluetype_);
    std::swap(_id_, other->_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BoundingBoxType::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BoundingBoxType_descriptor_;
  metadata.reflection = BoundingBoxType_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CADComponentType::kCADComponentFieldNumber;
const int CADComponentType::kConstraintFieldNumber;
const int CADComponentType::kKinematicConnectionsFieldNumber;
const int CADComponentType::kParametricParametersFieldNumber;
const int CADComponentType::kComponentIDFieldNumber;
const int CADComponentType::kMaterialIDFieldNumber;
const int CADComponentType::kNameFieldNumber;
const int CADComponentType::kSpecialInstructionFieldNumber;
const int CADComponentType::kStandaloneFieldNumber;
const int CADComponentType::kTypeFieldNumber;
const int CADComponentType::kIdFieldNumber;
#endif  // !_MSC_VER

CADComponentType::CADComponentType()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CADComponentType::InitAsDefaultInstance() {
  kinematicconnections_ = const_cast< ::edu::vanderbilt::isis::meta::KinematicConnectionsType*>(&::edu::vanderbilt::isis::meta::KinematicConnectionsType::default_instance());
  parametricparameters_ = const_cast< ::edu::vanderbilt::isis::meta::ParametricParametersType*>(&::edu::vanderbilt::isis::meta::ParametricParametersType::default_instance());
  _id_ = const_cast< ::edu::vanderbilt::isis::meta::ID*>(&::edu::vanderbilt::isis::meta::ID::default_instance());
}

CADComponentType::CADComponentType(const CADComponentType& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CADComponentType::SharedCtor() {
  _cached_size_ = 0;
  kinematicconnections_ = NULL;
  parametricparameters_ = NULL;
  componentid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  materialid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  specialinstruction_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  standalone_ = false;
  type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  _id_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CADComponentType::~CADComponentType() {
  SharedDtor();
}

void CADComponentType::SharedDtor() {
  if (componentid_ != &::google::protobuf::internal::kEmptyString) {
    delete componentid_;
  }
  if (materialid_ != &::google::protobuf::internal::kEmptyString) {
    delete materialid_;
  }
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (specialinstruction_ != &::google::protobuf::internal::kEmptyString) {
    delete specialinstruction_;
  }
  if (type_ != &::google::protobuf::internal::kEmptyString) {
    delete type_;
  }
  if (this != default_instance_) {
    delete kinematicconnections_;
    delete parametricparameters_;
    delete _id_;
  }
}

void CADComponentType::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CADComponentType::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CADComponentType_descriptor_;
}

const CADComponentType& CADComponentType::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AssemblyInterface_2eproto();
  return *default_instance_;
}

CADComponentType* CADComponentType::default_instance_ = NULL;

CADComponentType* CADComponentType::New() const {
  return new CADComponentType;
}

void CADComponentType::Clear() {
  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    if (has_kinematicconnections()) {
      if (kinematicconnections_ != NULL) kinematicconnections_->::edu::vanderbilt::isis::meta::KinematicConnectionsType::Clear();
    }
    if (has_parametricparameters()) {
      if (parametricparameters_ != NULL) parametricparameters_->::edu::vanderbilt::isis::meta::ParametricParametersType::Clear();
    }
    if (has_componentid()) {
      if (componentid_ != &::google::protobuf::internal::kEmptyString) {
        componentid_->clear();
      }
    }
    if (has_materialid()) {
      if (materialid_ != &::google::protobuf::internal::kEmptyString) {
        materialid_->clear();
      }
    }
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_specialinstruction()) {
      if (specialinstruction_ != &::google::protobuf::internal::kEmptyString) {
        specialinstruction_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    standalone_ = false;
    if (has_type()) {
      if (type_ != &::google::protobuf::internal::kEmptyString) {
        type_->clear();
      }
    }
    if (has__id()) {
      if (_id_ != NULL) _id_->::edu::vanderbilt::isis::meta::ID::Clear();
    }
  }
  cadcomponent_.Clear();
  constraint_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CADComponentType::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .edu.vanderbilt.isis.meta.CADComponentType CADComponent = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_CADComponent:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_cadcomponent()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_CADComponent;
        if (input->ExpectTag(18)) goto parse_Constraint;
        break;
      }

      // repeated .edu.vanderbilt.isis.meta.ConstraintType Constraint = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Constraint:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_constraint()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_Constraint;
        if (input->ExpectTag(26)) goto parse_KinematicConnections;
        break;
      }

      // optional .edu.vanderbilt.isis.meta.KinematicConnectionsType KinematicConnections = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_KinematicConnections:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_kinematicconnections()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_ParametricParameters;
        break;
      }

      // optional .edu.vanderbilt.isis.meta.ParametricParametersType ParametricParameters = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ParametricParameters:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_parametricparameters()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_ComponentID;
        break;
      }

      // required string ComponentID = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ComponentID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_componentid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->componentid().data(), this->componentid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_MaterialID;
        break;
      }

      // optional string MaterialID = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_MaterialID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_materialid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->materialid().data(), this->materialid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_Name;
        break;
      }

      // optional string Name = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_SpecialInstruction;
        break;
      }

      // optional string SpecialInstruction = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_SpecialInstruction:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_specialinstruction()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->specialinstruction().data(), this->specialinstruction().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_Standalone;
        break;
      }

      // optional bool Standalone = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Standalone:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &standalone_)));
          set_has_standalone();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_Type;
        break;
      }

      // optional string Type = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->type().data(), this->type().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse__id;
        break;
      }

      // optional .edu.vanderbilt.isis.meta.ID _id = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse__id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CADComponentType::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .edu.vanderbilt.isis.meta.CADComponentType CADComponent = 1;
  for (int i = 0; i < this->cadcomponent_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->cadcomponent(i), output);
  }

  // repeated .edu.vanderbilt.isis.meta.ConstraintType Constraint = 2;
  for (int i = 0; i < this->constraint_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->constraint(i), output);
  }

  // optional .edu.vanderbilt.isis.meta.KinematicConnectionsType KinematicConnections = 3;
  if (has_kinematicconnections()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->kinematicconnections(), output);
  }

  // optional .edu.vanderbilt.isis.meta.ParametricParametersType ParametricParameters = 4;
  if (has_parametricparameters()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->parametricparameters(), output);
  }

  // required string ComponentID = 5;
  if (has_componentid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->componentid().data(), this->componentid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->componentid(), output);
  }

  // optional string MaterialID = 6;
  if (has_materialid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->materialid().data(), this->materialid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->materialid(), output);
  }

  // optional string Name = 7;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->name(), output);
  }

  // optional string SpecialInstruction = 8;
  if (has_specialinstruction()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->specialinstruction().data(), this->specialinstruction().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->specialinstruction(), output);
  }

  // optional bool Standalone = 9;
  if (has_standalone()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->standalone(), output);
  }

  // optional string Type = 10;
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->type(), output);
  }

  // optional .edu.vanderbilt.isis.meta.ID _id = 11;
  if (has__id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CADComponentType::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .edu.vanderbilt.isis.meta.CADComponentType CADComponent = 1;
  for (int i = 0; i < this->cadcomponent_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->cadcomponent(i), target);
  }

  // repeated .edu.vanderbilt.isis.meta.ConstraintType Constraint = 2;
  for (int i = 0; i < this->constraint_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->constraint(i), target);
  }

  // optional .edu.vanderbilt.isis.meta.KinematicConnectionsType KinematicConnections = 3;
  if (has_kinematicconnections()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->kinematicconnections(), target);
  }

  // optional .edu.vanderbilt.isis.meta.ParametricParametersType ParametricParameters = 4;
  if (has_parametricparameters()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->parametricparameters(), target);
  }

  // required string ComponentID = 5;
  if (has_componentid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->componentid().data(), this->componentid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->componentid(), target);
  }

  // optional string MaterialID = 6;
  if (has_materialid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->materialid().data(), this->materialid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->materialid(), target);
  }

  // optional string Name = 7;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->name(), target);
  }

  // optional string SpecialInstruction = 8;
  if (has_specialinstruction()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->specialinstruction().data(), this->specialinstruction().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->specialinstruction(), target);
  }

  // optional bool Standalone = 9;
  if (has_standalone()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->standalone(), target);
  }

  // optional string Type = 10;
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->type(), target);
  }

  // optional .edu.vanderbilt.isis.meta.ID _id = 11;
  if (has__id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CADComponentType::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    // optional .edu.vanderbilt.isis.meta.KinematicConnectionsType KinematicConnections = 3;
    if (has_kinematicconnections()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->kinematicconnections());
    }

    // optional .edu.vanderbilt.isis.meta.ParametricParametersType ParametricParameters = 4;
    if (has_parametricparameters()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->parametricparameters());
    }

    // required string ComponentID = 5;
    if (has_componentid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->componentid());
    }

    // optional string MaterialID = 6;
    if (has_materialid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->materialid());
    }

    // optional string Name = 7;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string SpecialInstruction = 8;
    if (has_specialinstruction()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->specialinstruction());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional bool Standalone = 9;
    if (has_standalone()) {
      total_size += 1 + 1;
    }

    // optional string Type = 10;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->type());
    }

    // optional .edu.vanderbilt.isis.meta.ID _id = 11;
    if (has__id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_id());
    }

  }
  // repeated .edu.vanderbilt.isis.meta.CADComponentType CADComponent = 1;
  total_size += 1 * this->cadcomponent_size();
  for (int i = 0; i < this->cadcomponent_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->cadcomponent(i));
  }

  // repeated .edu.vanderbilt.isis.meta.ConstraintType Constraint = 2;
  total_size += 1 * this->constraint_size();
  for (int i = 0; i < this->constraint_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->constraint(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CADComponentType::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CADComponentType* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CADComponentType*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CADComponentType::MergeFrom(const CADComponentType& from) {
  GOOGLE_CHECK_NE(&from, this);
  cadcomponent_.MergeFrom(from.cadcomponent_);
  constraint_.MergeFrom(from.constraint_);
  if (from._has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    if (from.has_kinematicconnections()) {
      mutable_kinematicconnections()->::edu::vanderbilt::isis::meta::KinematicConnectionsType::MergeFrom(from.kinematicconnections());
    }
    if (from.has_parametricparameters()) {
      mutable_parametricparameters()->::edu::vanderbilt::isis::meta::ParametricParametersType::MergeFrom(from.parametricparameters());
    }
    if (from.has_componentid()) {
      set_componentid(from.componentid());
    }
    if (from.has_materialid()) {
      set_materialid(from.materialid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_specialinstruction()) {
      set_specialinstruction(from.specialinstruction());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_standalone()) {
      set_standalone(from.standalone());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has__id()) {
      mutable__id()->::edu::vanderbilt::isis::meta::ID::MergeFrom(from._id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CADComponentType::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CADComponentType::CopyFrom(const CADComponentType& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CADComponentType::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000010) != 0x00000010) return false;

  for (int i = 0; i < cadcomponent_size(); i++) {
    if (!this->cadcomponent(i).IsInitialized()) return false;
  }
  for (int i = 0; i < constraint_size(); i++) {
    if (!this->constraint(i).IsInitialized()) return false;
  }
  if (has_kinematicconnections()) {
    if (!this->kinematicconnections().IsInitialized()) return false;
  }
  if (has_parametricparameters()) {
    if (!this->parametricparameters().IsInitialized()) return false;
  }
  if (has__id()) {
    if (!this->_id().IsInitialized()) return false;
  }
  return true;
}

void CADComponentType::Swap(CADComponentType* other) {
  if (other != this) {
    cadcomponent_.Swap(&other->cadcomponent_);
    constraint_.Swap(&other->constraint_);
    std::swap(kinematicconnections_, other->kinematicconnections_);
    std::swap(parametricparameters_, other->parametricparameters_);
    std::swap(componentid_, other->componentid_);
    std::swap(materialid_, other->materialid_);
    std::swap(name_, other->name_);
    std::swap(specialinstruction_, other->specialinstruction_);
    std::swap(standalone_, other->standalone_);
    std::swap(type_, other->type_);
    std::swap(_id_, other->_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CADComponentType::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CADComponentType_descriptor_;
  metadata.reflection = CADComponentType_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CADParameterType::kUnitsFieldNumber;
const int CADParameterType::kNameFieldNumber;
const int CADParameterType::kTypeFieldNumber;
const int CADParameterType::kValueFieldNumber;
const int CADParameterType::kIdFieldNumber;
#endif  // !_MSC_VER

CADParameterType::CADParameterType()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CADParameterType::InitAsDefaultInstance() {
  units_ = const_cast< ::edu::vanderbilt::isis::meta::UnitsType*>(&::edu::vanderbilt::isis::meta::UnitsType::default_instance());
  _id_ = const_cast< ::edu::vanderbilt::isis::meta::ID*>(&::edu::vanderbilt::isis::meta::ID::default_instance());
}

CADParameterType::CADParameterType(const CADParameterType& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CADParameterType::SharedCtor() {
  _cached_size_ = 0;
  units_ = NULL;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  _id_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CADParameterType::~CADParameterType() {
  SharedDtor();
}

void CADParameterType::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (type_ != &::google::protobuf::internal::kEmptyString) {
    delete type_;
  }
  if (value_ != &::google::protobuf::internal::kEmptyString) {
    delete value_;
  }
  if (this != default_instance_) {
    delete units_;
    delete _id_;
  }
}

void CADParameterType::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CADParameterType::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CADParameterType_descriptor_;
}

const CADParameterType& CADParameterType::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AssemblyInterface_2eproto();
  return *default_instance_;
}

CADParameterType* CADParameterType::default_instance_ = NULL;

CADParameterType* CADParameterType::New() const {
  return new CADParameterType;
}

void CADParameterType::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_units()) {
      if (units_ != NULL) units_->::edu::vanderbilt::isis::meta::UnitsType::Clear();
    }
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_type()) {
      if (type_ != &::google::protobuf::internal::kEmptyString) {
        type_->clear();
      }
    }
    if (has_value()) {
      if (value_ != &::google::protobuf::internal::kEmptyString) {
        value_->clear();
      }
    }
    if (has__id()) {
      if (_id_ != NULL) _id_->::edu::vanderbilt::isis::meta::ID::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CADParameterType::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .edu.vanderbilt.isis.meta.UnitsType Units = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_units()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_Name;
        break;
      }

      // required string Name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_Type;
        break;
      }

      // required string Type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->type().data(), this->type().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_Value;
        break;
      }

      // required string Value = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->value().data(), this->value().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse__id;
        break;
      }

      // optional .edu.vanderbilt.isis.meta.ID _id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse__id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CADParameterType::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .edu.vanderbilt.isis.meta.UnitsType Units = 1;
  if (has_units()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->units(), output);
  }

  // required string Name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }

  // required string Type = 3;
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->type(), output);
  }

  // required string Value = 4;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->value(), output);
  }

  // optional .edu.vanderbilt.isis.meta.ID _id = 5;
  if (has__id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CADParameterType::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .edu.vanderbilt.isis.meta.UnitsType Units = 1;
  if (has_units()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->units(), target);
  }

  // required string Name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // required string Type = 3;
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->type(), target);
  }

  // required string Value = 4;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->value(), target);
  }

  // optional .edu.vanderbilt.isis.meta.ID _id = 5;
  if (has__id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CADParameterType::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .edu.vanderbilt.isis.meta.UnitsType Units = 1;
    if (has_units()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->units());
    }

    // required string Name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required string Type = 3;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->type());
    }

    // required string Value = 4;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->value());
    }

    // optional .edu.vanderbilt.isis.meta.ID _id = 5;
    if (has__id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CADParameterType::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CADParameterType* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CADParameterType*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CADParameterType::MergeFrom(const CADParameterType& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_units()) {
      mutable_units()->::edu::vanderbilt::isis::meta::UnitsType::MergeFrom(from.units());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
    if (from.has__id()) {
      mutable__id()->::edu::vanderbilt::isis::meta::ID::MergeFrom(from._id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CADParameterType::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CADParameterType::CopyFrom(const CADParameterType& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CADParameterType::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000e) != 0x0000000e) return false;

  if (has_units()) {
    if (!this->units().IsInitialized()) return false;
  }
  if (has__id()) {
    if (!this->_id().IsInitialized()) return false;
  }
  return true;
}

void CADParameterType::Swap(CADParameterType* other) {
  if (other != this) {
    std::swap(units_, other->units_);
    std::swap(name_, other->name_);
    std::swap(type_, other->type_);
    std::swap(value_, other->value_);
    std::swap(_id_, other->_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CADParameterType::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CADParameterType_descriptor_;
  metadata.reflection = CADParameterType_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CenterOfGravityType::kComponentIDFieldNumber;
const int CenterOfGravityType::kMetricIDFieldNumber;
const int CenterOfGravityType::kRequestedValueTypeFieldNumber;
const int CenterOfGravityType::kIdFieldNumber;
#endif  // !_MSC_VER

CenterOfGravityType::CenterOfGravityType()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CenterOfGravityType::InitAsDefaultInstance() {
  _id_ = const_cast< ::edu::vanderbilt::isis::meta::ID*>(&::edu::vanderbilt::isis::meta::ID::default_instance());
}

CenterOfGravityType::CenterOfGravityType(const CenterOfGravityType& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CenterOfGravityType::SharedCtor() {
  _cached_size_ = 0;
  componentid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  metricid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  requestedvaluetype_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  _id_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CenterOfGravityType::~CenterOfGravityType() {
  SharedDtor();
}

void CenterOfGravityType::SharedDtor() {
  if (componentid_ != &::google::protobuf::internal::kEmptyString) {
    delete componentid_;
  }
  if (metricid_ != &::google::protobuf::internal::kEmptyString) {
    delete metricid_;
  }
  if (requestedvaluetype_ != &::google::protobuf::internal::kEmptyString) {
    delete requestedvaluetype_;
  }
  if (this != default_instance_) {
    delete _id_;
  }
}

void CenterOfGravityType::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CenterOfGravityType::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CenterOfGravityType_descriptor_;
}

const CenterOfGravityType& CenterOfGravityType::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AssemblyInterface_2eproto();
  return *default_instance_;
}

CenterOfGravityType* CenterOfGravityType::default_instance_ = NULL;

CenterOfGravityType* CenterOfGravityType::New() const {
  return new CenterOfGravityType;
}

void CenterOfGravityType::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_componentid()) {
      if (componentid_ != &::google::protobuf::internal::kEmptyString) {
        componentid_->clear();
      }
    }
    if (has_metricid()) {
      if (metricid_ != &::google::protobuf::internal::kEmptyString) {
        metricid_->clear();
      }
    }
    if (has_requestedvaluetype()) {
      if (requestedvaluetype_ != &::google::protobuf::internal::kEmptyString) {
        requestedvaluetype_->clear();
      }
    }
    if (has__id()) {
      if (_id_ != NULL) _id_->::edu::vanderbilt::isis::meta::ID::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CenterOfGravityType::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string ComponentID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_componentid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->componentid().data(), this->componentid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_MetricID;
        break;
      }

      // required string MetricID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_MetricID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_metricid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->metricid().data(), this->metricid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_RequestedValueType;
        break;
      }

      // required string RequestedValueType = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_RequestedValueType:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_requestedvaluetype()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->requestedvaluetype().data(), this->requestedvaluetype().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse__id;
        break;
      }

      // optional .edu.vanderbilt.isis.meta.ID _id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse__id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CenterOfGravityType::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string ComponentID = 1;
  if (has_componentid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->componentid().data(), this->componentid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->componentid(), output);
  }

  // required string MetricID = 2;
  if (has_metricid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->metricid().data(), this->metricid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->metricid(), output);
  }

  // required string RequestedValueType = 3;
  if (has_requestedvaluetype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->requestedvaluetype().data(), this->requestedvaluetype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->requestedvaluetype(), output);
  }

  // optional .edu.vanderbilt.isis.meta.ID _id = 4;
  if (has__id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CenterOfGravityType::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string ComponentID = 1;
  if (has_componentid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->componentid().data(), this->componentid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->componentid(), target);
  }

  // required string MetricID = 2;
  if (has_metricid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->metricid().data(), this->metricid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->metricid(), target);
  }

  // required string RequestedValueType = 3;
  if (has_requestedvaluetype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->requestedvaluetype().data(), this->requestedvaluetype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->requestedvaluetype(), target);
  }

  // optional .edu.vanderbilt.isis.meta.ID _id = 4;
  if (has__id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CenterOfGravityType::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string ComponentID = 1;
    if (has_componentid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->componentid());
    }

    // required string MetricID = 2;
    if (has_metricid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->metricid());
    }

    // required string RequestedValueType = 3;
    if (has_requestedvaluetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->requestedvaluetype());
    }

    // optional .edu.vanderbilt.isis.meta.ID _id = 4;
    if (has__id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CenterOfGravityType::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CenterOfGravityType* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CenterOfGravityType*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CenterOfGravityType::MergeFrom(const CenterOfGravityType& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_componentid()) {
      set_componentid(from.componentid());
    }
    if (from.has_metricid()) {
      set_metricid(from.metricid());
    }
    if (from.has_requestedvaluetype()) {
      set_requestedvaluetype(from.requestedvaluetype());
    }
    if (from.has__id()) {
      mutable__id()->::edu::vanderbilt::isis::meta::ID::MergeFrom(from._id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CenterOfGravityType::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CenterOfGravityType::CopyFrom(const CenterOfGravityType& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CenterOfGravityType::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has__id()) {
    if (!this->_id().IsInitialized()) return false;
  }
  return true;
}

void CenterOfGravityType::Swap(CenterOfGravityType* other) {
  if (other != this) {
    std::swap(componentid_, other->componentid_);
    std::swap(metricid_, other->metricid_);
    std::swap(requestedvaluetype_, other->requestedvaluetype_);
    std::swap(_id_, other->_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CenterOfGravityType::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CenterOfGravityType_descriptor_;
  metadata.reflection = CenterOfGravityType_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ComponentType::kMetricsFieldNumber;
const int ComponentType::kComponentIDFieldNumber;
const int ComponentType::kInfiniteCycleFieldNumber;
const int ComponentType::kIdFieldNumber;
#endif  // !_MSC_VER

ComponentType::ComponentType()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ComponentType::InitAsDefaultInstance() {
  metrics_ = const_cast< ::edu::vanderbilt::isis::meta::MetricsType*>(&::edu::vanderbilt::isis::meta::MetricsType::default_instance());
  _id_ = const_cast< ::edu::vanderbilt::isis::meta::ID*>(&::edu::vanderbilt::isis::meta::ID::default_instance());
}

ComponentType::ComponentType(const ComponentType& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ComponentType::SharedCtor() {
  _cached_size_ = 0;
  metrics_ = NULL;
  componentid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  infinitecycle_ = false;
  _id_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ComponentType::~ComponentType() {
  SharedDtor();
}

void ComponentType::SharedDtor() {
  if (componentid_ != &::google::protobuf::internal::kEmptyString) {
    delete componentid_;
  }
  if (this != default_instance_) {
    delete metrics_;
    delete _id_;
  }
}

void ComponentType::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ComponentType::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ComponentType_descriptor_;
}

const ComponentType& ComponentType::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AssemblyInterface_2eproto();
  return *default_instance_;
}

ComponentType* ComponentType::default_instance_ = NULL;

ComponentType* ComponentType::New() const {
  return new ComponentType;
}

void ComponentType::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_metrics()) {
      if (metrics_ != NULL) metrics_->::edu::vanderbilt::isis::meta::MetricsType::Clear();
    }
    if (has_componentid()) {
      if (componentid_ != &::google::protobuf::internal::kEmptyString) {
        componentid_->clear();
      }
    }
    infinitecycle_ = false;
    if (has__id()) {
      if (_id_ != NULL) _id_->::edu::vanderbilt::isis::meta::ID::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ComponentType::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .edu.vanderbilt.isis.meta.MetricsType Metrics = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_metrics()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_ComponentID;
        break;
      }

      // required string ComponentID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ComponentID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_componentid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->componentid().data(), this->componentid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_InfiniteCycle;
        break;
      }

      // required bool InfiniteCycle = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_InfiniteCycle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &infinitecycle_)));
          set_has_infinitecycle();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse__id;
        break;
      }

      // optional .edu.vanderbilt.isis.meta.ID _id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse__id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ComponentType::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .edu.vanderbilt.isis.meta.MetricsType Metrics = 1;
  if (has_metrics()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->metrics(), output);
  }

  // required string ComponentID = 2;
  if (has_componentid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->componentid().data(), this->componentid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->componentid(), output);
  }

  // required bool InfiniteCycle = 3;
  if (has_infinitecycle()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->infinitecycle(), output);
  }

  // optional .edu.vanderbilt.isis.meta.ID _id = 4;
  if (has__id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ComponentType::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .edu.vanderbilt.isis.meta.MetricsType Metrics = 1;
  if (has_metrics()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->metrics(), target);
  }

  // required string ComponentID = 2;
  if (has_componentid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->componentid().data(), this->componentid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->componentid(), target);
  }

  // required bool InfiniteCycle = 3;
  if (has_infinitecycle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->infinitecycle(), target);
  }

  // optional .edu.vanderbilt.isis.meta.ID _id = 4;
  if (has__id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ComponentType::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .edu.vanderbilt.isis.meta.MetricsType Metrics = 1;
    if (has_metrics()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->metrics());
    }

    // required string ComponentID = 2;
    if (has_componentid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->componentid());
    }

    // required bool InfiniteCycle = 3;
    if (has_infinitecycle()) {
      total_size += 1 + 1;
    }

    // optional .edu.vanderbilt.isis.meta.ID _id = 4;
    if (has__id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ComponentType::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ComponentType* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ComponentType*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ComponentType::MergeFrom(const ComponentType& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_metrics()) {
      mutable_metrics()->::edu::vanderbilt::isis::meta::MetricsType::MergeFrom(from.metrics());
    }
    if (from.has_componentid()) {
      set_componentid(from.componentid());
    }
    if (from.has_infinitecycle()) {
      set_infinitecycle(from.infinitecycle());
    }
    if (from.has__id()) {
      mutable__id()->::edu::vanderbilt::isis::meta::ID::MergeFrom(from._id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ComponentType::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ComponentType::CopyFrom(const ComponentType& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ComponentType::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000006) != 0x00000006) return false;

  if (has_metrics()) {
    if (!this->metrics().IsInitialized()) return false;
  }
  if (has__id()) {
    if (!this->_id().IsInitialized()) return false;
  }
  return true;
}

void ComponentType::Swap(ComponentType* other) {
  if (other != this) {
    std::swap(metrics_, other->metrics_);
    std::swap(componentid_, other->componentid_);
    std::swap(infinitecycle_, other->infinitecycle_);
    std::swap(_id_, other->_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ComponentType::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ComponentType_descriptor_;
  metadata.reflection = ComponentType_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ComputationsType::kBoundingBoxFieldNumber;
const int ComputationsType::kCenterOfGravityFieldNumber;
const int ComputationsType::kMassFieldNumber;
const int ComputationsType::kPointCoordinatesFieldNumber;
const int ComputationsType::kIdFieldNumber;
#endif  // !_MSC_VER

ComputationsType::ComputationsType()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ComputationsType::InitAsDefaultInstance() {
  _id_ = const_cast< ::edu::vanderbilt::isis::meta::ID*>(&::edu::vanderbilt::isis::meta::ID::default_instance());
}

ComputationsType::ComputationsType(const ComputationsType& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ComputationsType::SharedCtor() {
  _cached_size_ = 0;
  _id_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ComputationsType::~ComputationsType() {
  SharedDtor();
}

void ComputationsType::SharedDtor() {
  if (this != default_instance_) {
    delete _id_;
  }
}

void ComputationsType::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ComputationsType::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ComputationsType_descriptor_;
}

const ComputationsType& ComputationsType::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AssemblyInterface_2eproto();
  return *default_instance_;
}

ComputationsType* ComputationsType::default_instance_ = NULL;

ComputationsType* ComputationsType::New() const {
  return new ComputationsType;
}

void ComputationsType::Clear() {
  if (_has_bits_[4 / 32] & (0xffu << (4 % 32))) {
    if (has__id()) {
      if (_id_ != NULL) _id_->::edu::vanderbilt::isis::meta::ID::Clear();
    }
  }
  boundingbox_.Clear();
  centerofgravity_.Clear();
  mass_.Clear();
  pointcoordinates_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ComputationsType::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .edu.vanderbilt.isis.meta.BoundingBoxType BoundingBox = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_BoundingBox:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_boundingbox()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_BoundingBox;
        if (input->ExpectTag(18)) goto parse_CenterOfGravity;
        break;
      }

      // repeated .edu.vanderbilt.isis.meta.CenterOfGravityType CenterOfGravity = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_CenterOfGravity:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_centerofgravity()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_CenterOfGravity;
        if (input->ExpectTag(26)) goto parse_Mass;
        break;
      }

      // repeated .edu.vanderbilt.isis.meta.MassType Mass = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Mass:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_mass()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_Mass;
        if (input->ExpectTag(34)) goto parse_PointCoordinates;
        break;
      }

      // repeated .edu.vanderbilt.isis.meta.PointCoordinatesType PointCoordinates = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_PointCoordinates:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_pointcoordinates()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_PointCoordinates;
        if (input->ExpectTag(42)) goto parse__id;
        break;
      }

      // optional .edu.vanderbilt.isis.meta.ID _id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse__id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ComputationsType::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .edu.vanderbilt.isis.meta.BoundingBoxType BoundingBox = 1;
  for (int i = 0; i < this->boundingbox_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->boundingbox(i), output);
  }

  // repeated .edu.vanderbilt.isis.meta.CenterOfGravityType CenterOfGravity = 2;
  for (int i = 0; i < this->centerofgravity_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->centerofgravity(i), output);
  }

  // repeated .edu.vanderbilt.isis.meta.MassType Mass = 3;
  for (int i = 0; i < this->mass_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->mass(i), output);
  }

  // repeated .edu.vanderbilt.isis.meta.PointCoordinatesType PointCoordinates = 4;
  for (int i = 0; i < this->pointcoordinates_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->pointcoordinates(i), output);
  }

  // optional .edu.vanderbilt.isis.meta.ID _id = 5;
  if (has__id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ComputationsType::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .edu.vanderbilt.isis.meta.BoundingBoxType BoundingBox = 1;
  for (int i = 0; i < this->boundingbox_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->boundingbox(i), target);
  }

  // repeated .edu.vanderbilt.isis.meta.CenterOfGravityType CenterOfGravity = 2;
  for (int i = 0; i < this->centerofgravity_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->centerofgravity(i), target);
  }

  // repeated .edu.vanderbilt.isis.meta.MassType Mass = 3;
  for (int i = 0; i < this->mass_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->mass(i), target);
  }

  // repeated .edu.vanderbilt.isis.meta.PointCoordinatesType PointCoordinates = 4;
  for (int i = 0; i < this->pointcoordinates_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->pointcoordinates(i), target);
  }

  // optional .edu.vanderbilt.isis.meta.ID _id = 5;
  if (has__id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ComputationsType::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[4 / 32] & (0xffu << (4 % 32))) {
    // optional .edu.vanderbilt.isis.meta.ID _id = 5;
    if (has__id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_id());
    }

  }
  // repeated .edu.vanderbilt.isis.meta.BoundingBoxType BoundingBox = 1;
  total_size += 1 * this->boundingbox_size();
  for (int i = 0; i < this->boundingbox_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->boundingbox(i));
  }

  // repeated .edu.vanderbilt.isis.meta.CenterOfGravityType CenterOfGravity = 2;
  total_size += 1 * this->centerofgravity_size();
  for (int i = 0; i < this->centerofgravity_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->centerofgravity(i));
  }

  // repeated .edu.vanderbilt.isis.meta.MassType Mass = 3;
  total_size += 1 * this->mass_size();
  for (int i = 0; i < this->mass_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->mass(i));
  }

  // repeated .edu.vanderbilt.isis.meta.PointCoordinatesType PointCoordinates = 4;
  total_size += 1 * this->pointcoordinates_size();
  for (int i = 0; i < this->pointcoordinates_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->pointcoordinates(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ComputationsType::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ComputationsType* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ComputationsType*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ComputationsType::MergeFrom(const ComputationsType& from) {
  GOOGLE_CHECK_NE(&from, this);
  boundingbox_.MergeFrom(from.boundingbox_);
  centerofgravity_.MergeFrom(from.centerofgravity_);
  mass_.MergeFrom(from.mass_);
  pointcoordinates_.MergeFrom(from.pointcoordinates_);
  if (from._has_bits_[4 / 32] & (0xffu << (4 % 32))) {
    if (from.has__id()) {
      mutable__id()->::edu::vanderbilt::isis::meta::ID::MergeFrom(from._id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ComputationsType::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ComputationsType::CopyFrom(const ComputationsType& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ComputationsType::IsInitialized() const {

  for (int i = 0; i < boundingbox_size(); i++) {
    if (!this->boundingbox(i).IsInitialized()) return false;
  }
  for (int i = 0; i < centerofgravity_size(); i++) {
    if (!this->centerofgravity(i).IsInitialized()) return false;
  }
  for (int i = 0; i < mass_size(); i++) {
    if (!this->mass(i).IsInitialized()) return false;
  }
  for (int i = 0; i < pointcoordinates_size(); i++) {
    if (!this->pointcoordinates(i).IsInitialized()) return false;
  }
  if (has__id()) {
    if (!this->_id().IsInitialized()) return false;
  }
  return true;
}

void ComputationsType::Swap(ComputationsType* other) {
  if (other != this) {
    boundingbox_.Swap(&other->boundingbox_);
    centerofgravity_.Swap(&other->centerofgravity_);
    mass_.Swap(&other->mass_);
    pointcoordinates_.Swap(&other->pointcoordinates_);
    std::swap(_id_, other->_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ComputationsType::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ComputationsType_descriptor_;
  metadata.reflection = ComputationsType_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ConditionType::kNameFieldNumber;
const int ConditionType::kUnitsFieldNumber;
const int ConditionType::kValueFieldNumber;
const int ConditionType::kIdFieldNumber;
#endif  // !_MSC_VER

ConditionType::ConditionType()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ConditionType::InitAsDefaultInstance() {
  _id_ = const_cast< ::edu::vanderbilt::isis::meta::ID*>(&::edu::vanderbilt::isis::meta::ID::default_instance());
}

ConditionType::ConditionType(const ConditionType& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ConditionType::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  units_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  value_ = 0;
  _id_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ConditionType::~ConditionType() {
  SharedDtor();
}

void ConditionType::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (units_ != &::google::protobuf::internal::kEmptyString) {
    delete units_;
  }
  if (this != default_instance_) {
    delete _id_;
  }
}

void ConditionType::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ConditionType::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ConditionType_descriptor_;
}

const ConditionType& ConditionType::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AssemblyInterface_2eproto();
  return *default_instance_;
}

ConditionType* ConditionType::default_instance_ = NULL;

ConditionType* ConditionType::New() const {
  return new ConditionType;
}

void ConditionType::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_units()) {
      if (units_ != &::google::protobuf::internal::kEmptyString) {
        units_->clear();
      }
    }
    value_ = 0;
    if (has__id()) {
      if (_id_ != NULL) _id_->::edu::vanderbilt::isis::meta::ID::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ConditionType::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string Name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_Units;
        break;
      }

      // required string Units = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Units:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_units()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->units().data(), this->units().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_Value;
        break;
      }

      // required double Value = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_Value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse__id;
        break;
      }

      // optional .edu.vanderbilt.isis.meta.ID _id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse__id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ConditionType::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string Name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  // required string Units = 2;
  if (has_units()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->units().data(), this->units().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->units(), output);
  }

  // required double Value = 3;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->value(), output);
  }

  // optional .edu.vanderbilt.isis.meta.ID _id = 4;
  if (has__id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ConditionType::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string Name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // required string Units = 2;
  if (has_units()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->units().data(), this->units().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->units(), target);
  }

  // required double Value = 3;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->value(), target);
  }

  // optional .edu.vanderbilt.isis.meta.ID _id = 4;
  if (has__id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ConditionType::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string Name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required string Units = 2;
    if (has_units()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->units());
    }

    // required double Value = 3;
    if (has_value()) {
      total_size += 1 + 8;
    }

    // optional .edu.vanderbilt.isis.meta.ID _id = 4;
    if (has__id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ConditionType::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ConditionType* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ConditionType*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ConditionType::MergeFrom(const ConditionType& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_units()) {
      set_units(from.units());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
    if (from.has__id()) {
      mutable__id()->::edu::vanderbilt::isis::meta::ID::MergeFrom(from._id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ConditionType::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConditionType::CopyFrom(const ConditionType& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConditionType::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has__id()) {
    if (!this->_id().IsInitialized()) return false;
  }
  return true;
}

void ConditionType::Swap(ConditionType* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(units_, other->units_);
    std::swap(value_, other->value_);
    std::swap(_id_, other->_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ConditionType::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ConditionType_descriptor_;
  metadata.reflection = ConditionType_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ConditionsType::kConditionFieldNumber;
const int ConditionsType::kIdFieldNumber;
#endif  // !_MSC_VER

ConditionsType::ConditionsType()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ConditionsType::InitAsDefaultInstance() {
  _id_ = const_cast< ::edu::vanderbilt::isis::meta::ID*>(&::edu::vanderbilt::isis::meta::ID::default_instance());
}

ConditionsType::ConditionsType(const ConditionsType& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ConditionsType::SharedCtor() {
  _cached_size_ = 0;
  _id_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ConditionsType::~ConditionsType() {
  SharedDtor();
}

void ConditionsType::SharedDtor() {
  if (this != default_instance_) {
    delete _id_;
  }
}

void ConditionsType::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ConditionsType::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ConditionsType_descriptor_;
}

const ConditionsType& ConditionsType::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AssemblyInterface_2eproto();
  return *default_instance_;
}

ConditionsType* ConditionsType::default_instance_ = NULL;

ConditionsType* ConditionsType::New() const {
  return new ConditionsType;
}

void ConditionsType::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (has__id()) {
      if (_id_ != NULL) _id_->::edu::vanderbilt::isis::meta::ID::Clear();
    }
  }
  condition_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ConditionsType::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .edu.vanderbilt.isis.meta.ConditionType Condition = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Condition:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_condition()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_Condition;
        if (input->ExpectTag(18)) goto parse__id;
        break;
      }

      // optional .edu.vanderbilt.isis.meta.ID _id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse__id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ConditionsType::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .edu.vanderbilt.isis.meta.ConditionType Condition = 1;
  for (int i = 0; i < this->condition_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->condition(i), output);
  }

  // optional .edu.vanderbilt.isis.meta.ID _id = 2;
  if (has__id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ConditionsType::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .edu.vanderbilt.isis.meta.ConditionType Condition = 1;
  for (int i = 0; i < this->condition_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->condition(i), target);
  }

  // optional .edu.vanderbilt.isis.meta.ID _id = 2;
  if (has__id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ConditionsType::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional .edu.vanderbilt.isis.meta.ID _id = 2;
    if (has__id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_id());
    }

  }
  // repeated .edu.vanderbilt.isis.meta.ConditionType Condition = 1;
  total_size += 1 * this->condition_size();
  for (int i = 0; i < this->condition_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->condition(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ConditionsType::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ConditionsType* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ConditionsType*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ConditionsType::MergeFrom(const ConditionsType& from) {
  GOOGLE_CHECK_NE(&from, this);
  condition_.MergeFrom(from.condition_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has__id()) {
      mutable__id()->::edu::vanderbilt::isis::meta::ID::MergeFrom(from._id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ConditionsType::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConditionsType::CopyFrom(const ConditionsType& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConditionsType::IsInitialized() const {

  for (int i = 0; i < condition_size(); i++) {
    if (!this->condition(i).IsInitialized()) return false;
  }
  if (has__id()) {
    if (!this->_id().IsInitialized()) return false;
  }
  return true;
}

void ConditionsType::Swap(ConditionsType* other) {
  if (other != this) {
    condition_.Swap(&other->condition_);
    std::swap(_id_, other->_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ConditionsType::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ConditionsType_descriptor_;
  metadata.reflection = ConditionsType_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ConstraintFeatureType::kComponentIDFieldNumber;
const int ConstraintFeatureType::kFeatureNameFieldNumber;
const int ConstraintFeatureType::kFeatureOrientationTypeFieldNumber;
const int ConstraintFeatureType::kIdFieldNumber;
#endif  // !_MSC_VER

ConstraintFeatureType::ConstraintFeatureType()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ConstraintFeatureType::InitAsDefaultInstance() {
  _id_ = const_cast< ::edu::vanderbilt::isis::meta::ID*>(&::edu::vanderbilt::isis::meta::ID::default_instance());
}

ConstraintFeatureType::ConstraintFeatureType(const ConstraintFeatureType& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ConstraintFeatureType::SharedCtor() {
  _cached_size_ = 0;
  componentid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  featurename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  featureorientationtype_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  _id_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ConstraintFeatureType::~ConstraintFeatureType() {
  SharedDtor();
}

void ConstraintFeatureType::SharedDtor() {
  if (componentid_ != &::google::protobuf::internal::kEmptyString) {
    delete componentid_;
  }
  if (featurename_ != &::google::protobuf::internal::kEmptyString) {
    delete featurename_;
  }
  if (featureorientationtype_ != &::google::protobuf::internal::kEmptyString) {
    delete featureorientationtype_;
  }
  if (this != default_instance_) {
    delete _id_;
  }
}

void ConstraintFeatureType::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ConstraintFeatureType::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ConstraintFeatureType_descriptor_;
}

const ConstraintFeatureType& ConstraintFeatureType::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AssemblyInterface_2eproto();
  return *default_instance_;
}

ConstraintFeatureType* ConstraintFeatureType::default_instance_ = NULL;

ConstraintFeatureType* ConstraintFeatureType::New() const {
  return new ConstraintFeatureType;
}

void ConstraintFeatureType::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_componentid()) {
      if (componentid_ != &::google::protobuf::internal::kEmptyString) {
        componentid_->clear();
      }
    }
    if (has_featurename()) {
      if (featurename_ != &::google::protobuf::internal::kEmptyString) {
        featurename_->clear();
      }
    }
    if (has_featureorientationtype()) {
      if (featureorientationtype_ != &::google::protobuf::internal::kEmptyString) {
        featureorientationtype_->clear();
      }
    }
    if (has__id()) {
      if (_id_ != NULL) _id_->::edu::vanderbilt::isis::meta::ID::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ConstraintFeatureType::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string ComponentID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_componentid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->componentid().data(), this->componentid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_FeatureName;
        break;
      }

      // required string FeatureName = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_FeatureName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_featurename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->featurename().data(), this->featurename().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_FeatureOrientationType;
        break;
      }

      // required string FeatureOrientationType = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_FeatureOrientationType:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_featureorientationtype()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->featureorientationtype().data(), this->featureorientationtype().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse__id;
        break;
      }

      // optional .edu.vanderbilt.isis.meta.ID _id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse__id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ConstraintFeatureType::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string ComponentID = 1;
  if (has_componentid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->componentid().data(), this->componentid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->componentid(), output);
  }

  // required string FeatureName = 2;
  if (has_featurename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->featurename().data(), this->featurename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->featurename(), output);
  }

  // required string FeatureOrientationType = 3;
  if (has_featureorientationtype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->featureorientationtype().data(), this->featureorientationtype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->featureorientationtype(), output);
  }

  // optional .edu.vanderbilt.isis.meta.ID _id = 4;
  if (has__id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ConstraintFeatureType::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string ComponentID = 1;
  if (has_componentid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->componentid().data(), this->componentid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->componentid(), target);
  }

  // required string FeatureName = 2;
  if (has_featurename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->featurename().data(), this->featurename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->featurename(), target);
  }

  // required string FeatureOrientationType = 3;
  if (has_featureorientationtype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->featureorientationtype().data(), this->featureorientationtype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->featureorientationtype(), target);
  }

  // optional .edu.vanderbilt.isis.meta.ID _id = 4;
  if (has__id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ConstraintFeatureType::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string ComponentID = 1;
    if (has_componentid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->componentid());
    }

    // required string FeatureName = 2;
    if (has_featurename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->featurename());
    }

    // required string FeatureOrientationType = 3;
    if (has_featureorientationtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->featureorientationtype());
    }

    // optional .edu.vanderbilt.isis.meta.ID _id = 4;
    if (has__id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ConstraintFeatureType::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ConstraintFeatureType* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ConstraintFeatureType*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ConstraintFeatureType::MergeFrom(const ConstraintFeatureType& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_componentid()) {
      set_componentid(from.componentid());
    }
    if (from.has_featurename()) {
      set_featurename(from.featurename());
    }
    if (from.has_featureorientationtype()) {
      set_featureorientationtype(from.featureorientationtype());
    }
    if (from.has__id()) {
      mutable__id()->::edu::vanderbilt::isis::meta::ID::MergeFrom(from._id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ConstraintFeatureType::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConstraintFeatureType::CopyFrom(const ConstraintFeatureType& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConstraintFeatureType::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has__id()) {
    if (!this->_id().IsInitialized()) return false;
  }
  return true;
}

void ConstraintFeatureType::Swap(ConstraintFeatureType* other) {
  if (other != this) {
    std::swap(componentid_, other->componentid_);
    std::swap(featurename_, other->featurename_);
    std::swap(featureorientationtype_, other->featureorientationtype_);
    std::swap(_id_, other->_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ConstraintFeatureType::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ConstraintFeatureType_descriptor_;
  metadata.reflection = ConstraintFeatureType_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ConstraintOffsetType::kUnitsFieldNumber;
const int ConstraintOffsetType::kOffsetAlignmentTypeFieldNumber;
const int ConstraintOffsetType::kValueFieldNumber;
const int ConstraintOffsetType::kIdFieldNumber;
#endif  // !_MSC_VER

ConstraintOffsetType::ConstraintOffsetType()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ConstraintOffsetType::InitAsDefaultInstance() {
  units_ = const_cast< ::edu::vanderbilt::isis::meta::UnitsType*>(&::edu::vanderbilt::isis::meta::UnitsType::default_instance());
  _id_ = const_cast< ::edu::vanderbilt::isis::meta::ID*>(&::edu::vanderbilt::isis::meta::ID::default_instance());
}

ConstraintOffsetType::ConstraintOffsetType(const ConstraintOffsetType& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ConstraintOffsetType::SharedCtor() {
  _cached_size_ = 0;
  units_ = NULL;
  offsetalignmenttype_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  value_ = 0;
  _id_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ConstraintOffsetType::~ConstraintOffsetType() {
  SharedDtor();
}

void ConstraintOffsetType::SharedDtor() {
  if (offsetalignmenttype_ != &::google::protobuf::internal::kEmptyString) {
    delete offsetalignmenttype_;
  }
  if (this != default_instance_) {
    delete units_;
    delete _id_;
  }
}

void ConstraintOffsetType::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ConstraintOffsetType::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ConstraintOffsetType_descriptor_;
}

const ConstraintOffsetType& ConstraintOffsetType::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AssemblyInterface_2eproto();
  return *default_instance_;
}

ConstraintOffsetType* ConstraintOffsetType::default_instance_ = NULL;

ConstraintOffsetType* ConstraintOffsetType::New() const {
  return new ConstraintOffsetType;
}

void ConstraintOffsetType::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_units()) {
      if (units_ != NULL) units_->::edu::vanderbilt::isis::meta::UnitsType::Clear();
    }
    if (has_offsetalignmenttype()) {
      if (offsetalignmenttype_ != &::google::protobuf::internal::kEmptyString) {
        offsetalignmenttype_->clear();
      }
    }
    value_ = 0;
    if (has__id()) {
      if (_id_ != NULL) _id_->::edu::vanderbilt::isis::meta::ID::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ConstraintOffsetType::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .edu.vanderbilt.isis.meta.UnitsType Units = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_units()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_OffsetAlignmentType;
        break;
      }

      // required string OffsetAlignmentType = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_OffsetAlignmentType:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_offsetalignmenttype()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->offsetalignmenttype().data(), this->offsetalignmenttype().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_Value;
        break;
      }

      // required double Value = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_Value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse__id;
        break;
      }

      // optional .edu.vanderbilt.isis.meta.ID _id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse__id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ConstraintOffsetType::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .edu.vanderbilt.isis.meta.UnitsType Units = 1;
  if (has_units()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->units(), output);
  }

  // required string OffsetAlignmentType = 2;
  if (has_offsetalignmenttype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->offsetalignmenttype().data(), this->offsetalignmenttype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->offsetalignmenttype(), output);
  }

  // required double Value = 3;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->value(), output);
  }

  // optional .edu.vanderbilt.isis.meta.ID _id = 4;
  if (has__id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ConstraintOffsetType::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .edu.vanderbilt.isis.meta.UnitsType Units = 1;
  if (has_units()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->units(), target);
  }

  // required string OffsetAlignmentType = 2;
  if (has_offsetalignmenttype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->offsetalignmenttype().data(), this->offsetalignmenttype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->offsetalignmenttype(), target);
  }

  // required double Value = 3;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->value(), target);
  }

  // optional .edu.vanderbilt.isis.meta.ID _id = 4;
  if (has__id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ConstraintOffsetType::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .edu.vanderbilt.isis.meta.UnitsType Units = 1;
    if (has_units()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->units());
    }

    // required string OffsetAlignmentType = 2;
    if (has_offsetalignmenttype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->offsetalignmenttype());
    }

    // required double Value = 3;
    if (has_value()) {
      total_size += 1 + 8;
    }

    // optional .edu.vanderbilt.isis.meta.ID _id = 4;
    if (has__id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ConstraintOffsetType::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ConstraintOffsetType* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ConstraintOffsetType*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ConstraintOffsetType::MergeFrom(const ConstraintOffsetType& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_units()) {
      mutable_units()->::edu::vanderbilt::isis::meta::UnitsType::MergeFrom(from.units());
    }
    if (from.has_offsetalignmenttype()) {
      set_offsetalignmenttype(from.offsetalignmenttype());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
    if (from.has__id()) {
      mutable__id()->::edu::vanderbilt::isis::meta::ID::MergeFrom(from._id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ConstraintOffsetType::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConstraintOffsetType::CopyFrom(const ConstraintOffsetType& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConstraintOffsetType::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000006) != 0x00000006) return false;

  if (has_units()) {
    if (!this->units().IsInitialized()) return false;
  }
  if (has__id()) {
    if (!this->_id().IsInitialized()) return false;
  }
  return true;
}

void ConstraintOffsetType::Swap(ConstraintOffsetType* other) {
  if (other != this) {
    std::swap(units_, other->units_);
    std::swap(offsetalignmenttype_, other->offsetalignmenttype_);
    std::swap(value_, other->value_);
    std::swap(_id_, other->_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ConstraintOffsetType::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ConstraintOffsetType_descriptor_;
  metadata.reflection = ConstraintOffsetType_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ConstraintType::kPairFieldNumber;
const int ConstraintType::kIdFieldNumber;
#endif  // !_MSC_VER

ConstraintType::ConstraintType()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ConstraintType::InitAsDefaultInstance() {
  _id_ = const_cast< ::edu::vanderbilt::isis::meta::ID*>(&::edu::vanderbilt::isis::meta::ID::default_instance());
}

ConstraintType::ConstraintType(const ConstraintType& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ConstraintType::SharedCtor() {
  _cached_size_ = 0;
  _id_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ConstraintType::~ConstraintType() {
  SharedDtor();
}

void ConstraintType::SharedDtor() {
  if (this != default_instance_) {
    delete _id_;
  }
}

void ConstraintType::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ConstraintType::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ConstraintType_descriptor_;
}

const ConstraintType& ConstraintType::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AssemblyInterface_2eproto();
  return *default_instance_;
}

ConstraintType* ConstraintType::default_instance_ = NULL;

ConstraintType* ConstraintType::New() const {
  return new ConstraintType;
}

void ConstraintType::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (has__id()) {
      if (_id_ != NULL) _id_->::edu::vanderbilt::isis::meta::ID::Clear();
    }
  }
  pair_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ConstraintType::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .edu.vanderbilt.isis.meta.PairType Pair = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Pair:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_pair()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_Pair;
        if (input->ExpectTag(18)) goto parse__id;
        break;
      }

      // optional .edu.vanderbilt.isis.meta.ID _id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse__id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ConstraintType::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .edu.vanderbilt.isis.meta.PairType Pair = 1;
  for (int i = 0; i < this->pair_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->pair(i), output);
  }

  // optional .edu.vanderbilt.isis.meta.ID _id = 2;
  if (has__id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ConstraintType::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .edu.vanderbilt.isis.meta.PairType Pair = 1;
  for (int i = 0; i < this->pair_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->pair(i), target);
  }

  // optional .edu.vanderbilt.isis.meta.ID _id = 2;
  if (has__id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ConstraintType::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional .edu.vanderbilt.isis.meta.ID _id = 2;
    if (has__id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_id());
    }

  }
  // repeated .edu.vanderbilt.isis.meta.PairType Pair = 1;
  total_size += 1 * this->pair_size();
  for (int i = 0; i < this->pair_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->pair(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ConstraintType::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ConstraintType* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ConstraintType*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ConstraintType::MergeFrom(const ConstraintType& from) {
  GOOGLE_CHECK_NE(&from, this);
  pair_.MergeFrom(from.pair_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has__id()) {
      mutable__id()->::edu::vanderbilt::isis::meta::ID::MergeFrom(from._id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ConstraintType::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConstraintType::CopyFrom(const ConstraintType& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConstraintType::IsInitialized() const {

  for (int i = 0; i < pair_size(); i++) {
    if (!this->pair(i).IsInitialized()) return false;
  }
  if (has__id()) {
    if (!this->_id().IsInitialized()) return false;
  }
  return true;
}

void ConstraintType::Swap(ConstraintType* other) {
  if (other != this) {
    pair_.Swap(&other->pair_);
    std::swap(_id_, other->_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ConstraintType::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ConstraintType_descriptor_;
  metadata.reflection = ConstraintType_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DataExchangeType::kSTEPFormatFieldNumber;
const int DataExchangeType::kIdFieldNumber;
#endif  // !_MSC_VER

DataExchangeType::DataExchangeType()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DataExchangeType::InitAsDefaultInstance() {
  _id_ = const_cast< ::edu::vanderbilt::isis::meta::ID*>(&::edu::vanderbilt::isis::meta::ID::default_instance());
}

DataExchangeType::DataExchangeType(const DataExchangeType& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DataExchangeType::SharedCtor() {
  _cached_size_ = 0;
  _id_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DataExchangeType::~DataExchangeType() {
  SharedDtor();
}

void DataExchangeType::SharedDtor() {
  if (this != default_instance_) {
    delete _id_;
  }
}

void DataExchangeType::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DataExchangeType::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DataExchangeType_descriptor_;
}

const DataExchangeType& DataExchangeType::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AssemblyInterface_2eproto();
  return *default_instance_;
}

DataExchangeType* DataExchangeType::default_instance_ = NULL;

DataExchangeType* DataExchangeType::New() const {
  return new DataExchangeType;
}

void DataExchangeType::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (has__id()) {
      if (_id_ != NULL) _id_->::edu::vanderbilt::isis::meta::ID::Clear();
    }
  }
  stepformat_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DataExchangeType::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .edu.vanderbilt.isis.meta.STEPFormatType STEPFormat = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_STEPFormat:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_stepformat()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_STEPFormat;
        if (input->ExpectTag(18)) goto parse__id;
        break;
      }

      // optional .edu.vanderbilt.isis.meta.ID _id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse__id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DataExchangeType::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .edu.vanderbilt.isis.meta.STEPFormatType STEPFormat = 1;
  for (int i = 0; i < this->stepformat_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->stepformat(i), output);
  }

  // optional .edu.vanderbilt.isis.meta.ID _id = 2;
  if (has__id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DataExchangeType::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .edu.vanderbilt.isis.meta.STEPFormatType STEPFormat = 1;
  for (int i = 0; i < this->stepformat_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->stepformat(i), target);
  }

  // optional .edu.vanderbilt.isis.meta.ID _id = 2;
  if (has__id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DataExchangeType::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional .edu.vanderbilt.isis.meta.ID _id = 2;
    if (has__id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_id());
    }

  }
  // repeated .edu.vanderbilt.isis.meta.STEPFormatType STEPFormat = 1;
  total_size += 1 * this->stepformat_size();
  for (int i = 0; i < this->stepformat_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->stepformat(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DataExchangeType::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DataExchangeType* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DataExchangeType*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DataExchangeType::MergeFrom(const DataExchangeType& from) {
  GOOGLE_CHECK_NE(&from, this);
  stepformat_.MergeFrom(from.stepformat_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has__id()) {
      mutable__id()->::edu::vanderbilt::isis::meta::ID::MergeFrom(from._id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DataExchangeType::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DataExchangeType::CopyFrom(const DataExchangeType& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DataExchangeType::IsInitialized() const {

  for (int i = 0; i < stepformat_size(); i++) {
    if (!this->stepformat(i).IsInitialized()) return false;
  }
  if (has__id()) {
    if (!this->_id().IsInitialized()) return false;
  }
  return true;
}

void DataExchangeType::Swap(DataExchangeType* other) {
  if (other != this) {
    stepformat_.Swap(&other->stepformat_);
    std::swap(_id_, other->_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DataExchangeType::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DataExchangeType_descriptor_;
  metadata.reflection = DataExchangeType_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DisplacementType::kRotationFieldNumber;
const int DisplacementType::kTranslationFieldNumber;
const int DisplacementType::kIdFieldNumber;
#endif  // !_MSC_VER

DisplacementType::DisplacementType()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DisplacementType::InitAsDefaultInstance() {
  rotation_ = const_cast< ::edu::vanderbilt::isis::meta::RotationType*>(&::edu::vanderbilt::isis::meta::RotationType::default_instance());
  translation_ = const_cast< ::edu::vanderbilt::isis::meta::TranslationType*>(&::edu::vanderbilt::isis::meta::TranslationType::default_instance());
  _id_ = const_cast< ::edu::vanderbilt::isis::meta::ID*>(&::edu::vanderbilt::isis::meta::ID::default_instance());
}

DisplacementType::DisplacementType(const DisplacementType& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DisplacementType::SharedCtor() {
  _cached_size_ = 0;
  rotation_ = NULL;
  translation_ = NULL;
  _id_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DisplacementType::~DisplacementType() {
  SharedDtor();
}

void DisplacementType::SharedDtor() {
  if (this != default_instance_) {
    delete rotation_;
    delete translation_;
    delete _id_;
  }
}

void DisplacementType::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DisplacementType::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DisplacementType_descriptor_;
}

const DisplacementType& DisplacementType::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AssemblyInterface_2eproto();
  return *default_instance_;
}

DisplacementType* DisplacementType::default_instance_ = NULL;

DisplacementType* DisplacementType::New() const {
  return new DisplacementType;
}

void DisplacementType::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_rotation()) {
      if (rotation_ != NULL) rotation_->::edu::vanderbilt::isis::meta::RotationType::Clear();
    }
    if (has_translation()) {
      if (translation_ != NULL) translation_->::edu::vanderbilt::isis::meta::TranslationType::Clear();
    }
    if (has__id()) {
      if (_id_ != NULL) _id_->::edu::vanderbilt::isis::meta::ID::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DisplacementType::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .edu.vanderbilt.isis.meta.RotationType Rotation = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rotation()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_Translation;
        break;
      }

      // required .edu.vanderbilt.isis.meta.TranslationType Translation = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Translation:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_translation()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse__id;
        break;
      }

      // optional .edu.vanderbilt.isis.meta.ID _id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse__id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DisplacementType::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .edu.vanderbilt.isis.meta.RotationType Rotation = 1;
  if (has_rotation()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->rotation(), output);
  }

  // required .edu.vanderbilt.isis.meta.TranslationType Translation = 2;
  if (has_translation()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->translation(), output);
  }

  // optional .edu.vanderbilt.isis.meta.ID _id = 3;
  if (has__id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DisplacementType::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .edu.vanderbilt.isis.meta.RotationType Rotation = 1;
  if (has_rotation()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->rotation(), target);
  }

  // required .edu.vanderbilt.isis.meta.TranslationType Translation = 2;
  if (has_translation()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->translation(), target);
  }

  // optional .edu.vanderbilt.isis.meta.ID _id = 3;
  if (has__id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DisplacementType::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .edu.vanderbilt.isis.meta.RotationType Rotation = 1;
    if (has_rotation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->rotation());
    }

    // required .edu.vanderbilt.isis.meta.TranslationType Translation = 2;
    if (has_translation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->translation());
    }

    // optional .edu.vanderbilt.isis.meta.ID _id = 3;
    if (has__id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DisplacementType::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DisplacementType* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DisplacementType*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DisplacementType::MergeFrom(const DisplacementType& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rotation()) {
      mutable_rotation()->::edu::vanderbilt::isis::meta::RotationType::MergeFrom(from.rotation());
    }
    if (from.has_translation()) {
      mutable_translation()->::edu::vanderbilt::isis::meta::TranslationType::MergeFrom(from.translation());
    }
    if (from.has__id()) {
      mutable__id()->::edu::vanderbilt::isis::meta::ID::MergeFrom(from._id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DisplacementType::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DisplacementType::CopyFrom(const DisplacementType& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DisplacementType::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_rotation()) {
    if (!this->rotation().IsInitialized()) return false;
  }
  if (has_translation()) {
    if (!this->translation().IsInitialized()) return false;
  }
  if (has__id()) {
    if (!this->_id().IsInitialized()) return false;
  }
  return true;
}

void DisplacementType::Swap(DisplacementType* other) {
  if (other != this) {
    std::swap(rotation_, other->rotation_);
    std::swap(translation_, other->translation_);
    std::swap(_id_, other->_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DisplacementType::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DisplacementType_descriptor_;
  metadata.reflection = DisplacementType_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FEAType::kAnalysisComponentsFieldNumber;
const int FEAType::kAnalysisConstraintsFieldNumber;
const int FEAType::kConditionsFieldNumber;
const int FEAType::kLoadsFieldNumber;
const int FEAType::kPartInterfacesFieldNumber;
const int FEAType::kSolversFieldNumber;
const int FEAType::kSurfaceTreatmentsFieldNumber;
const int FEAType::kAnalysisIDFieldNumber;
const int FEAType::kTypeFieldNumber;
const int FEAType::kIdFieldNumber;
#endif  // !_MSC_VER

FEAType::FEAType()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FEAType::InitAsDefaultInstance() {
  analysiscomponents_ = const_cast< ::edu::vanderbilt::isis::meta::AnalysisComponentsType*>(&::edu::vanderbilt::isis::meta::AnalysisComponentsType::default_instance());
  analysisconstraints_ = const_cast< ::edu::vanderbilt::isis::meta::AnalysisConstraintsType*>(&::edu::vanderbilt::isis::meta::AnalysisConstraintsType::default_instance());
  conditions_ = const_cast< ::edu::vanderbilt::isis::meta::ConditionsType*>(&::edu::vanderbilt::isis::meta::ConditionsType::default_instance());
  loads_ = const_cast< ::edu::vanderbilt::isis::meta::LoadsType*>(&::edu::vanderbilt::isis::meta::LoadsType::default_instance());
  partinterfaces_ = const_cast< ::edu::vanderbilt::isis::meta::PartInterfacesType*>(&::edu::vanderbilt::isis::meta::PartInterfacesType::default_instance());
  solvers_ = const_cast< ::edu::vanderbilt::isis::meta::SolversType*>(&::edu::vanderbilt::isis::meta::SolversType::default_instance());
  _id_ = const_cast< ::edu::vanderbilt::isis::meta::ID*>(&::edu::vanderbilt::isis::meta::ID::default_instance());
}

FEAType::FEAType(const FEAType& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FEAType::SharedCtor() {
  _cached_size_ = 0;
  analysiscomponents_ = NULL;
  analysisconstraints_ = NULL;
  conditions_ = NULL;
  loads_ = NULL;
  partinterfaces_ = NULL;
  solvers_ = NULL;
  analysisid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  _id_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FEAType::~FEAType() {
  SharedDtor();
}

void FEAType::SharedDtor() {
  if (analysisid_ != &::google::protobuf::internal::kEmptyString) {
    delete analysisid_;
  }
  if (type_ != &::google::protobuf::internal::kEmptyString) {
    delete type_;
  }
  if (this != default_instance_) {
    delete analysiscomponents_;
    delete analysisconstraints_;
    delete conditions_;
    delete loads_;
    delete partinterfaces_;
    delete solvers_;
    delete _id_;
  }
}

void FEAType::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FEAType::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FEAType_descriptor_;
}

const FEAType& FEAType::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AssemblyInterface_2eproto();
  return *default_instance_;
}

FEAType* FEAType::default_instance_ = NULL;

FEAType* FEAType::New() const {
  return new FEAType;
}

void FEAType::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_analysiscomponents()) {
      if (analysiscomponents_ != NULL) analysiscomponents_->::edu::vanderbilt::isis::meta::AnalysisComponentsType::Clear();
    }
    if (has_analysisconstraints()) {
      if (analysisconstraints_ != NULL) analysisconstraints_->::edu::vanderbilt::isis::meta::AnalysisConstraintsType::Clear();
    }
    if (has_conditions()) {
      if (conditions_ != NULL) conditions_->::edu::vanderbilt::isis::meta::ConditionsType::Clear();
    }
    if (has_loads()) {
      if (loads_ != NULL) loads_->::edu::vanderbilt::isis::meta::LoadsType::Clear();
    }
    if (has_partinterfaces()) {
      if (partinterfaces_ != NULL) partinterfaces_->::edu::vanderbilt::isis::meta::PartInterfacesType::Clear();
    }
    if (has_solvers()) {
      if (solvers_ != NULL) solvers_->::edu::vanderbilt::isis::meta::SolversType::Clear();
    }
    if (has_analysisid()) {
      if (analysisid_ != &::google::protobuf::internal::kEmptyString) {
        analysisid_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_type()) {
      if (type_ != &::google::protobuf::internal::kEmptyString) {
        type_->clear();
      }
    }
    if (has__id()) {
      if (_id_ != NULL) _id_->::edu::vanderbilt::isis::meta::ID::Clear();
    }
  }
  surfacetreatments_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FEAType::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .edu.vanderbilt.isis.meta.AnalysisComponentsType AnalysisComponents = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_analysiscomponents()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_AnalysisConstraints;
        break;
      }

      // optional .edu.vanderbilt.isis.meta.AnalysisConstraintsType AnalysisConstraints = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_AnalysisConstraints:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_analysisconstraints()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_Conditions;
        break;
      }

      // optional .edu.vanderbilt.isis.meta.ConditionsType Conditions = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Conditions:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_conditions()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_Loads;
        break;
      }

      // optional .edu.vanderbilt.isis.meta.LoadsType Loads = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Loads:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_loads()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_PartInterfaces;
        break;
      }

      // optional .edu.vanderbilt.isis.meta.PartInterfacesType PartInterfaces = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_PartInterfaces:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_partinterfaces()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_Solvers;
        break;
      }

      // required .edu.vanderbilt.isis.meta.SolversType Solvers = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Solvers:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_solvers()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_SurfaceTreatments;
        break;
      }

      // repeated .edu.vanderbilt.isis.meta.SurfaceTreatmentsType SurfaceTreatments = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_SurfaceTreatments:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_surfacetreatments()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_SurfaceTreatments;
        if (input->ExpectTag(66)) goto parse_AnalysisID;
        break;
      }

      // required string AnalysisID = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_AnalysisID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_analysisid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->analysisid().data(), this->analysisid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_Type;
        break;
      }

      // required string Type = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->type().data(), this->type().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse__id;
        break;
      }

      // optional .edu.vanderbilt.isis.meta.ID _id = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse__id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FEAType::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .edu.vanderbilt.isis.meta.AnalysisComponentsType AnalysisComponents = 1;
  if (has_analysiscomponents()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->analysiscomponents(), output);
  }

  // optional .edu.vanderbilt.isis.meta.AnalysisConstraintsType AnalysisConstraints = 2;
  if (has_analysisconstraints()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->analysisconstraints(), output);
  }

  // optional .edu.vanderbilt.isis.meta.ConditionsType Conditions = 3;
  if (has_conditions()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->conditions(), output);
  }

  // optional .edu.vanderbilt.isis.meta.LoadsType Loads = 4;
  if (has_loads()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->loads(), output);
  }

  // optional .edu.vanderbilt.isis.meta.PartInterfacesType PartInterfaces = 5;
  if (has_partinterfaces()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->partinterfaces(), output);
  }

  // required .edu.vanderbilt.isis.meta.SolversType Solvers = 6;
  if (has_solvers()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->solvers(), output);
  }

  // repeated .edu.vanderbilt.isis.meta.SurfaceTreatmentsType SurfaceTreatments = 7;
  for (int i = 0; i < this->surfacetreatments_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->surfacetreatments(i), output);
  }

  // required string AnalysisID = 8;
  if (has_analysisid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->analysisid().data(), this->analysisid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->analysisid(), output);
  }

  // required string Type = 9;
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->type(), output);
  }

  // optional .edu.vanderbilt.isis.meta.ID _id = 10;
  if (has__id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FEAType::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .edu.vanderbilt.isis.meta.AnalysisComponentsType AnalysisComponents = 1;
  if (has_analysiscomponents()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->analysiscomponents(), target);
  }

  // optional .edu.vanderbilt.isis.meta.AnalysisConstraintsType AnalysisConstraints = 2;
  if (has_analysisconstraints()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->analysisconstraints(), target);
  }

  // optional .edu.vanderbilt.isis.meta.ConditionsType Conditions = 3;
  if (has_conditions()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->conditions(), target);
  }

  // optional .edu.vanderbilt.isis.meta.LoadsType Loads = 4;
  if (has_loads()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->loads(), target);
  }

  // optional .edu.vanderbilt.isis.meta.PartInterfacesType PartInterfaces = 5;
  if (has_partinterfaces()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->partinterfaces(), target);
  }

  // required .edu.vanderbilt.isis.meta.SolversType Solvers = 6;
  if (has_solvers()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->solvers(), target);
  }

  // repeated .edu.vanderbilt.isis.meta.SurfaceTreatmentsType SurfaceTreatments = 7;
  for (int i = 0; i < this->surfacetreatments_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->surfacetreatments(i), target);
  }

  // required string AnalysisID = 8;
  if (has_analysisid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->analysisid().data(), this->analysisid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->analysisid(), target);
  }

  // required string Type = 9;
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->type(), target);
  }

  // optional .edu.vanderbilt.isis.meta.ID _id = 10;
  if (has__id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FEAType::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .edu.vanderbilt.isis.meta.AnalysisComponentsType AnalysisComponents = 1;
    if (has_analysiscomponents()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->analysiscomponents());
    }

    // optional .edu.vanderbilt.isis.meta.AnalysisConstraintsType AnalysisConstraints = 2;
    if (has_analysisconstraints()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->analysisconstraints());
    }

    // optional .edu.vanderbilt.isis.meta.ConditionsType Conditions = 3;
    if (has_conditions()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->conditions());
    }

    // optional .edu.vanderbilt.isis.meta.LoadsType Loads = 4;
    if (has_loads()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->loads());
    }

    // optional .edu.vanderbilt.isis.meta.PartInterfacesType PartInterfaces = 5;
    if (has_partinterfaces()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->partinterfaces());
    }

    // required .edu.vanderbilt.isis.meta.SolversType Solvers = 6;
    if (has_solvers()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->solvers());
    }

    // required string AnalysisID = 8;
    if (has_analysisid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->analysisid());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required string Type = 9;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->type());
    }

    // optional .edu.vanderbilt.isis.meta.ID _id = 10;
    if (has__id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_id());
    }

  }
  // repeated .edu.vanderbilt.isis.meta.SurfaceTreatmentsType SurfaceTreatments = 7;
  total_size += 1 * this->surfacetreatments_size();
  for (int i = 0; i < this->surfacetreatments_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->surfacetreatments(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FEAType::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FEAType* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FEAType*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FEAType::MergeFrom(const FEAType& from) {
  GOOGLE_CHECK_NE(&from, this);
  surfacetreatments_.MergeFrom(from.surfacetreatments_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_analysiscomponents()) {
      mutable_analysiscomponents()->::edu::vanderbilt::isis::meta::AnalysisComponentsType::MergeFrom(from.analysiscomponents());
    }
    if (from.has_analysisconstraints()) {
      mutable_analysisconstraints()->::edu::vanderbilt::isis::meta::AnalysisConstraintsType::MergeFrom(from.analysisconstraints());
    }
    if (from.has_conditions()) {
      mutable_conditions()->::edu::vanderbilt::isis::meta::ConditionsType::MergeFrom(from.conditions());
    }
    if (from.has_loads()) {
      mutable_loads()->::edu::vanderbilt::isis::meta::LoadsType::MergeFrom(from.loads());
    }
    if (from.has_partinterfaces()) {
      mutable_partinterfaces()->::edu::vanderbilt::isis::meta::PartInterfacesType::MergeFrom(from.partinterfaces());
    }
    if (from.has_solvers()) {
      mutable_solvers()->::edu::vanderbilt::isis::meta::SolversType::MergeFrom(from.solvers());
    }
    if (from.has_analysisid()) {
      set_analysisid(from.analysisid());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has__id()) {
      mutable__id()->::edu::vanderbilt::isis::meta::ID::MergeFrom(from._id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FEAType::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FEAType::CopyFrom(const FEAType& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FEAType::IsInitialized() const {
  if ((_has_bits_[0] & 0x000001a0) != 0x000001a0) return false;

  if (has_analysiscomponents()) {
    if (!this->analysiscomponents().IsInitialized()) return false;
  }
  if (has_analysisconstraints()) {
    if (!this->analysisconstraints().IsInitialized()) return false;
  }
  if (has_conditions()) {
    if (!this->conditions().IsInitialized()) return false;
  }
  if (has_loads()) {
    if (!this->loads().IsInitialized()) return false;
  }
  if (has_partinterfaces()) {
    if (!this->partinterfaces().IsInitialized()) return false;
  }
  if (has_solvers()) {
    if (!this->solvers().IsInitialized()) return false;
  }
  for (int i = 0; i < surfacetreatments_size(); i++) {
    if (!this->surfacetreatments(i).IsInitialized()) return false;
  }
  if (has__id()) {
    if (!this->_id().IsInitialized()) return false;
  }
  return true;
}

void FEAType::Swap(FEAType* other) {
  if (other != this) {
    std::swap(analysiscomponents_, other->analysiscomponents_);
    std::swap(analysisconstraints_, other->analysisconstraints_);
    std::swap(conditions_, other->conditions_);
    std::swap(loads_, other->loads_);
    std::swap(partinterfaces_, other->partinterfaces_);
    std::swap(solvers_, other->solvers_);
    surfacetreatments_.Swap(&other->surfacetreatments_);
    std::swap(analysisid_, other->analysisid_);
    std::swap(type_, other->type_);
    std::swap(_id_, other->_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FEAType::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FEAType_descriptor_;
  metadata.reflection = FEAType_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FeatureType::kComponentIDFieldNumber;
const int FeatureType::kNameFieldNumber;
const int FeatureType::kIdFieldNumber;
#endif  // !_MSC_VER

FeatureType::FeatureType()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FeatureType::InitAsDefaultInstance() {
  _id_ = const_cast< ::edu::vanderbilt::isis::meta::ID*>(&::edu::vanderbilt::isis::meta::ID::default_instance());
}

FeatureType::FeatureType(const FeatureType& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FeatureType::SharedCtor() {
  _cached_size_ = 0;
  componentid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  _id_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FeatureType::~FeatureType() {
  SharedDtor();
}

void FeatureType::SharedDtor() {
  if (componentid_ != &::google::protobuf::internal::kEmptyString) {
    delete componentid_;
  }
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
    delete _id_;
  }
}

void FeatureType::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FeatureType::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FeatureType_descriptor_;
}

const FeatureType& FeatureType::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AssemblyInterface_2eproto();
  return *default_instance_;
}

FeatureType* FeatureType::default_instance_ = NULL;

FeatureType* FeatureType::New() const {
  return new FeatureType;
}

void FeatureType::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_componentid()) {
      if (componentid_ != &::google::protobuf::internal::kEmptyString) {
        componentid_->clear();
      }
    }
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has__id()) {
      if (_id_ != NULL) _id_->::edu::vanderbilt::isis::meta::ID::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FeatureType::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string ComponentID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_componentid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->componentid().data(), this->componentid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_Name;
        break;
      }

      // required string Name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse__id;
        break;
      }

      // optional .edu.vanderbilt.isis.meta.ID _id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse__id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FeatureType::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string ComponentID = 1;
  if (has_componentid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->componentid().data(), this->componentid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->componentid(), output);
  }

  // required string Name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }

  // optional .edu.vanderbilt.isis.meta.ID _id = 3;
  if (has__id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FeatureType::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string ComponentID = 1;
  if (has_componentid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->componentid().data(), this->componentid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->componentid(), target);
  }

  // required string Name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional .edu.vanderbilt.isis.meta.ID _id = 3;
  if (has__id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FeatureType::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string ComponentID = 1;
    if (has_componentid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->componentid());
    }

    // required string Name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional .edu.vanderbilt.isis.meta.ID _id = 3;
    if (has__id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FeatureType::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FeatureType* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FeatureType*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FeatureType::MergeFrom(const FeatureType& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_componentid()) {
      set_componentid(from.componentid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has__id()) {
      mutable__id()->::edu::vanderbilt::isis::meta::ID::MergeFrom(from._id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FeatureType::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FeatureType::CopyFrom(const FeatureType& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FeatureType::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has__id()) {
    if (!this->_id().IsInitialized()) return false;
  }
  return true;
}

void FeatureType::Swap(FeatureType* other) {
  if (other != this) {
    std::swap(componentid_, other->componentid_);
    std::swap(name_, other->name_);
    std::swap(_id_, other->_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FeatureType::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FeatureType_descriptor_;
  metadata.reflection = FeatureType_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FeaturesType::kFeatureFieldNumber;
const int FeaturesType::kFeatureGeometryTypeFieldNumber;
const int FeaturesType::kFeatureIDFieldNumber;
const int FeaturesType::kFeatureInterfaceTypeFieldNumber;
const int FeaturesType::kGeometryTypeFieldNumber;
const int FeaturesType::kPrimaryGeometryQualifierFieldNumber;
const int FeaturesType::kSecondaryGeometryQualifierFieldNumber;
const int FeaturesType::kIdFieldNumber;
#endif  // !_MSC_VER

FeaturesType::FeaturesType()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FeaturesType::InitAsDefaultInstance() {
  _id_ = const_cast< ::edu::vanderbilt::isis::meta::ID*>(&::edu::vanderbilt::isis::meta::ID::default_instance());
}

FeaturesType::FeaturesType(const FeaturesType& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FeaturesType::SharedCtor() {
  _cached_size_ = 0;
  featuregeometrytype_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  featureid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  featureinterfacetype_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  geometrytype_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  primarygeometryqualifier_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  secondarygeometryqualifier_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  _id_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FeaturesType::~FeaturesType() {
  SharedDtor();
}

void FeaturesType::SharedDtor() {
  if (featuregeometrytype_ != &::google::protobuf::internal::kEmptyString) {
    delete featuregeometrytype_;
  }
  if (featureid_ != &::google::protobuf::internal::kEmptyString) {
    delete featureid_;
  }
  if (featureinterfacetype_ != &::google::protobuf::internal::kEmptyString) {
    delete featureinterfacetype_;
  }
  if (geometrytype_ != &::google::protobuf::internal::kEmptyString) {
    delete geometrytype_;
  }
  if (primarygeometryqualifier_ != &::google::protobuf::internal::kEmptyString) {
    delete primarygeometryqualifier_;
  }
  if (secondarygeometryqualifier_ != &::google::protobuf::internal::kEmptyString) {
    delete secondarygeometryqualifier_;
  }
  if (this != default_instance_) {
    delete _id_;
  }
}

void FeaturesType::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FeaturesType::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FeaturesType_descriptor_;
}

const FeaturesType& FeaturesType::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AssemblyInterface_2eproto();
  return *default_instance_;
}

FeaturesType* FeaturesType::default_instance_ = NULL;

FeaturesType* FeaturesType::New() const {
  return new FeaturesType;
}

void FeaturesType::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (has_featuregeometrytype()) {
      if (featuregeometrytype_ != &::google::protobuf::internal::kEmptyString) {
        featuregeometrytype_->clear();
      }
    }
    if (has_featureid()) {
      if (featureid_ != &::google::protobuf::internal::kEmptyString) {
        featureid_->clear();
      }
    }
    if (has_featureinterfacetype()) {
      if (featureinterfacetype_ != &::google::protobuf::internal::kEmptyString) {
        featureinterfacetype_->clear();
      }
    }
    if (has_geometrytype()) {
      if (geometrytype_ != &::google::protobuf::internal::kEmptyString) {
        geometrytype_->clear();
      }
    }
    if (has_primarygeometryqualifier()) {
      if (primarygeometryqualifier_ != &::google::protobuf::internal::kEmptyString) {
        primarygeometryqualifier_->clear();
      }
    }
    if (has_secondarygeometryqualifier()) {
      if (secondarygeometryqualifier_ != &::google::protobuf::internal::kEmptyString) {
        secondarygeometryqualifier_->clear();
      }
    }
    if (has__id()) {
      if (_id_ != NULL) _id_->::edu::vanderbilt::isis::meta::ID::Clear();
    }
  }
  feature_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FeaturesType::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .edu.vanderbilt.isis.meta.FeatureType Feature = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Feature:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_feature()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_Feature;
        if (input->ExpectTag(18)) goto parse_FeatureGeometryType;
        break;
      }

      // required string FeatureGeometryType = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_FeatureGeometryType:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_featuregeometrytype()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->featuregeometrytype().data(), this->featuregeometrytype().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_FeatureID;
        break;
      }

      // required string FeatureID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_FeatureID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_featureid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->featureid().data(), this->featureid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_FeatureInterfaceType;
        break;
      }

      // required string FeatureInterfaceType = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_FeatureInterfaceType:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_featureinterfacetype()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->featureinterfacetype().data(), this->featureinterfacetype().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_GeometryType;
        break;
      }

      // required string GeometryType = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_GeometryType:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_geometrytype()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->geometrytype().data(), this->geometrytype().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_PrimaryGeometryQualifier;
        break;
      }

      // required string PrimaryGeometryQualifier = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_PrimaryGeometryQualifier:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_primarygeometryqualifier()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->primarygeometryqualifier().data(), this->primarygeometryqualifier().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_SecondaryGeometryQualifier;
        break;
      }

      // required string SecondaryGeometryQualifier = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_SecondaryGeometryQualifier:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_secondarygeometryqualifier()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->secondarygeometryqualifier().data(), this->secondarygeometryqualifier().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse__id;
        break;
      }

      // optional .edu.vanderbilt.isis.meta.ID _id = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse__id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FeaturesType::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .edu.vanderbilt.isis.meta.FeatureType Feature = 1;
  for (int i = 0; i < this->feature_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->feature(i), output);
  }

  // required string FeatureGeometryType = 2;
  if (has_featuregeometrytype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->featuregeometrytype().data(), this->featuregeometrytype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->featuregeometrytype(), output);
  }

  // required string FeatureID = 3;
  if (has_featureid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->featureid().data(), this->featureid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->featureid(), output);
  }

  // required string FeatureInterfaceType = 4;
  if (has_featureinterfacetype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->featureinterfacetype().data(), this->featureinterfacetype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->featureinterfacetype(), output);
  }

  // required string GeometryType = 5;
  if (has_geometrytype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->geometrytype().data(), this->geometrytype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->geometrytype(), output);
  }

  // required string PrimaryGeometryQualifier = 6;
  if (has_primarygeometryqualifier()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->primarygeometryqualifier().data(), this->primarygeometryqualifier().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->primarygeometryqualifier(), output);
  }

  // required string SecondaryGeometryQualifier = 7;
  if (has_secondarygeometryqualifier()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->secondarygeometryqualifier().data(), this->secondarygeometryqualifier().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->secondarygeometryqualifier(), output);
  }

  // optional .edu.vanderbilt.isis.meta.ID _id = 8;
  if (has__id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FeaturesType::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .edu.vanderbilt.isis.meta.FeatureType Feature = 1;
  for (int i = 0; i < this->feature_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->feature(i), target);
  }

  // required string FeatureGeometryType = 2;
  if (has_featuregeometrytype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->featuregeometrytype().data(), this->featuregeometrytype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->featuregeometrytype(), target);
  }

  // required string FeatureID = 3;
  if (has_featureid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->featureid().data(), this->featureid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->featureid(), target);
  }

  // required string FeatureInterfaceType = 4;
  if (has_featureinterfacetype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->featureinterfacetype().data(), this->featureinterfacetype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->featureinterfacetype(), target);
  }

  // required string GeometryType = 5;
  if (has_geometrytype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->geometrytype().data(), this->geometrytype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->geometrytype(), target);
  }

  // required string PrimaryGeometryQualifier = 6;
  if (has_primarygeometryqualifier()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->primarygeometryqualifier().data(), this->primarygeometryqualifier().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->primarygeometryqualifier(), target);
  }

  // required string SecondaryGeometryQualifier = 7;
  if (has_secondarygeometryqualifier()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->secondarygeometryqualifier().data(), this->secondarygeometryqualifier().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->secondarygeometryqualifier(), target);
  }

  // optional .edu.vanderbilt.isis.meta.ID _id = 8;
  if (has__id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FeaturesType::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // required string FeatureGeometryType = 2;
    if (has_featuregeometrytype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->featuregeometrytype());
    }

    // required string FeatureID = 3;
    if (has_featureid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->featureid());
    }

    // required string FeatureInterfaceType = 4;
    if (has_featureinterfacetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->featureinterfacetype());
    }

    // required string GeometryType = 5;
    if (has_geometrytype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->geometrytype());
    }

    // required string PrimaryGeometryQualifier = 6;
    if (has_primarygeometryqualifier()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->primarygeometryqualifier());
    }

    // required string SecondaryGeometryQualifier = 7;
    if (has_secondarygeometryqualifier()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->secondarygeometryqualifier());
    }

    // optional .edu.vanderbilt.isis.meta.ID _id = 8;
    if (has__id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_id());
    }

  }
  // repeated .edu.vanderbilt.isis.meta.FeatureType Feature = 1;
  total_size += 1 * this->feature_size();
  for (int i = 0; i < this->feature_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->feature(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FeaturesType::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FeaturesType* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FeaturesType*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FeaturesType::MergeFrom(const FeaturesType& from) {
  GOOGLE_CHECK_NE(&from, this);
  feature_.MergeFrom(from.feature_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_featuregeometrytype()) {
      set_featuregeometrytype(from.featuregeometrytype());
    }
    if (from.has_featureid()) {
      set_featureid(from.featureid());
    }
    if (from.has_featureinterfacetype()) {
      set_featureinterfacetype(from.featureinterfacetype());
    }
    if (from.has_geometrytype()) {
      set_geometrytype(from.geometrytype());
    }
    if (from.has_primarygeometryqualifier()) {
      set_primarygeometryqualifier(from.primarygeometryqualifier());
    }
    if (from.has_secondarygeometryqualifier()) {
      set_secondarygeometryqualifier(from.secondarygeometryqualifier());
    }
    if (from.has__id()) {
      mutable__id()->::edu::vanderbilt::isis::meta::ID::MergeFrom(from._id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FeaturesType::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FeaturesType::CopyFrom(const FeaturesType& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FeaturesType::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007e) != 0x0000007e) return false;

  for (int i = 0; i < feature_size(); i++) {
    if (!this->feature(i).IsInitialized()) return false;
  }
  if (has__id()) {
    if (!this->_id().IsInitialized()) return false;
  }
  return true;
}

void FeaturesType::Swap(FeaturesType* other) {
  if (other != this) {
    feature_.Swap(&other->feature_);
    std::swap(featuregeometrytype_, other->featuregeometrytype_);
    std::swap(featureid_, other->featureid_);
    std::swap(featureinterfacetype_, other->featureinterfacetype_);
    std::swap(geometrytype_, other->geometrytype_);
    std::swap(primarygeometryqualifier_, other->primarygeometryqualifier_);
    std::swap(secondarygeometryqualifier_, other->secondarygeometryqualifier_);
    std::swap(_id_, other->_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FeaturesType::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FeaturesType_descriptor_;
  metadata.reflection = FeaturesType_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FixedType::kKinematicFeatureFieldNumber;
const int FixedType::kCFMFieldNumber;
const int FixedType::kConnectedComponentIDFieldNumber;
const int FixedType::kConnectionIDFieldNumber;
const int FixedType::kERPFieldNumber;
const int FixedType::kFeatureInterfaceTypeFieldNumber;
const int FixedType::kIdFieldNumber;
#endif  // !_MSC_VER

FixedType::FixedType()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FixedType::InitAsDefaultInstance() {
  _id_ = const_cast< ::edu::vanderbilt::isis::meta::ID*>(&::edu::vanderbilt::isis::meta::ID::default_instance());
}

FixedType::FixedType(const FixedType& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FixedType::SharedCtor() {
  _cached_size_ = 0;
  cfm_ = 0;
  connectedcomponentid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  connectionid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  erp_ = 0;
  featureinterfacetype_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  _id_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FixedType::~FixedType() {
  SharedDtor();
}

void FixedType::SharedDtor() {
  if (connectedcomponentid_ != &::google::protobuf::internal::kEmptyString) {
    delete connectedcomponentid_;
  }
  if (connectionid_ != &::google::protobuf::internal::kEmptyString) {
    delete connectionid_;
  }
  if (featureinterfacetype_ != &::google::protobuf::internal::kEmptyString) {
    delete featureinterfacetype_;
  }
  if (this != default_instance_) {
    delete _id_;
  }
}

void FixedType::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FixedType::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FixedType_descriptor_;
}

const FixedType& FixedType::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AssemblyInterface_2eproto();
  return *default_instance_;
}

FixedType* FixedType::default_instance_ = NULL;

FixedType* FixedType::New() const {
  return new FixedType;
}

void FixedType::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    cfm_ = 0;
    if (has_connectedcomponentid()) {
      if (connectedcomponentid_ != &::google::protobuf::internal::kEmptyString) {
        connectedcomponentid_->clear();
      }
    }
    if (has_connectionid()) {
      if (connectionid_ != &::google::protobuf::internal::kEmptyString) {
        connectionid_->clear();
      }
    }
    erp_ = 0;
    if (has_featureinterfacetype()) {
      if (featureinterfacetype_ != &::google::protobuf::internal::kEmptyString) {
        featureinterfacetype_->clear();
      }
    }
    if (has__id()) {
      if (_id_ != NULL) _id_->::edu::vanderbilt::isis::meta::ID::Clear();
    }
  }
  kinematicfeature_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FixedType::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .edu.vanderbilt.isis.meta.KinematicFeatureType KinematicFeature = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_KinematicFeature:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_kinematicfeature()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_KinematicFeature;
        if (input->ExpectTag(17)) goto parse_CFM;
        break;
      }

      // required double CFM = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_CFM:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &cfm_)));
          set_has_cfm();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_ConnectedComponentID;
        break;
      }

      // required string ConnectedComponentID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ConnectedComponentID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_connectedcomponentid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->connectedcomponentid().data(), this->connectedcomponentid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_ConnectionID;
        break;
      }

      // required string ConnectionID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ConnectionID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_connectionid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->connectionid().data(), this->connectionid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(41)) goto parse_ERP;
        break;
      }

      // required double ERP = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_ERP:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &erp_)));
          set_has_erp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_FeatureInterfaceType;
        break;
      }

      // required string FeatureInterfaceType = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_FeatureInterfaceType:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_featureinterfacetype()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->featureinterfacetype().data(), this->featureinterfacetype().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse__id;
        break;
      }

      // optional .edu.vanderbilt.isis.meta.ID _id = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse__id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FixedType::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .edu.vanderbilt.isis.meta.KinematicFeatureType KinematicFeature = 1;
  for (int i = 0; i < this->kinematicfeature_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->kinematicfeature(i), output);
  }

  // required double CFM = 2;
  if (has_cfm()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->cfm(), output);
  }

  // required string ConnectedComponentID = 3;
  if (has_connectedcomponentid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->connectedcomponentid().data(), this->connectedcomponentid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->connectedcomponentid(), output);
  }

  // required string ConnectionID = 4;
  if (has_connectionid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->connectionid().data(), this->connectionid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->connectionid(), output);
  }

  // required double ERP = 5;
  if (has_erp()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->erp(), output);
  }

  // required string FeatureInterfaceType = 6;
  if (has_featureinterfacetype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->featureinterfacetype().data(), this->featureinterfacetype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->featureinterfacetype(), output);
  }

  // optional .edu.vanderbilt.isis.meta.ID _id = 7;
  if (has__id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FixedType::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .edu.vanderbilt.isis.meta.KinematicFeatureType KinematicFeature = 1;
  for (int i = 0; i < this->kinematicfeature_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->kinematicfeature(i), target);
  }

  // required double CFM = 2;
  if (has_cfm()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->cfm(), target);
  }

  // required string ConnectedComponentID = 3;
  if (has_connectedcomponentid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->connectedcomponentid().data(), this->connectedcomponentid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->connectedcomponentid(), target);
  }

  // required string ConnectionID = 4;
  if (has_connectionid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->connectionid().data(), this->connectionid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->connectionid(), target);
  }

  // required double ERP = 5;
  if (has_erp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->erp(), target);
  }

  // required string FeatureInterfaceType = 6;
  if (has_featureinterfacetype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->featureinterfacetype().data(), this->featureinterfacetype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->featureinterfacetype(), target);
  }

  // optional .edu.vanderbilt.isis.meta.ID _id = 7;
  if (has__id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FixedType::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // required double CFM = 2;
    if (has_cfm()) {
      total_size += 1 + 8;
    }

    // required string ConnectedComponentID = 3;
    if (has_connectedcomponentid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->connectedcomponentid());
    }

    // required string ConnectionID = 4;
    if (has_connectionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->connectionid());
    }

    // required double ERP = 5;
    if (has_erp()) {
      total_size += 1 + 8;
    }

    // required string FeatureInterfaceType = 6;
    if (has_featureinterfacetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->featureinterfacetype());
    }

    // optional .edu.vanderbilt.isis.meta.ID _id = 7;
    if (has__id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_id());
    }

  }
  // repeated .edu.vanderbilt.isis.meta.KinematicFeatureType KinematicFeature = 1;
  total_size += 1 * this->kinematicfeature_size();
  for (int i = 0; i < this->kinematicfeature_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->kinematicfeature(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FixedType::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FixedType* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FixedType*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FixedType::MergeFrom(const FixedType& from) {
  GOOGLE_CHECK_NE(&from, this);
  kinematicfeature_.MergeFrom(from.kinematicfeature_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_cfm()) {
      set_cfm(from.cfm());
    }
    if (from.has_connectedcomponentid()) {
      set_connectedcomponentid(from.connectedcomponentid());
    }
    if (from.has_connectionid()) {
      set_connectionid(from.connectionid());
    }
    if (from.has_erp()) {
      set_erp(from.erp());
    }
    if (from.has_featureinterfacetype()) {
      set_featureinterfacetype(from.featureinterfacetype());
    }
    if (from.has__id()) {
      mutable__id()->::edu::vanderbilt::isis::meta::ID::MergeFrom(from._id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FixedType::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FixedType::CopyFrom(const FixedType& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FixedType::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003e) != 0x0000003e) return false;

  for (int i = 0; i < kinematicfeature_size(); i++) {
    if (!this->kinematicfeature(i).IsInitialized()) return false;
  }
  if (has__id()) {
    if (!this->_id().IsInitialized()) return false;
  }
  return true;
}

void FixedType::Swap(FixedType* other) {
  if (other != this) {
    kinematicfeature_.Swap(&other->kinematicfeature_);
    std::swap(cfm_, other->cfm_);
    std::swap(connectedcomponentid_, other->connectedcomponentid_);
    std::swap(connectionid_, other->connectionid_);
    std::swap(erp_, other->erp_);
    std::swap(featureinterfacetype_, other->featureinterfacetype_);
    std::swap(_id_, other->_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FixedType::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FixedType_descriptor_;
  metadata.reflection = FixedType_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ForceMomentType::kForceFieldNumber;
const int ForceMomentType::kMomentFieldNumber;
const int ForceMomentType::kIdFieldNumber;
#endif  // !_MSC_VER

ForceMomentType::ForceMomentType()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ForceMomentType::InitAsDefaultInstance() {
  force_ = const_cast< ::edu::vanderbilt::isis::meta::ForceType*>(&::edu::vanderbilt::isis::meta::ForceType::default_instance());
  moment_ = const_cast< ::edu::vanderbilt::isis::meta::MomentType*>(&::edu::vanderbilt::isis::meta::MomentType::default_instance());
  _id_ = const_cast< ::edu::vanderbilt::isis::meta::ID*>(&::edu::vanderbilt::isis::meta::ID::default_instance());
}

ForceMomentType::ForceMomentType(const ForceMomentType& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ForceMomentType::SharedCtor() {
  _cached_size_ = 0;
  force_ = NULL;
  moment_ = NULL;
  _id_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ForceMomentType::~ForceMomentType() {
  SharedDtor();
}

void ForceMomentType::SharedDtor() {
  if (this != default_instance_) {
    delete force_;
    delete moment_;
    delete _id_;
  }
}

void ForceMomentType::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ForceMomentType::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ForceMomentType_descriptor_;
}

const ForceMomentType& ForceMomentType::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AssemblyInterface_2eproto();
  return *default_instance_;
}

ForceMomentType* ForceMomentType::default_instance_ = NULL;

ForceMomentType* ForceMomentType::New() const {
  return new ForceMomentType;
}

void ForceMomentType::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_force()) {
      if (force_ != NULL) force_->::edu::vanderbilt::isis::meta::ForceType::Clear();
    }
    if (has_moment()) {
      if (moment_ != NULL) moment_->::edu::vanderbilt::isis::meta::MomentType::Clear();
    }
    if (has__id()) {
      if (_id_ != NULL) _id_->::edu::vanderbilt::isis::meta::ID::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ForceMomentType::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .edu.vanderbilt.isis.meta.ForceType Force = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_force()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_Moment;
        break;
      }

      // required .edu.vanderbilt.isis.meta.MomentType Moment = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Moment:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_moment()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse__id;
        break;
      }

      // optional .edu.vanderbilt.isis.meta.ID _id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse__id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ForceMomentType::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .edu.vanderbilt.isis.meta.ForceType Force = 1;
  if (has_force()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->force(), output);
  }

  // required .edu.vanderbilt.isis.meta.MomentType Moment = 2;
  if (has_moment()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->moment(), output);
  }

  // optional .edu.vanderbilt.isis.meta.ID _id = 3;
  if (has__id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ForceMomentType::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .edu.vanderbilt.isis.meta.ForceType Force = 1;
  if (has_force()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->force(), target);
  }

  // required .edu.vanderbilt.isis.meta.MomentType Moment = 2;
  if (has_moment()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->moment(), target);
  }

  // optional .edu.vanderbilt.isis.meta.ID _id = 3;
  if (has__id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ForceMomentType::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .edu.vanderbilt.isis.meta.ForceType Force = 1;
    if (has_force()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->force());
    }

    // required .edu.vanderbilt.isis.meta.MomentType Moment = 2;
    if (has_moment()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->moment());
    }

    // optional .edu.vanderbilt.isis.meta.ID _id = 3;
    if (has__id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ForceMomentType::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ForceMomentType* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ForceMomentType*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ForceMomentType::MergeFrom(const ForceMomentType& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_force()) {
      mutable_force()->::edu::vanderbilt::isis::meta::ForceType::MergeFrom(from.force());
    }
    if (from.has_moment()) {
      mutable_moment()->::edu::vanderbilt::isis::meta::MomentType::MergeFrom(from.moment());
    }
    if (from.has__id()) {
      mutable__id()->::edu::vanderbilt::isis::meta::ID::MergeFrom(from._id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ForceMomentType::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ForceMomentType::CopyFrom(const ForceMomentType& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ForceMomentType::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_force()) {
    if (!this->force().IsInitialized()) return false;
  }
  if (has_moment()) {
    if (!this->moment().IsInitialized()) return false;
  }
  if (has__id()) {
    if (!this->_id().IsInitialized()) return false;
  }
  return true;
}

void ForceMomentType::Swap(ForceMomentType* other) {
  if (other != this) {
    std::swap(force_, other->force_);
    std::swap(moment_, other->moment_);
    std::swap(_id_, other->_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ForceMomentType::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ForceMomentType_descriptor_;
  metadata.reflection = ForceMomentType_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ForceType::kUnitsFieldNumber;
const int ForceType::kIdFieldNumber;
const int ForceType::kXFieldNumber;
const int ForceType::kYFieldNumber;
const int ForceType::kZFieldNumber;
#endif  // !_MSC_VER

ForceType::ForceType()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ForceType::InitAsDefaultInstance() {
  _id_ = const_cast< ::edu::vanderbilt::isis::meta::ID*>(&::edu::vanderbilt::isis::meta::ID::default_instance());
}

ForceType::ForceType(const ForceType& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ForceType::SharedCtor() {
  _cached_size_ = 0;
  units_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  _id_ = NULL;
  x_ = 0;
  y_ = 0;
  z_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ForceType::~ForceType() {
  SharedDtor();
}

void ForceType::SharedDtor() {
  if (units_ != &::google::protobuf::internal::kEmptyString) {
    delete units_;
  }
  if (this != default_instance_) {
    delete _id_;
  }
}

void ForceType::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ForceType::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ForceType_descriptor_;
}

const ForceType& ForceType::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AssemblyInterface_2eproto();
  return *default_instance_;
}

ForceType* ForceType::default_instance_ = NULL;

ForceType* ForceType::New() const {
  return new ForceType;
}

void ForceType::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_units()) {
      if (units_ != &::google::protobuf::internal::kEmptyString) {
        units_->clear();
      }
    }
    if (has__id()) {
      if (_id_ != NULL) _id_->::edu::vanderbilt::isis::meta::ID::Clear();
    }
    x_ = 0;
    y_ = 0;
    z_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ForceType::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string Units = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_units()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->units().data(), this->units().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse__id;
        break;
      }

      // optional .edu.vanderbilt.isis.meta.ID _id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse__id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_x;
        break;
      }

      // required double x = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_y;
        break;
      }

      // required double y = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(41)) goto parse_z;
        break;
      }

      // required double z = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_z:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &z_)));
          set_has_z();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ForceType::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string Units = 1;
  if (has_units()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->units().data(), this->units().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->units(), output);
  }

  // optional .edu.vanderbilt.isis.meta.ID _id = 2;
  if (has__id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_id(), output);
  }

  // required double x = 3;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->x(), output);
  }

  // required double y = 4;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->y(), output);
  }

  // required double z = 5;
  if (has_z()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->z(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ForceType::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string Units = 1;
  if (has_units()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->units().data(), this->units().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->units(), target);
  }

  // optional .edu.vanderbilt.isis.meta.ID _id = 2;
  if (has__id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->_id(), target);
  }

  // required double x = 3;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->x(), target);
  }

  // required double y = 4;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->y(), target);
  }

  // required double z = 5;
  if (has_z()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->z(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ForceType::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string Units = 1;
    if (has_units()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->units());
    }

    // optional .edu.vanderbilt.isis.meta.ID _id = 2;
    if (has__id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_id());
    }

    // required double x = 3;
    if (has_x()) {
      total_size += 1 + 8;
    }

    // required double y = 4;
    if (has_y()) {
      total_size += 1 + 8;
    }

    // required double z = 5;
    if (has_z()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ForceType::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ForceType* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ForceType*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ForceType::MergeFrom(const ForceType& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_units()) {
      set_units(from.units());
    }
    if (from.has__id()) {
      mutable__id()->::edu::vanderbilt::isis::meta::ID::MergeFrom(from._id());
    }
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
    if (from.has_z()) {
      set_z(from.z());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ForceType::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ForceType::CopyFrom(const ForceType& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ForceType::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001d) != 0x0000001d) return false;

  if (has__id()) {
    if (!this->_id().IsInitialized()) return false;
  }
  return true;
}

void ForceType::Swap(ForceType* other) {
  if (other != this) {
    std::swap(units_, other->units_);
    std::swap(_id_, other->_id_);
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(z_, other->z_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ForceType::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ForceType_descriptor_;
  metadata.reflection = ForceType_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GeometryType::kFeaturesFieldNumber;
const int GeometryType::kSetOperationFieldNumber;
const int GeometryType::kIdFieldNumber;
#endif  // !_MSC_VER

GeometryType::GeometryType()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GeometryType::InitAsDefaultInstance() {
  _id_ = const_cast< ::edu::vanderbilt::isis::meta::ID*>(&::edu::vanderbilt::isis::meta::ID::default_instance());
}

GeometryType::GeometryType(const GeometryType& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GeometryType::SharedCtor() {
  _cached_size_ = 0;
  _id_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GeometryType::~GeometryType() {
  SharedDtor();
}

void GeometryType::SharedDtor() {
  if (this != default_instance_) {
    delete _id_;
  }
}

void GeometryType::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GeometryType::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GeometryType_descriptor_;
}

const GeometryType& GeometryType::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AssemblyInterface_2eproto();
  return *default_instance_;
}

GeometryType* GeometryType::default_instance_ = NULL;

GeometryType* GeometryType::New() const {
  return new GeometryType;
}

void GeometryType::Clear() {
  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    if (has__id()) {
      if (_id_ != NULL) _id_->::edu::vanderbilt::isis::meta::ID::Clear();
    }
  }
  features_.Clear();
  setoperation_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GeometryType::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .edu.vanderbilt.isis.meta.FeaturesType Features = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Features:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_features()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_Features;
        if (input->ExpectTag(18)) goto parse_SetOperation;
        break;
      }

      // repeated .edu.vanderbilt.isis.meta.SetOperationType SetOperation = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_SetOperation:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_setoperation()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_SetOperation;
        if (input->ExpectTag(26)) goto parse__id;
        break;
      }

      // optional .edu.vanderbilt.isis.meta.ID _id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse__id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GeometryType::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .edu.vanderbilt.isis.meta.FeaturesType Features = 1;
  for (int i = 0; i < this->features_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->features(i), output);
  }

  // repeated .edu.vanderbilt.isis.meta.SetOperationType SetOperation = 2;
  for (int i = 0; i < this->setoperation_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->setoperation(i), output);
  }

  // optional .edu.vanderbilt.isis.meta.ID _id = 3;
  if (has__id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GeometryType::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .edu.vanderbilt.isis.meta.FeaturesType Features = 1;
  for (int i = 0; i < this->features_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->features(i), target);
  }

  // repeated .edu.vanderbilt.isis.meta.SetOperationType SetOperation = 2;
  for (int i = 0; i < this->setoperation_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->setoperation(i), target);
  }

  // optional .edu.vanderbilt.isis.meta.ID _id = 3;
  if (has__id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GeometryType::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    // optional .edu.vanderbilt.isis.meta.ID _id = 3;
    if (has__id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_id());
    }

  }
  // repeated .edu.vanderbilt.isis.meta.FeaturesType Features = 1;
  total_size += 1 * this->features_size();
  for (int i = 0; i < this->features_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->features(i));
  }

  // repeated .edu.vanderbilt.isis.meta.SetOperationType SetOperation = 2;
  total_size += 1 * this->setoperation_size();
  for (int i = 0; i < this->setoperation_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->setoperation(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GeometryType::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GeometryType* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GeometryType*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GeometryType::MergeFrom(const GeometryType& from) {
  GOOGLE_CHECK_NE(&from, this);
  features_.MergeFrom(from.features_);
  setoperation_.MergeFrom(from.setoperation_);
  if (from._has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    if (from.has__id()) {
      mutable__id()->::edu::vanderbilt::isis::meta::ID::MergeFrom(from._id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GeometryType::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GeometryType::CopyFrom(const GeometryType& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GeometryType::IsInitialized() const {

  for (int i = 0; i < features_size(); i++) {
    if (!this->features(i).IsInitialized()) return false;
  }
  for (int i = 0; i < setoperation_size(); i++) {
    if (!this->setoperation(i).IsInitialized()) return false;
  }
  if (has__id()) {
    if (!this->_id().IsInitialized()) return false;
  }
  return true;
}

void GeometryType::Swap(GeometryType* other) {
  if (other != this) {
    features_.Swap(&other->features_);
    setoperation_.Swap(&other->setoperation_);
    std::swap(_id_, other->_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GeometryType::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GeometryType_descriptor_;
  metadata.reflection = GeometryType_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int InterferenceType::kAnalysisIDFieldNumber;
const int InterferenceType::kIdFieldNumber;
#endif  // !_MSC_VER

InterferenceType::InterferenceType()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void InterferenceType::InitAsDefaultInstance() {
  _id_ = const_cast< ::edu::vanderbilt::isis::meta::ID*>(&::edu::vanderbilt::isis::meta::ID::default_instance());
}

InterferenceType::InterferenceType(const InterferenceType& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void InterferenceType::SharedCtor() {
  _cached_size_ = 0;
  analysisid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  _id_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InterferenceType::~InterferenceType() {
  SharedDtor();
}

void InterferenceType::SharedDtor() {
  if (analysisid_ != &::google::protobuf::internal::kEmptyString) {
    delete analysisid_;
  }
  if (this != default_instance_) {
    delete _id_;
  }
}

void InterferenceType::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InterferenceType::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InterferenceType_descriptor_;
}

const InterferenceType& InterferenceType::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AssemblyInterface_2eproto();
  return *default_instance_;
}

InterferenceType* InterferenceType::default_instance_ = NULL;

InterferenceType* InterferenceType::New() const {
  return new InterferenceType;
}

void InterferenceType::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_analysisid()) {
      if (analysisid_ != &::google::protobuf::internal::kEmptyString) {
        analysisid_->clear();
      }
    }
    if (has__id()) {
      if (_id_ != NULL) _id_->::edu::vanderbilt::isis::meta::ID::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool InterferenceType::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string AnalysisID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_analysisid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->analysisid().data(), this->analysisid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse__id;
        break;
      }

      // optional .edu.vanderbilt.isis.meta.ID _id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse__id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void InterferenceType::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string AnalysisID = 1;
  if (has_analysisid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->analysisid().data(), this->analysisid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->analysisid(), output);
  }

  // optional .edu.vanderbilt.isis.meta.ID _id = 2;
  if (has__id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* InterferenceType::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string AnalysisID = 1;
  if (has_analysisid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->analysisid().data(), this->analysisid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->analysisid(), target);
  }

  // optional .edu.vanderbilt.isis.meta.ID _id = 2;
  if (has__id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int InterferenceType::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string AnalysisID = 1;
    if (has_analysisid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->analysisid());
    }

    // optional .edu.vanderbilt.isis.meta.ID _id = 2;
    if (has__id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InterferenceType::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const InterferenceType* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const InterferenceType*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void InterferenceType::MergeFrom(const InterferenceType& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_analysisid()) {
      set_analysisid(from.analysisid());
    }
    if (from.has__id()) {
      mutable__id()->::edu::vanderbilt::isis::meta::ID::MergeFrom(from._id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void InterferenceType::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InterferenceType::CopyFrom(const InterferenceType& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InterferenceType::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has__id()) {
    if (!this->_id().IsInitialized()) return false;
  }
  return true;
}

void InterferenceType::Swap(InterferenceType* other) {
  if (other != this) {
    std::swap(analysisid_, other->analysisid_);
    std::swap(_id_, other->_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata InterferenceType::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = InterferenceType_descriptor_;
  metadata.reflection = InterferenceType_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int KinematicConnectionsType::kFixedFieldNumber;
const int KinematicConnectionsType::kPrismaticFieldNumber;
const int KinematicConnectionsType::kRevoluteFieldNumber;
const int KinematicConnectionsType::kSphericalFieldNumber;
const int KinematicConnectionsType::kIdFieldNumber;
#endif  // !_MSC_VER

KinematicConnectionsType::KinematicConnectionsType()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void KinematicConnectionsType::InitAsDefaultInstance() {
  _id_ = const_cast< ::edu::vanderbilt::isis::meta::ID*>(&::edu::vanderbilt::isis::meta::ID::default_instance());
}

KinematicConnectionsType::KinematicConnectionsType(const KinematicConnectionsType& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void KinematicConnectionsType::SharedCtor() {
  _cached_size_ = 0;
  _id_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

KinematicConnectionsType::~KinematicConnectionsType() {
  SharedDtor();
}

void KinematicConnectionsType::SharedDtor() {
  if (this != default_instance_) {
    delete _id_;
  }
}

void KinematicConnectionsType::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* KinematicConnectionsType::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return KinematicConnectionsType_descriptor_;
}

const KinematicConnectionsType& KinematicConnectionsType::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AssemblyInterface_2eproto();
  return *default_instance_;
}

KinematicConnectionsType* KinematicConnectionsType::default_instance_ = NULL;

KinematicConnectionsType* KinematicConnectionsType::New() const {
  return new KinematicConnectionsType;
}

void KinematicConnectionsType::Clear() {
  if (_has_bits_[4 / 32] & (0xffu << (4 % 32))) {
    if (has__id()) {
      if (_id_ != NULL) _id_->::edu::vanderbilt::isis::meta::ID::Clear();
    }
  }
  fixed_.Clear();
  prismatic_.Clear();
  revolute_.Clear();
  spherical_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool KinematicConnectionsType::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .edu.vanderbilt.isis.meta.FixedType Fixed = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Fixed:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_fixed()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_Fixed;
        if (input->ExpectTag(18)) goto parse_Prismatic;
        break;
      }

      // repeated .edu.vanderbilt.isis.meta.PrismaticType Prismatic = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Prismatic:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_prismatic()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_Prismatic;
        if (input->ExpectTag(26)) goto parse_Revolute;
        break;
      }

      // repeated .edu.vanderbilt.isis.meta.RevoluteType Revolute = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Revolute:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_revolute()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_Revolute;
        if (input->ExpectTag(34)) goto parse_Spherical;
        break;
      }

      // repeated .edu.vanderbilt.isis.meta.SphericalType Spherical = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Spherical:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_spherical()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_Spherical;
        if (input->ExpectTag(42)) goto parse__id;
        break;
      }

      // optional .edu.vanderbilt.isis.meta.ID _id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse__id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void KinematicConnectionsType::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .edu.vanderbilt.isis.meta.FixedType Fixed = 1;
  for (int i = 0; i < this->fixed_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->fixed(i), output);
  }

  // repeated .edu.vanderbilt.isis.meta.PrismaticType Prismatic = 2;
  for (int i = 0; i < this->prismatic_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->prismatic(i), output);
  }

  // repeated .edu.vanderbilt.isis.meta.RevoluteType Revolute = 3;
  for (int i = 0; i < this->revolute_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->revolute(i), output);
  }

  // repeated .edu.vanderbilt.isis.meta.SphericalType Spherical = 4;
  for (int i = 0; i < this->spherical_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->spherical(i), output);
  }

  // optional .edu.vanderbilt.isis.meta.ID _id = 5;
  if (has__id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* KinematicConnectionsType::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .edu.vanderbilt.isis.meta.FixedType Fixed = 1;
  for (int i = 0; i < this->fixed_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->fixed(i), target);
  }

  // repeated .edu.vanderbilt.isis.meta.PrismaticType Prismatic = 2;
  for (int i = 0; i < this->prismatic_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->prismatic(i), target);
  }

  // repeated .edu.vanderbilt.isis.meta.RevoluteType Revolute = 3;
  for (int i = 0; i < this->revolute_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->revolute(i), target);
  }

  // repeated .edu.vanderbilt.isis.meta.SphericalType Spherical = 4;
  for (int i = 0; i < this->spherical_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->spherical(i), target);
  }

  // optional .edu.vanderbilt.isis.meta.ID _id = 5;
  if (has__id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int KinematicConnectionsType::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[4 / 32] & (0xffu << (4 % 32))) {
    // optional .edu.vanderbilt.isis.meta.ID _id = 5;
    if (has__id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_id());
    }

  }
  // repeated .edu.vanderbilt.isis.meta.FixedType Fixed = 1;
  total_size += 1 * this->fixed_size();
  for (int i = 0; i < this->fixed_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->fixed(i));
  }

  // repeated .edu.vanderbilt.isis.meta.PrismaticType Prismatic = 2;
  total_size += 1 * this->prismatic_size();
  for (int i = 0; i < this->prismatic_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->prismatic(i));
  }

  // repeated .edu.vanderbilt.isis.meta.RevoluteType Revolute = 3;
  total_size += 1 * this->revolute_size();
  for (int i = 0; i < this->revolute_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->revolute(i));
  }

  // repeated .edu.vanderbilt.isis.meta.SphericalType Spherical = 4;
  total_size += 1 * this->spherical_size();
  for (int i = 0; i < this->spherical_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->spherical(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void KinematicConnectionsType::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const KinematicConnectionsType* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const KinematicConnectionsType*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void KinematicConnectionsType::MergeFrom(const KinematicConnectionsType& from) {
  GOOGLE_CHECK_NE(&from, this);
  fixed_.MergeFrom(from.fixed_);
  prismatic_.MergeFrom(from.prismatic_);
  revolute_.MergeFrom(from.revolute_);
  spherical_.MergeFrom(from.spherical_);
  if (from._has_bits_[4 / 32] & (0xffu << (4 % 32))) {
    if (from.has__id()) {
      mutable__id()->::edu::vanderbilt::isis::meta::ID::MergeFrom(from._id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void KinematicConnectionsType::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KinematicConnectionsType::CopyFrom(const KinematicConnectionsType& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KinematicConnectionsType::IsInitialized() const {

  for (int i = 0; i < fixed_size(); i++) {
    if (!this->fixed(i).IsInitialized()) return false;
  }
  for (int i = 0; i < prismatic_size(); i++) {
    if (!this->prismatic(i).IsInitialized()) return false;
  }
  for (int i = 0; i < revolute_size(); i++) {
    if (!this->revolute(i).IsInitialized()) return false;
  }
  for (int i = 0; i < spherical_size(); i++) {
    if (!this->spherical(i).IsInitialized()) return false;
  }
  if (has__id()) {
    if (!this->_id().IsInitialized()) return false;
  }
  return true;
}

void KinematicConnectionsType::Swap(KinematicConnectionsType* other) {
  if (other != this) {
    fixed_.Swap(&other->fixed_);
    prismatic_.Swap(&other->prismatic_);
    revolute_.Swap(&other->revolute_);
    spherical_.Swap(&other->spherical_);
    std::swap(_id_, other->_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata KinematicConnectionsType::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = KinematicConnectionsType_descriptor_;
  metadata.reflection = KinematicConnectionsType_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int KinematicFeatureType::kComponentIDFieldNumber;
const int KinematicFeatureType::kDatumNameFieldNumber;
const int KinematicFeatureType::kFeatureGeometryTypeFieldNumber;
const int KinematicFeatureType::kIdFieldNumber;
#endif  // !_MSC_VER

KinematicFeatureType::KinematicFeatureType()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void KinematicFeatureType::InitAsDefaultInstance() {
  _id_ = const_cast< ::edu::vanderbilt::isis::meta::ID*>(&::edu::vanderbilt::isis::meta::ID::default_instance());
}

KinematicFeatureType::KinematicFeatureType(const KinematicFeatureType& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void KinematicFeatureType::SharedCtor() {
  _cached_size_ = 0;
  componentid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  datumname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  featuregeometrytype_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  _id_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

KinematicFeatureType::~KinematicFeatureType() {
  SharedDtor();
}

void KinematicFeatureType::SharedDtor() {
  if (componentid_ != &::google::protobuf::internal::kEmptyString) {
    delete componentid_;
  }
  if (datumname_ != &::google::protobuf::internal::kEmptyString) {
    delete datumname_;
  }
  if (featuregeometrytype_ != &::google::protobuf::internal::kEmptyString) {
    delete featuregeometrytype_;
  }
  if (this != default_instance_) {
    delete _id_;
  }
}

void KinematicFeatureType::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* KinematicFeatureType::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return KinematicFeatureType_descriptor_;
}

const KinematicFeatureType& KinematicFeatureType::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AssemblyInterface_2eproto();
  return *default_instance_;
}

KinematicFeatureType* KinematicFeatureType::default_instance_ = NULL;

KinematicFeatureType* KinematicFeatureType::New() const {
  return new KinematicFeatureType;
}

void KinematicFeatureType::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_componentid()) {
      if (componentid_ != &::google::protobuf::internal::kEmptyString) {
        componentid_->clear();
      }
    }
    if (has_datumname()) {
      if (datumname_ != &::google::protobuf::internal::kEmptyString) {
        datumname_->clear();
      }
    }
    if (has_featuregeometrytype()) {
      if (featuregeometrytype_ != &::google::protobuf::internal::kEmptyString) {
        featuregeometrytype_->clear();
      }
    }
    if (has__id()) {
      if (_id_ != NULL) _id_->::edu::vanderbilt::isis::meta::ID::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool KinematicFeatureType::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string ComponentID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_componentid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->componentid().data(), this->componentid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_DatumName;
        break;
      }

      // required string DatumName = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_DatumName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_datumname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->datumname().data(), this->datumname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_FeatureGeometryType;
        break;
      }

      // required string FeatureGeometryType = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_FeatureGeometryType:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_featuregeometrytype()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->featuregeometrytype().data(), this->featuregeometrytype().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse__id;
        break;
      }

      // optional .edu.vanderbilt.isis.meta.ID _id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse__id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void KinematicFeatureType::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string ComponentID = 1;
  if (has_componentid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->componentid().data(), this->componentid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->componentid(), output);
  }

  // required string DatumName = 2;
  if (has_datumname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->datumname().data(), this->datumname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->datumname(), output);
  }

  // required string FeatureGeometryType = 3;
  if (has_featuregeometrytype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->featuregeometrytype().data(), this->featuregeometrytype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->featuregeometrytype(), output);
  }

  // optional .edu.vanderbilt.isis.meta.ID _id = 4;
  if (has__id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* KinematicFeatureType::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string ComponentID = 1;
  if (has_componentid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->componentid().data(), this->componentid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->componentid(), target);
  }

  // required string DatumName = 2;
  if (has_datumname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->datumname().data(), this->datumname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->datumname(), target);
  }

  // required string FeatureGeometryType = 3;
  if (has_featuregeometrytype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->featuregeometrytype().data(), this->featuregeometrytype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->featuregeometrytype(), target);
  }

  // optional .edu.vanderbilt.isis.meta.ID _id = 4;
  if (has__id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int KinematicFeatureType::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string ComponentID = 1;
    if (has_componentid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->componentid());
    }

    // required string DatumName = 2;
    if (has_datumname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->datumname());
    }

    // required string FeatureGeometryType = 3;
    if (has_featuregeometrytype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->featuregeometrytype());
    }

    // optional .edu.vanderbilt.isis.meta.ID _id = 4;
    if (has__id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void KinematicFeatureType::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const KinematicFeatureType* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const KinematicFeatureType*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void KinematicFeatureType::MergeFrom(const KinematicFeatureType& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_componentid()) {
      set_componentid(from.componentid());
    }
    if (from.has_datumname()) {
      set_datumname(from.datumname());
    }
    if (from.has_featuregeometrytype()) {
      set_featuregeometrytype(from.featuregeometrytype());
    }
    if (from.has__id()) {
      mutable__id()->::edu::vanderbilt::isis::meta::ID::MergeFrom(from._id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void KinematicFeatureType::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KinematicFeatureType::CopyFrom(const KinematicFeatureType& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KinematicFeatureType::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has__id()) {
    if (!this->_id().IsInitialized()) return false;
  }
  return true;
}

void KinematicFeatureType::Swap(KinematicFeatureType* other) {
  if (other != this) {
    std::swap(componentid_, other->componentid_);
    std::swap(datumname_, other->datumname_);
    std::swap(featuregeometrytype_, other->featuregeometrytype_);
    std::swap(_id_, other->_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata KinematicFeatureType::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = KinematicFeatureType_descriptor_;
  metadata.reflection = KinematicFeatureType_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LoadType::kAccelerationFieldNumber;
const int LoadType::kForceMomentFieldNumber;
const int LoadType::kGeometryFieldNumber;
const int LoadType::kPressureFieldNumber;
const int LoadType::kIdFieldNumber;
#endif  // !_MSC_VER

LoadType::LoadType()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LoadType::InitAsDefaultInstance() {
  acceleration_ = const_cast< ::edu::vanderbilt::isis::meta::AccelerationType*>(&::edu::vanderbilt::isis::meta::AccelerationType::default_instance());
  forcemoment_ = const_cast< ::edu::vanderbilt::isis::meta::ForceMomentType*>(&::edu::vanderbilt::isis::meta::ForceMomentType::default_instance());
  geometry_ = const_cast< ::edu::vanderbilt::isis::meta::GeometryType*>(&::edu::vanderbilt::isis::meta::GeometryType::default_instance());
  pressure_ = const_cast< ::edu::vanderbilt::isis::meta::PressureType*>(&::edu::vanderbilt::isis::meta::PressureType::default_instance());
  _id_ = const_cast< ::edu::vanderbilt::isis::meta::ID*>(&::edu::vanderbilt::isis::meta::ID::default_instance());
}

LoadType::LoadType(const LoadType& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LoadType::SharedCtor() {
  _cached_size_ = 0;
  acceleration_ = NULL;
  forcemoment_ = NULL;
  geometry_ = NULL;
  pressure_ = NULL;
  _id_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LoadType::~LoadType() {
  SharedDtor();
}

void LoadType::SharedDtor() {
  if (this != default_instance_) {
    delete acceleration_;
    delete forcemoment_;
    delete geometry_;
    delete pressure_;
    delete _id_;
  }
}

void LoadType::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LoadType::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LoadType_descriptor_;
}

const LoadType& LoadType::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AssemblyInterface_2eproto();
  return *default_instance_;
}

LoadType* LoadType::default_instance_ = NULL;

LoadType* LoadType::New() const {
  return new LoadType;
}

void LoadType::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_acceleration()) {
      if (acceleration_ != NULL) acceleration_->::edu::vanderbilt::isis::meta::AccelerationType::Clear();
    }
    if (has_forcemoment()) {
      if (forcemoment_ != NULL) forcemoment_->::edu::vanderbilt::isis::meta::ForceMomentType::Clear();
    }
    if (has_geometry()) {
      if (geometry_ != NULL) geometry_->::edu::vanderbilt::isis::meta::GeometryType::Clear();
    }
    if (has_pressure()) {
      if (pressure_ != NULL) pressure_->::edu::vanderbilt::isis::meta::PressureType::Clear();
    }
    if (has__id()) {
      if (_id_ != NULL) _id_->::edu::vanderbilt::isis::meta::ID::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LoadType::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .edu.vanderbilt.isis.meta.AccelerationType Acceleration = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_acceleration()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_ForceMoment;
        break;
      }

      // optional .edu.vanderbilt.isis.meta.ForceMomentType ForceMoment = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ForceMoment:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_forcemoment()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_Geometry;
        break;
      }

      // optional .edu.vanderbilt.isis.meta.GeometryType Geometry = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Geometry:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_geometry()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_Pressure;
        break;
      }

      // optional .edu.vanderbilt.isis.meta.PressureType Pressure = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Pressure:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pressure()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse__id;
        break;
      }

      // optional .edu.vanderbilt.isis.meta.ID _id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse__id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LoadType::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .edu.vanderbilt.isis.meta.AccelerationType Acceleration = 1;
  if (has_acceleration()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->acceleration(), output);
  }

  // optional .edu.vanderbilt.isis.meta.ForceMomentType ForceMoment = 2;
  if (has_forcemoment()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->forcemoment(), output);
  }

  // optional .edu.vanderbilt.isis.meta.GeometryType Geometry = 3;
  if (has_geometry()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->geometry(), output);
  }

  // optional .edu.vanderbilt.isis.meta.PressureType Pressure = 4;
  if (has_pressure()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->pressure(), output);
  }

  // optional .edu.vanderbilt.isis.meta.ID _id = 5;
  if (has__id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LoadType::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .edu.vanderbilt.isis.meta.AccelerationType Acceleration = 1;
  if (has_acceleration()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->acceleration(), target);
  }

  // optional .edu.vanderbilt.isis.meta.ForceMomentType ForceMoment = 2;
  if (has_forcemoment()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->forcemoment(), target);
  }

  // optional .edu.vanderbilt.isis.meta.GeometryType Geometry = 3;
  if (has_geometry()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->geometry(), target);
  }

  // optional .edu.vanderbilt.isis.meta.PressureType Pressure = 4;
  if (has_pressure()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->pressure(), target);
  }

  // optional .edu.vanderbilt.isis.meta.ID _id = 5;
  if (has__id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LoadType::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .edu.vanderbilt.isis.meta.AccelerationType Acceleration = 1;
    if (has_acceleration()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->acceleration());
    }

    // optional .edu.vanderbilt.isis.meta.ForceMomentType ForceMoment = 2;
    if (has_forcemoment()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->forcemoment());
    }

    // optional .edu.vanderbilt.isis.meta.GeometryType Geometry = 3;
    if (has_geometry()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->geometry());
    }

    // optional .edu.vanderbilt.isis.meta.PressureType Pressure = 4;
    if (has_pressure()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pressure());
    }

    // optional .edu.vanderbilt.isis.meta.ID _id = 5;
    if (has__id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LoadType::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LoadType* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LoadType*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LoadType::MergeFrom(const LoadType& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_acceleration()) {
      mutable_acceleration()->::edu::vanderbilt::isis::meta::AccelerationType::MergeFrom(from.acceleration());
    }
    if (from.has_forcemoment()) {
      mutable_forcemoment()->::edu::vanderbilt::isis::meta::ForceMomentType::MergeFrom(from.forcemoment());
    }
    if (from.has_geometry()) {
      mutable_geometry()->::edu::vanderbilt::isis::meta::GeometryType::MergeFrom(from.geometry());
    }
    if (from.has_pressure()) {
      mutable_pressure()->::edu::vanderbilt::isis::meta::PressureType::MergeFrom(from.pressure());
    }
    if (from.has__id()) {
      mutable__id()->::edu::vanderbilt::isis::meta::ID::MergeFrom(from._id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LoadType::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoadType::CopyFrom(const LoadType& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoadType::IsInitialized() const {

  if (has_acceleration()) {
    if (!this->acceleration().IsInitialized()) return false;
  }
  if (has_forcemoment()) {
    if (!this->forcemoment().IsInitialized()) return false;
  }
  if (has_geometry()) {
    if (!this->geometry().IsInitialized()) return false;
  }
  if (has_pressure()) {
    if (!this->pressure().IsInitialized()) return false;
  }
  if (has__id()) {
    if (!this->_id().IsInitialized()) return false;
  }
  return true;
}

void LoadType::Swap(LoadType* other) {
  if (other != this) {
    std::swap(acceleration_, other->acceleration_);
    std::swap(forcemoment_, other->forcemoment_);
    std::swap(geometry_, other->geometry_);
    std::swap(pressure_, other->pressure_);
    std::swap(_id_, other->_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LoadType::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LoadType_descriptor_;
  metadata.reflection = LoadType_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LoadsType::kLoadFieldNumber;
const int LoadsType::kIdFieldNumber;
#endif  // !_MSC_VER

LoadsType::LoadsType()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LoadsType::InitAsDefaultInstance() {
  _id_ = const_cast< ::edu::vanderbilt::isis::meta::ID*>(&::edu::vanderbilt::isis::meta::ID::default_instance());
}

LoadsType::LoadsType(const LoadsType& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LoadsType::SharedCtor() {
  _cached_size_ = 0;
  _id_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LoadsType::~LoadsType() {
  SharedDtor();
}

void LoadsType::SharedDtor() {
  if (this != default_instance_) {
    delete _id_;
  }
}

void LoadsType::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LoadsType::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LoadsType_descriptor_;
}

const LoadsType& LoadsType::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AssemblyInterface_2eproto();
  return *default_instance_;
}

LoadsType* LoadsType::default_instance_ = NULL;

LoadsType* LoadsType::New() const {
  return new LoadsType;
}

void LoadsType::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (has__id()) {
      if (_id_ != NULL) _id_->::edu::vanderbilt::isis::meta::ID::Clear();
    }
  }
  load_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LoadsType::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .edu.vanderbilt.isis.meta.LoadType Load = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Load:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_load()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_Load;
        if (input->ExpectTag(18)) goto parse__id;
        break;
      }

      // optional .edu.vanderbilt.isis.meta.ID _id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse__id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LoadsType::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .edu.vanderbilt.isis.meta.LoadType Load = 1;
  for (int i = 0; i < this->load_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->load(i), output);
  }

  // optional .edu.vanderbilt.isis.meta.ID _id = 2;
  if (has__id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LoadsType::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .edu.vanderbilt.isis.meta.LoadType Load = 1;
  for (int i = 0; i < this->load_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->load(i), target);
  }

  // optional .edu.vanderbilt.isis.meta.ID _id = 2;
  if (has__id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LoadsType::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional .edu.vanderbilt.isis.meta.ID _id = 2;
    if (has__id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_id());
    }

  }
  // repeated .edu.vanderbilt.isis.meta.LoadType Load = 1;
  total_size += 1 * this->load_size();
  for (int i = 0; i < this->load_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->load(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LoadsType::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LoadsType* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LoadsType*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LoadsType::MergeFrom(const LoadsType& from) {
  GOOGLE_CHECK_NE(&from, this);
  load_.MergeFrom(from.load_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has__id()) {
      mutable__id()->::edu::vanderbilt::isis::meta::ID::MergeFrom(from._id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LoadsType::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoadsType::CopyFrom(const LoadsType& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoadsType::IsInitialized() const {

  for (int i = 0; i < load_size(); i++) {
    if (!this->load(i).IsInitialized()) return false;
  }
  if (has__id()) {
    if (!this->_id().IsInitialized()) return false;
  }
  return true;
}

void LoadsType::Swap(LoadsType* other) {
  if (other != this) {
    load_.Swap(&other->load_);
    std::swap(_id_, other->_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LoadsType::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LoadsType_descriptor_;
  metadata.reflection = LoadsType_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MassType::kComponentIDFieldNumber;
const int MassType::kMetricIDFieldNumber;
const int MassType::kRequestedValueTypeFieldNumber;
const int MassType::kIdFieldNumber;
#endif  // !_MSC_VER

MassType::MassType()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MassType::InitAsDefaultInstance() {
  _id_ = const_cast< ::edu::vanderbilt::isis::meta::ID*>(&::edu::vanderbilt::isis::meta::ID::default_instance());
}

MassType::MassType(const MassType& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MassType::SharedCtor() {
  _cached_size_ = 0;
  componentid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  metricid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  requestedvaluetype_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  _id_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MassType::~MassType() {
  SharedDtor();
}

void MassType::SharedDtor() {
  if (componentid_ != &::google::protobuf::internal::kEmptyString) {
    delete componentid_;
  }
  if (metricid_ != &::google::protobuf::internal::kEmptyString) {
    delete metricid_;
  }
  if (requestedvaluetype_ != &::google::protobuf::internal::kEmptyString) {
    delete requestedvaluetype_;
  }
  if (this != default_instance_) {
    delete _id_;
  }
}

void MassType::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MassType::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MassType_descriptor_;
}

const MassType& MassType::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AssemblyInterface_2eproto();
  return *default_instance_;
}

MassType* MassType::default_instance_ = NULL;

MassType* MassType::New() const {
  return new MassType;
}

void MassType::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_componentid()) {
      if (componentid_ != &::google::protobuf::internal::kEmptyString) {
        componentid_->clear();
      }
    }
    if (has_metricid()) {
      if (metricid_ != &::google::protobuf::internal::kEmptyString) {
        metricid_->clear();
      }
    }
    if (has_requestedvaluetype()) {
      if (requestedvaluetype_ != &::google::protobuf::internal::kEmptyString) {
        requestedvaluetype_->clear();
      }
    }
    if (has__id()) {
      if (_id_ != NULL) _id_->::edu::vanderbilt::isis::meta::ID::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MassType::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string ComponentID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_componentid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->componentid().data(), this->componentid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_MetricID;
        break;
      }

      // required string MetricID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_MetricID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_metricid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->metricid().data(), this->metricid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_RequestedValueType;
        break;
      }

      // required string RequestedValueType = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_RequestedValueType:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_requestedvaluetype()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->requestedvaluetype().data(), this->requestedvaluetype().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse__id;
        break;
      }

      // optional .edu.vanderbilt.isis.meta.ID _id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse__id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MassType::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string ComponentID = 1;
  if (has_componentid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->componentid().data(), this->componentid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->componentid(), output);
  }

  // required string MetricID = 2;
  if (has_metricid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->metricid().data(), this->metricid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->metricid(), output);
  }

  // required string RequestedValueType = 3;
  if (has_requestedvaluetype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->requestedvaluetype().data(), this->requestedvaluetype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->requestedvaluetype(), output);
  }

  // optional .edu.vanderbilt.isis.meta.ID _id = 4;
  if (has__id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MassType::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string ComponentID = 1;
  if (has_componentid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->componentid().data(), this->componentid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->componentid(), target);
  }

  // required string MetricID = 2;
  if (has_metricid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->metricid().data(), this->metricid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->metricid(), target);
  }

  // required string RequestedValueType = 3;
  if (has_requestedvaluetype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->requestedvaluetype().data(), this->requestedvaluetype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->requestedvaluetype(), target);
  }

  // optional .edu.vanderbilt.isis.meta.ID _id = 4;
  if (has__id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MassType::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string ComponentID = 1;
    if (has_componentid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->componentid());
    }

    // required string MetricID = 2;
    if (has_metricid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->metricid());
    }

    // required string RequestedValueType = 3;
    if (has_requestedvaluetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->requestedvaluetype());
    }

    // optional .edu.vanderbilt.isis.meta.ID _id = 4;
    if (has__id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MassType::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MassType* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MassType*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MassType::MergeFrom(const MassType& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_componentid()) {
      set_componentid(from.componentid());
    }
    if (from.has_metricid()) {
      set_metricid(from.metricid());
    }
    if (from.has_requestedvaluetype()) {
      set_requestedvaluetype(from.requestedvaluetype());
    }
    if (from.has__id()) {
      mutable__id()->::edu::vanderbilt::isis::meta::ID::MergeFrom(from._id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MassType::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MassType::CopyFrom(const MassType& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MassType::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has__id()) {
    if (!this->_id().IsInitialized()) return false;
  }
  return true;
}

void MassType::Swap(MassType* other) {
  if (other != this) {
    std::swap(componentid_, other->componentid_);
    std::swap(metricid_, other->metricid_);
    std::swap(requestedvaluetype_, other->requestedvaluetype_);
    std::swap(_id_, other->_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MassType::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MassType_descriptor_;
  metadata.reflection = MassType_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MaterialPropertyType::kPropertyNameFieldNumber;
const int MaterialPropertyType::kUnitsFieldNumber;
const int MaterialPropertyType::kValueFieldNumber;
const int MaterialPropertyType::kIdFieldNumber;
#endif  // !_MSC_VER

MaterialPropertyType::MaterialPropertyType()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MaterialPropertyType::InitAsDefaultInstance() {
  _id_ = const_cast< ::edu::vanderbilt::isis::meta::ID*>(&::edu::vanderbilt::isis::meta::ID::default_instance());
}

MaterialPropertyType::MaterialPropertyType(const MaterialPropertyType& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MaterialPropertyType::SharedCtor() {
  _cached_size_ = 0;
  propertyname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  units_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  value_ = 0;
  _id_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MaterialPropertyType::~MaterialPropertyType() {
  SharedDtor();
}

void MaterialPropertyType::SharedDtor() {
  if (propertyname_ != &::google::protobuf::internal::kEmptyString) {
    delete propertyname_;
  }
  if (units_ != &::google::protobuf::internal::kEmptyString) {
    delete units_;
  }
  if (this != default_instance_) {
    delete _id_;
  }
}

void MaterialPropertyType::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MaterialPropertyType::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MaterialPropertyType_descriptor_;
}

const MaterialPropertyType& MaterialPropertyType::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AssemblyInterface_2eproto();
  return *default_instance_;
}

MaterialPropertyType* MaterialPropertyType::default_instance_ = NULL;

MaterialPropertyType* MaterialPropertyType::New() const {
  return new MaterialPropertyType;
}

void MaterialPropertyType::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_propertyname()) {
      if (propertyname_ != &::google::protobuf::internal::kEmptyString) {
        propertyname_->clear();
      }
    }
    if (has_units()) {
      if (units_ != &::google::protobuf::internal::kEmptyString) {
        units_->clear();
      }
    }
    value_ = 0;
    if (has__id()) {
      if (_id_ != NULL) _id_->::edu::vanderbilt::isis::meta::ID::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MaterialPropertyType::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string PropertyName = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_propertyname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->propertyname().data(), this->propertyname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_Units;
        break;
      }

      // required string Units = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Units:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_units()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->units().data(), this->units().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_Value;
        break;
      }

      // required double Value = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_Value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse__id;
        break;
      }

      // optional .edu.vanderbilt.isis.meta.ID _id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse__id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MaterialPropertyType::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string PropertyName = 1;
  if (has_propertyname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->propertyname().data(), this->propertyname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->propertyname(), output);
  }

  // required string Units = 2;
  if (has_units()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->units().data(), this->units().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->units(), output);
  }

  // required double Value = 3;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->value(), output);
  }

  // optional .edu.vanderbilt.isis.meta.ID _id = 4;
  if (has__id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MaterialPropertyType::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string PropertyName = 1;
  if (has_propertyname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->propertyname().data(), this->propertyname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->propertyname(), target);
  }

  // required string Units = 2;
  if (has_units()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->units().data(), this->units().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->units(), target);
  }

  // required double Value = 3;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->value(), target);
  }

  // optional .edu.vanderbilt.isis.meta.ID _id = 4;
  if (has__id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MaterialPropertyType::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string PropertyName = 1;
    if (has_propertyname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->propertyname());
    }

    // required string Units = 2;
    if (has_units()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->units());
    }

    // required double Value = 3;
    if (has_value()) {
      total_size += 1 + 8;
    }

    // optional .edu.vanderbilt.isis.meta.ID _id = 4;
    if (has__id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MaterialPropertyType::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MaterialPropertyType* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MaterialPropertyType*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MaterialPropertyType::MergeFrom(const MaterialPropertyType& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_propertyname()) {
      set_propertyname(from.propertyname());
    }
    if (from.has_units()) {
      set_units(from.units());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
    if (from.has__id()) {
      mutable__id()->::edu::vanderbilt::isis::meta::ID::MergeFrom(from._id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MaterialPropertyType::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MaterialPropertyType::CopyFrom(const MaterialPropertyType& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MaterialPropertyType::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has__id()) {
    if (!this->_id().IsInitialized()) return false;
  }
  return true;
}

void MaterialPropertyType::Swap(MaterialPropertyType* other) {
  if (other != this) {
    std::swap(propertyname_, other->propertyname_);
    std::swap(units_, other->units_);
    std::swap(value_, other->value_);
    std::swap(_id_, other->_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MaterialPropertyType::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MaterialPropertyType_descriptor_;
  metadata.reflection = MaterialPropertyType_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MaterialType::kMaterialPropertyFieldNumber;
const int MaterialType::kMaterialIDFieldNumber;
const int MaterialType::kMaterialNameFieldNumber;
const int MaterialType::kTypeFieldNumber;
const int MaterialType::kIdFieldNumber;
#endif  // !_MSC_VER

MaterialType::MaterialType()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MaterialType::InitAsDefaultInstance() {
  _id_ = const_cast< ::edu::vanderbilt::isis::meta::ID*>(&::edu::vanderbilt::isis::meta::ID::default_instance());
}

MaterialType::MaterialType(const MaterialType& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MaterialType::SharedCtor() {
  _cached_size_ = 0;
  materialid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  materialname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  _id_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MaterialType::~MaterialType() {
  SharedDtor();
}

void MaterialType::SharedDtor() {
  if (materialid_ != &::google::protobuf::internal::kEmptyString) {
    delete materialid_;
  }
  if (materialname_ != &::google::protobuf::internal::kEmptyString) {
    delete materialname_;
  }
  if (type_ != &::google::protobuf::internal::kEmptyString) {
    delete type_;
  }
  if (this != default_instance_) {
    delete _id_;
  }
}

void MaterialType::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MaterialType::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MaterialType_descriptor_;
}

const MaterialType& MaterialType::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AssemblyInterface_2eproto();
  return *default_instance_;
}

MaterialType* MaterialType::default_instance_ = NULL;

MaterialType* MaterialType::New() const {
  return new MaterialType;
}

void MaterialType::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (has_materialid()) {
      if (materialid_ != &::google::protobuf::internal::kEmptyString) {
        materialid_->clear();
      }
    }
    if (has_materialname()) {
      if (materialname_ != &::google::protobuf::internal::kEmptyString) {
        materialname_->clear();
      }
    }
    if (has_type()) {
      if (type_ != &::google::protobuf::internal::kEmptyString) {
        type_->clear();
      }
    }
    if (has__id()) {
      if (_id_ != NULL) _id_->::edu::vanderbilt::isis::meta::ID::Clear();
    }
  }
  materialproperty_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MaterialType::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .edu.vanderbilt.isis.meta.MaterialPropertyType MaterialProperty = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_MaterialProperty:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_materialproperty()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_MaterialProperty;
        if (input->ExpectTag(18)) goto parse_MaterialID;
        break;
      }

      // required string MaterialID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_MaterialID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_materialid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->materialid().data(), this->materialid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_MaterialName;
        break;
      }

      // required string MaterialName = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_MaterialName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_materialname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->materialname().data(), this->materialname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_Type;
        break;
      }

      // required string Type = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->type().data(), this->type().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse__id;
        break;
      }

      // optional .edu.vanderbilt.isis.meta.ID _id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse__id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MaterialType::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .edu.vanderbilt.isis.meta.MaterialPropertyType MaterialProperty = 1;
  for (int i = 0; i < this->materialproperty_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->materialproperty(i), output);
  }

  // required string MaterialID = 2;
  if (has_materialid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->materialid().data(), this->materialid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->materialid(), output);
  }

  // required string MaterialName = 3;
  if (has_materialname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->materialname().data(), this->materialname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->materialname(), output);
  }

  // required string Type = 4;
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->type(), output);
  }

  // optional .edu.vanderbilt.isis.meta.ID _id = 5;
  if (has__id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MaterialType::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .edu.vanderbilt.isis.meta.MaterialPropertyType MaterialProperty = 1;
  for (int i = 0; i < this->materialproperty_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->materialproperty(i), target);
  }

  // required string MaterialID = 2;
  if (has_materialid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->materialid().data(), this->materialid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->materialid(), target);
  }

  // required string MaterialName = 3;
  if (has_materialname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->materialname().data(), this->materialname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->materialname(), target);
  }

  // required string Type = 4;
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->type(), target);
  }

  // optional .edu.vanderbilt.isis.meta.ID _id = 5;
  if (has__id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MaterialType::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // required string MaterialID = 2;
    if (has_materialid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->materialid());
    }

    // required string MaterialName = 3;
    if (has_materialname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->materialname());
    }

    // required string Type = 4;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->type());
    }

    // optional .edu.vanderbilt.isis.meta.ID _id = 5;
    if (has__id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_id());
    }

  }
  // repeated .edu.vanderbilt.isis.meta.MaterialPropertyType MaterialProperty = 1;
  total_size += 1 * this->materialproperty_size();
  for (int i = 0; i < this->materialproperty_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->materialproperty(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MaterialType::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MaterialType* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MaterialType*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MaterialType::MergeFrom(const MaterialType& from) {
  GOOGLE_CHECK_NE(&from, this);
  materialproperty_.MergeFrom(from.materialproperty_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_materialid()) {
      set_materialid(from.materialid());
    }
    if (from.has_materialname()) {
      set_materialname(from.materialname());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has__id()) {
      mutable__id()->::edu::vanderbilt::isis::meta::ID::MergeFrom(from._id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MaterialType::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MaterialType::CopyFrom(const MaterialType& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MaterialType::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000e) != 0x0000000e) return false;

  for (int i = 0; i < materialproperty_size(); i++) {
    if (!this->materialproperty(i).IsInitialized()) return false;
  }
  if (has__id()) {
    if (!this->_id().IsInitialized()) return false;
  }
  return true;
}

void MaterialType::Swap(MaterialType* other) {
  if (other != this) {
    materialproperty_.Swap(&other->materialproperty_);
    std::swap(materialid_, other->materialid_);
    std::swap(materialname_, other->materialname_);
    std::swap(type_, other->type_);
    std::swap(_id_, other->_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MaterialType::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MaterialType_descriptor_;
  metadata.reflection = MaterialType_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MaterialsType::kMaterialFieldNumber;
const int MaterialsType::kIdFieldNumber;
#endif  // !_MSC_VER

MaterialsType::MaterialsType()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MaterialsType::InitAsDefaultInstance() {
  _id_ = const_cast< ::edu::vanderbilt::isis::meta::ID*>(&::edu::vanderbilt::isis::meta::ID::default_instance());
}

MaterialsType::MaterialsType(const MaterialsType& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MaterialsType::SharedCtor() {
  _cached_size_ = 0;
  _id_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MaterialsType::~MaterialsType() {
  SharedDtor();
}

void MaterialsType::SharedDtor() {
  if (this != default_instance_) {
    delete _id_;
  }
}

void MaterialsType::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MaterialsType::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MaterialsType_descriptor_;
}

const MaterialsType& MaterialsType::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AssemblyInterface_2eproto();
  return *default_instance_;
}

MaterialsType* MaterialsType::default_instance_ = NULL;

MaterialsType* MaterialsType::New() const {
  return new MaterialsType;
}

void MaterialsType::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (has__id()) {
      if (_id_ != NULL) _id_->::edu::vanderbilt::isis::meta::ID::Clear();
    }
  }
  material_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MaterialsType::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .edu.vanderbilt.isis.meta.MaterialType Material = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Material:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_material()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_Material;
        if (input->ExpectTag(18)) goto parse__id;
        break;
      }

      // optional .edu.vanderbilt.isis.meta.ID _id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse__id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MaterialsType::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .edu.vanderbilt.isis.meta.MaterialType Material = 1;
  for (int i = 0; i < this->material_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->material(i), output);
  }

  // optional .edu.vanderbilt.isis.meta.ID _id = 2;
  if (has__id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MaterialsType::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .edu.vanderbilt.isis.meta.MaterialType Material = 1;
  for (int i = 0; i < this->material_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->material(i), target);
  }

  // optional .edu.vanderbilt.isis.meta.ID _id = 2;
  if (has__id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MaterialsType::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional .edu.vanderbilt.isis.meta.ID _id = 2;
    if (has__id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_id());
    }

  }
  // repeated .edu.vanderbilt.isis.meta.MaterialType Material = 1;
  total_size += 1 * this->material_size();
  for (int i = 0; i < this->material_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->material(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MaterialsType::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MaterialsType* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MaterialsType*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MaterialsType::MergeFrom(const MaterialsType& from) {
  GOOGLE_CHECK_NE(&from, this);
  material_.MergeFrom(from.material_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has__id()) {
      mutable__id()->::edu::vanderbilt::isis::meta::ID::MergeFrom(from._id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MaterialsType::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MaterialsType::CopyFrom(const MaterialsType& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MaterialsType::IsInitialized() const {

  for (int i = 0; i < material_size(); i++) {
    if (!this->material(i).IsInitialized()) return false;
  }
  if (has__id()) {
    if (!this->_id().IsInitialized()) return false;
  }
  return true;
}

void MaterialsType::Swap(MaterialsType* other) {
  if (other != this) {
    material_.Swap(&other->material_);
    std::swap(_id_, other->_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MaterialsType::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MaterialsType_descriptor_;
  metadata.reflection = MaterialsType_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MetricType::kIDFieldNumber;
const int MetricType::kTypeFieldNumber;
const int MetricType::kIdFieldNumber;
#endif  // !_MSC_VER

MetricType::MetricType()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MetricType::InitAsDefaultInstance() {
  _id_ = const_cast< ::edu::vanderbilt::isis::meta::ID*>(&::edu::vanderbilt::isis::meta::ID::default_instance());
}

MetricType::MetricType(const MetricType& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MetricType::SharedCtor() {
  _cached_size_ = 0;
  id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  _id_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MetricType::~MetricType() {
  SharedDtor();
}

void MetricType::SharedDtor() {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    delete id_;
  }
  if (type_ != &::google::protobuf::internal::kEmptyString) {
    delete type_;
  }
  if (this != default_instance_) {
    delete _id_;
  }
}

void MetricType::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MetricType::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MetricType_descriptor_;
}

const MetricType& MetricType::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AssemblyInterface_2eproto();
  return *default_instance_;
}

MetricType* MetricType::default_instance_ = NULL;

MetricType* MetricType::New() const {
  return new MetricType;
}

void MetricType::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_id()) {
      if (id_ != &::google::protobuf::internal::kEmptyString) {
        id_->clear();
      }
    }
    if (has_type()) {
      if (type_ != &::google::protobuf::internal::kEmptyString) {
        type_->clear();
      }
    }
    if (has__id()) {
      if (_id_ != NULL) _id_->::edu::vanderbilt::isis::meta::ID::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MetricType::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string ID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_Type;
        break;
      }

      // required string Type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->type().data(), this->type().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse__id;
        break;
      }

      // optional .edu.vanderbilt.isis.meta.ID _id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse__id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MetricType::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string ID = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->id(), output);
  }

  // required string Type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->type(), output);
  }

  // optional .edu.vanderbilt.isis.meta.ID _id = 3;
  if (has__id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MetricType::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string ID = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // required string Type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->type(), target);
  }

  // optional .edu.vanderbilt.isis.meta.ID _id = 3;
  if (has__id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MetricType::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string ID = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }

    // required string Type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->type());
    }

    // optional .edu.vanderbilt.isis.meta.ID _id = 3;
    if (has__id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MetricType::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MetricType* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MetricType*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MetricType::MergeFrom(const MetricType& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has__id()) {
      mutable__id()->::edu::vanderbilt::isis::meta::ID::MergeFrom(from._id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MetricType::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MetricType::CopyFrom(const MetricType& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MetricType::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has__id()) {
    if (!this->_id().IsInitialized()) return false;
  }
  return true;
}

void MetricType::Swap(MetricType* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(type_, other->type_);
    std::swap(_id_, other->_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MetricType::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MetricType_descriptor_;
  metadata.reflection = MetricType_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MetricsType::kMetricFieldNumber;
const int MetricsType::kIdFieldNumber;
#endif  // !_MSC_VER

MetricsType::MetricsType()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MetricsType::InitAsDefaultInstance() {
  _id_ = const_cast< ::edu::vanderbilt::isis::meta::ID*>(&::edu::vanderbilt::isis::meta::ID::default_instance());
}

MetricsType::MetricsType(const MetricsType& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MetricsType::SharedCtor() {
  _cached_size_ = 0;
  _id_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MetricsType::~MetricsType() {
  SharedDtor();
}

void MetricsType::SharedDtor() {
  if (this != default_instance_) {
    delete _id_;
  }
}

void MetricsType::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MetricsType::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MetricsType_descriptor_;
}

const MetricsType& MetricsType::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AssemblyInterface_2eproto();
  return *default_instance_;
}

MetricsType* MetricsType::default_instance_ = NULL;

MetricsType* MetricsType::New() const {
  return new MetricsType;
}

void MetricsType::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (has__id()) {
      if (_id_ != NULL) _id_->::edu::vanderbilt::isis::meta::ID::Clear();
    }
  }
  metric_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MetricsType::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .edu.vanderbilt.isis.meta.MetricType Metric = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Metric:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_metric()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_Metric;
        if (input->ExpectTag(18)) goto parse__id;
        break;
      }

      // optional .edu.vanderbilt.isis.meta.ID _id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse__id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MetricsType::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .edu.vanderbilt.isis.meta.MetricType Metric = 1;
  for (int i = 0; i < this->metric_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->metric(i), output);
  }

  // optional .edu.vanderbilt.isis.meta.ID _id = 2;
  if (has__id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MetricsType::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .edu.vanderbilt.isis.meta.MetricType Metric = 1;
  for (int i = 0; i < this->metric_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->metric(i), target);
  }

  // optional .edu.vanderbilt.isis.meta.ID _id = 2;
  if (has__id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MetricsType::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional .edu.vanderbilt.isis.meta.ID _id = 2;
    if (has__id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_id());
    }

  }
  // repeated .edu.vanderbilt.isis.meta.MetricType Metric = 1;
  total_size += 1 * this->metric_size();
  for (int i = 0; i < this->metric_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->metric(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MetricsType::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MetricsType* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MetricsType*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MetricsType::MergeFrom(const MetricsType& from) {
  GOOGLE_CHECK_NE(&from, this);
  metric_.MergeFrom(from.metric_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has__id()) {
      mutable__id()->::edu::vanderbilt::isis::meta::ID::MergeFrom(from._id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MetricsType::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MetricsType::CopyFrom(const MetricsType& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MetricsType::IsInitialized() const {

  for (int i = 0; i < metric_size(); i++) {
    if (!this->metric(i).IsInitialized()) return false;
  }
  if (has__id()) {
    if (!this->_id().IsInitialized()) return false;
  }
  return true;
}

void MetricsType::Swap(MetricsType* other) {
  if (other != this) {
    metric_.Swap(&other->metric_);
    std::swap(_id_, other->_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MetricsType::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MetricsType_descriptor_;
  metadata.reflection = MetricsType_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MomentType::kUnitsFieldNumber;
const int MomentType::kIdFieldNumber;
const int MomentType::kXFieldNumber;
const int MomentType::kYFieldNumber;
const int MomentType::kZFieldNumber;
#endif  // !_MSC_VER

MomentType::MomentType()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MomentType::InitAsDefaultInstance() {
  _id_ = const_cast< ::edu::vanderbilt::isis::meta::ID*>(&::edu::vanderbilt::isis::meta::ID::default_instance());
}

MomentType::MomentType(const MomentType& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MomentType::SharedCtor() {
  _cached_size_ = 0;
  units_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  _id_ = NULL;
  x_ = 0;
  y_ = 0;
  z_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MomentType::~MomentType() {
  SharedDtor();
}

void MomentType::SharedDtor() {
  if (units_ != &::google::protobuf::internal::kEmptyString) {
    delete units_;
  }
  if (this != default_instance_) {
    delete _id_;
  }
}

void MomentType::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MomentType::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MomentType_descriptor_;
}

const MomentType& MomentType::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AssemblyInterface_2eproto();
  return *default_instance_;
}

MomentType* MomentType::default_instance_ = NULL;

MomentType* MomentType::New() const {
  return new MomentType;
}

void MomentType::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_units()) {
      if (units_ != &::google::protobuf::internal::kEmptyString) {
        units_->clear();
      }
    }
    if (has__id()) {
      if (_id_ != NULL) _id_->::edu::vanderbilt::isis::meta::ID::Clear();
    }
    x_ = 0;
    y_ = 0;
    z_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MomentType::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string Units = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_units()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->units().data(), this->units().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse__id;
        break;
      }

      // optional .edu.vanderbilt.isis.meta.ID _id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse__id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_x;
        break;
      }

      // required double x = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_y;
        break;
      }

      // required double y = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(41)) goto parse_z;
        break;
      }

      // required double z = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_z:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &z_)));
          set_has_z();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MomentType::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string Units = 1;
  if (has_units()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->units().data(), this->units().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->units(), output);
  }

  // optional .edu.vanderbilt.isis.meta.ID _id = 2;
  if (has__id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_id(), output);
  }

  // required double x = 3;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->x(), output);
  }

  // required double y = 4;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->y(), output);
  }

  // required double z = 5;
  if (has_z()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->z(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MomentType::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string Units = 1;
  if (has_units()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->units().data(), this->units().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->units(), target);
  }

  // optional .edu.vanderbilt.isis.meta.ID _id = 2;
  if (has__id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->_id(), target);
  }

  // required double x = 3;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->x(), target);
  }

  // required double y = 4;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->y(), target);
  }

  // required double z = 5;
  if (has_z()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->z(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MomentType::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string Units = 1;
    if (has_units()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->units());
    }

    // optional .edu.vanderbilt.isis.meta.ID _id = 2;
    if (has__id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_id());
    }

    // required double x = 3;
    if (has_x()) {
      total_size += 1 + 8;
    }

    // required double y = 4;
    if (has_y()) {
      total_size += 1 + 8;
    }

    // required double z = 5;
    if (has_z()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MomentType::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MomentType* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MomentType*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MomentType::MergeFrom(const MomentType& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_units()) {
      set_units(from.units());
    }
    if (from.has__id()) {
      mutable__id()->::edu::vanderbilt::isis::meta::ID::MergeFrom(from._id());
    }
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
    if (from.has_z()) {
      set_z(from.z());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MomentType::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MomentType::CopyFrom(const MomentType& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MomentType::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001d) != 0x0000001d) return false;

  if (has__id()) {
    if (!this->_id().IsInitialized()) return false;
  }
  return true;
}

void MomentType::Swap(MomentType* other) {
  if (other != this) {
    std::swap(units_, other->units_);
    std::swap(_id_, other->_id_);
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(z_, other->z_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MomentType::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MomentType_descriptor_;
  metadata.reflection = MomentType_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PairType::kConstraintFeatureAFieldNumber;
const int PairType::kConstraintFeatureBFieldNumber;
const int PairType::kConstraintOffsetFieldNumber;
const int PairType::kFeatureAlignmentTypeFieldNumber;
const int PairType::kFeatureGeometryTypeFieldNumber;
const int PairType::kFeatureInterfaceTypeFieldNumber;
const int PairType::kIdFieldNumber;
#endif  // !_MSC_VER

PairType::PairType()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PairType::InitAsDefaultInstance() {
  constraintfeaturea_ = const_cast< ::edu::vanderbilt::isis::meta::ConstraintFeatureType*>(&::edu::vanderbilt::isis::meta::ConstraintFeatureType::default_instance());
  constraintfeatureb_ = const_cast< ::edu::vanderbilt::isis::meta::ConstraintFeatureType*>(&::edu::vanderbilt::isis::meta::ConstraintFeatureType::default_instance());
  constraintoffset_ = const_cast< ::edu::vanderbilt::isis::meta::ConstraintOffsetType*>(&::edu::vanderbilt::isis::meta::ConstraintOffsetType::default_instance());
  _id_ = const_cast< ::edu::vanderbilt::isis::meta::ID*>(&::edu::vanderbilt::isis::meta::ID::default_instance());
}

PairType::PairType(const PairType& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PairType::SharedCtor() {
  _cached_size_ = 0;
  constraintfeaturea_ = NULL;
  constraintfeatureb_ = NULL;
  constraintoffset_ = NULL;
  featurealignmenttype_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  featuregeometrytype_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  featureinterfacetype_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  _id_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PairType::~PairType() {
  SharedDtor();
}

void PairType::SharedDtor() {
  if (featurealignmenttype_ != &::google::protobuf::internal::kEmptyString) {
    delete featurealignmenttype_;
  }
  if (featuregeometrytype_ != &::google::protobuf::internal::kEmptyString) {
    delete featuregeometrytype_;
  }
  if (featureinterfacetype_ != &::google::protobuf::internal::kEmptyString) {
    delete featureinterfacetype_;
  }
  if (this != default_instance_) {
    delete constraintfeaturea_;
    delete constraintfeatureb_;
    delete constraintoffset_;
    delete _id_;
  }
}

void PairType::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PairType::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PairType_descriptor_;
}

const PairType& PairType::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AssemblyInterface_2eproto();
  return *default_instance_;
}

PairType* PairType::default_instance_ = NULL;

PairType* PairType::New() const {
  return new PairType;
}

void PairType::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_constraintfeaturea()) {
      if (constraintfeaturea_ != NULL) constraintfeaturea_->::edu::vanderbilt::isis::meta::ConstraintFeatureType::Clear();
    }
    if (has_constraintfeatureb()) {
      if (constraintfeatureb_ != NULL) constraintfeatureb_->::edu::vanderbilt::isis::meta::ConstraintFeatureType::Clear();
    }
    if (has_constraintoffset()) {
      if (constraintoffset_ != NULL) constraintoffset_->::edu::vanderbilt::isis::meta::ConstraintOffsetType::Clear();
    }
    if (has_featurealignmenttype()) {
      if (featurealignmenttype_ != &::google::protobuf::internal::kEmptyString) {
        featurealignmenttype_->clear();
      }
    }
    if (has_featuregeometrytype()) {
      if (featuregeometrytype_ != &::google::protobuf::internal::kEmptyString) {
        featuregeometrytype_->clear();
      }
    }
    if (has_featureinterfacetype()) {
      if (featureinterfacetype_ != &::google::protobuf::internal::kEmptyString) {
        featureinterfacetype_->clear();
      }
    }
    if (has__id()) {
      if (_id_ != NULL) _id_->::edu::vanderbilt::isis::meta::ID::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PairType::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .edu.vanderbilt.isis.meta.ConstraintFeatureType ConstraintFeatureA = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_constraintfeaturea()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_ConstraintFeatureB;
        break;
      }

      // required .edu.vanderbilt.isis.meta.ConstraintFeatureType ConstraintFeatureB = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ConstraintFeatureB:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_constraintfeatureb()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_ConstraintOffset;
        break;
      }

      // optional .edu.vanderbilt.isis.meta.ConstraintOffsetType ConstraintOffset = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ConstraintOffset:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_constraintoffset()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_FeatureAlignmentType;
        break;
      }

      // required string FeatureAlignmentType = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_FeatureAlignmentType:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_featurealignmenttype()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->featurealignmenttype().data(), this->featurealignmenttype().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_FeatureGeometryType;
        break;
      }

      // required string FeatureGeometryType = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_FeatureGeometryType:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_featuregeometrytype()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->featuregeometrytype().data(), this->featuregeometrytype().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_FeatureInterfaceType;
        break;
      }

      // required string FeatureInterfaceType = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_FeatureInterfaceType:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_featureinterfacetype()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->featureinterfacetype().data(), this->featureinterfacetype().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse__id;
        break;
      }

      // optional .edu.vanderbilt.isis.meta.ID _id = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse__id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PairType::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .edu.vanderbilt.isis.meta.ConstraintFeatureType ConstraintFeatureA = 1;
  if (has_constraintfeaturea()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->constraintfeaturea(), output);
  }

  // required .edu.vanderbilt.isis.meta.ConstraintFeatureType ConstraintFeatureB = 2;
  if (has_constraintfeatureb()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->constraintfeatureb(), output);
  }

  // optional .edu.vanderbilt.isis.meta.ConstraintOffsetType ConstraintOffset = 3;
  if (has_constraintoffset()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->constraintoffset(), output);
  }

  // required string FeatureAlignmentType = 4;
  if (has_featurealignmenttype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->featurealignmenttype().data(), this->featurealignmenttype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->featurealignmenttype(), output);
  }

  // required string FeatureGeometryType = 5;
  if (has_featuregeometrytype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->featuregeometrytype().data(), this->featuregeometrytype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->featuregeometrytype(), output);
  }

  // required string FeatureInterfaceType = 6;
  if (has_featureinterfacetype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->featureinterfacetype().data(), this->featureinterfacetype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->featureinterfacetype(), output);
  }

  // optional .edu.vanderbilt.isis.meta.ID _id = 7;
  if (has__id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PairType::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .edu.vanderbilt.isis.meta.ConstraintFeatureType ConstraintFeatureA = 1;
  if (has_constraintfeaturea()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->constraintfeaturea(), target);
  }

  // required .edu.vanderbilt.isis.meta.ConstraintFeatureType ConstraintFeatureB = 2;
  if (has_constraintfeatureb()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->constraintfeatureb(), target);
  }

  // optional .edu.vanderbilt.isis.meta.ConstraintOffsetType ConstraintOffset = 3;
  if (has_constraintoffset()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->constraintoffset(), target);
  }

  // required string FeatureAlignmentType = 4;
  if (has_featurealignmenttype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->featurealignmenttype().data(), this->featurealignmenttype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->featurealignmenttype(), target);
  }

  // required string FeatureGeometryType = 5;
  if (has_featuregeometrytype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->featuregeometrytype().data(), this->featuregeometrytype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->featuregeometrytype(), target);
  }

  // required string FeatureInterfaceType = 6;
  if (has_featureinterfacetype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->featureinterfacetype().data(), this->featureinterfacetype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->featureinterfacetype(), target);
  }

  // optional .edu.vanderbilt.isis.meta.ID _id = 7;
  if (has__id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PairType::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .edu.vanderbilt.isis.meta.ConstraintFeatureType ConstraintFeatureA = 1;
    if (has_constraintfeaturea()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->constraintfeaturea());
    }

    // required .edu.vanderbilt.isis.meta.ConstraintFeatureType ConstraintFeatureB = 2;
    if (has_constraintfeatureb()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->constraintfeatureb());
    }

    // optional .edu.vanderbilt.isis.meta.ConstraintOffsetType ConstraintOffset = 3;
    if (has_constraintoffset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->constraintoffset());
    }

    // required string FeatureAlignmentType = 4;
    if (has_featurealignmenttype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->featurealignmenttype());
    }

    // required string FeatureGeometryType = 5;
    if (has_featuregeometrytype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->featuregeometrytype());
    }

    // required string FeatureInterfaceType = 6;
    if (has_featureinterfacetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->featureinterfacetype());
    }

    // optional .edu.vanderbilt.isis.meta.ID _id = 7;
    if (has__id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PairType::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PairType* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PairType*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PairType::MergeFrom(const PairType& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_constraintfeaturea()) {
      mutable_constraintfeaturea()->::edu::vanderbilt::isis::meta::ConstraintFeatureType::MergeFrom(from.constraintfeaturea());
    }
    if (from.has_constraintfeatureb()) {
      mutable_constraintfeatureb()->::edu::vanderbilt::isis::meta::ConstraintFeatureType::MergeFrom(from.constraintfeatureb());
    }
    if (from.has_constraintoffset()) {
      mutable_constraintoffset()->::edu::vanderbilt::isis::meta::ConstraintOffsetType::MergeFrom(from.constraintoffset());
    }
    if (from.has_featurealignmenttype()) {
      set_featurealignmenttype(from.featurealignmenttype());
    }
    if (from.has_featuregeometrytype()) {
      set_featuregeometrytype(from.featuregeometrytype());
    }
    if (from.has_featureinterfacetype()) {
      set_featureinterfacetype(from.featureinterfacetype());
    }
    if (from.has__id()) {
      mutable__id()->::edu::vanderbilt::isis::meta::ID::MergeFrom(from._id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PairType::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PairType::CopyFrom(const PairType& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PairType::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003b) != 0x0000003b) return false;

  if (has_constraintfeaturea()) {
    if (!this->constraintfeaturea().IsInitialized()) return false;
  }
  if (has_constraintfeatureb()) {
    if (!this->constraintfeatureb().IsInitialized()) return false;
  }
  if (has_constraintoffset()) {
    if (!this->constraintoffset().IsInitialized()) return false;
  }
  if (has__id()) {
    if (!this->_id().IsInitialized()) return false;
  }
  return true;
}

void PairType::Swap(PairType* other) {
  if (other != this) {
    std::swap(constraintfeaturea_, other->constraintfeaturea_);
    std::swap(constraintfeatureb_, other->constraintfeatureb_);
    std::swap(constraintoffset_, other->constraintoffset_);
    std::swap(featurealignmenttype_, other->featurealignmenttype_);
    std::swap(featuregeometrytype_, other->featuregeometrytype_);
    std::swap(featureinterfacetype_, other->featureinterfacetype_);
    std::swap(_id_, other->_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PairType::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PairType_descriptor_;
  metadata.reflection = PairType_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ParametricParametersType::kCADParameterFieldNumber;
const int ParametricParametersType::kIdFieldNumber;
#endif  // !_MSC_VER

ParametricParametersType::ParametricParametersType()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ParametricParametersType::InitAsDefaultInstance() {
  _id_ = const_cast< ::edu::vanderbilt::isis::meta::ID*>(&::edu::vanderbilt::isis::meta::ID::default_instance());
}

ParametricParametersType::ParametricParametersType(const ParametricParametersType& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ParametricParametersType::SharedCtor() {
  _cached_size_ = 0;
  _id_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ParametricParametersType::~ParametricParametersType() {
  SharedDtor();
}

void ParametricParametersType::SharedDtor() {
  if (this != default_instance_) {
    delete _id_;
  }
}

void ParametricParametersType::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ParametricParametersType::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ParametricParametersType_descriptor_;
}

const ParametricParametersType& ParametricParametersType::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AssemblyInterface_2eproto();
  return *default_instance_;
}

ParametricParametersType* ParametricParametersType::default_instance_ = NULL;

ParametricParametersType* ParametricParametersType::New() const {
  return new ParametricParametersType;
}

void ParametricParametersType::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (has__id()) {
      if (_id_ != NULL) _id_->::edu::vanderbilt::isis::meta::ID::Clear();
    }
  }
  cadparameter_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ParametricParametersType::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .edu.vanderbilt.isis.meta.CADParameterType CADParameter = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_CADParameter:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_cadparameter()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_CADParameter;
        if (input->ExpectTag(18)) goto parse__id;
        break;
      }

      // optional .edu.vanderbilt.isis.meta.ID _id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse__id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ParametricParametersType::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .edu.vanderbilt.isis.meta.CADParameterType CADParameter = 1;
  for (int i = 0; i < this->cadparameter_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->cadparameter(i), output);
  }

  // optional .edu.vanderbilt.isis.meta.ID _id = 2;
  if (has__id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ParametricParametersType::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .edu.vanderbilt.isis.meta.CADParameterType CADParameter = 1;
  for (int i = 0; i < this->cadparameter_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->cadparameter(i), target);
  }

  // optional .edu.vanderbilt.isis.meta.ID _id = 2;
  if (has__id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ParametricParametersType::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional .edu.vanderbilt.isis.meta.ID _id = 2;
    if (has__id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_id());
    }

  }
  // repeated .edu.vanderbilt.isis.meta.CADParameterType CADParameter = 1;
  total_size += 1 * this->cadparameter_size();
  for (int i = 0; i < this->cadparameter_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->cadparameter(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ParametricParametersType::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ParametricParametersType* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ParametricParametersType*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ParametricParametersType::MergeFrom(const ParametricParametersType& from) {
  GOOGLE_CHECK_NE(&from, this);
  cadparameter_.MergeFrom(from.cadparameter_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has__id()) {
      mutable__id()->::edu::vanderbilt::isis::meta::ID::MergeFrom(from._id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ParametricParametersType::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ParametricParametersType::CopyFrom(const ParametricParametersType& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ParametricParametersType::IsInitialized() const {

  for (int i = 0; i < cadparameter_size(); i++) {
    if (!this->cadparameter(i).IsInitialized()) return false;
  }
  if (has__id()) {
    if (!this->_id().IsInitialized()) return false;
  }
  return true;
}

void ParametricParametersType::Swap(ParametricParametersType* other) {
  if (other != this) {
    cadparameter_.Swap(&other->cadparameter_);
    std::swap(_id_, other->_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ParametricParametersType::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ParametricParametersType_descriptor_;
  metadata.reflection = ParametricParametersType_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PartInterfaceType::kComponentID1FieldNumber;
const int PartInterfaceType::kComponentID2FieldNumber;
const int PartInterfaceType::kTypeFieldNumber;
const int PartInterfaceType::kIdFieldNumber;
#endif  // !_MSC_VER

PartInterfaceType::PartInterfaceType()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PartInterfaceType::InitAsDefaultInstance() {
  _id_ = const_cast< ::edu::vanderbilt::isis::meta::ID*>(&::edu::vanderbilt::isis::meta::ID::default_instance());
}

PartInterfaceType::PartInterfaceType(const PartInterfaceType& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PartInterfaceType::SharedCtor() {
  _cached_size_ = 0;
  componentid_1_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  componentid_2_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  _id_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PartInterfaceType::~PartInterfaceType() {
  SharedDtor();
}

void PartInterfaceType::SharedDtor() {
  if (componentid_1_ != &::google::protobuf::internal::kEmptyString) {
    delete componentid_1_;
  }
  if (componentid_2_ != &::google::protobuf::internal::kEmptyString) {
    delete componentid_2_;
  }
  if (type_ != &::google::protobuf::internal::kEmptyString) {
    delete type_;
  }
  if (this != default_instance_) {
    delete _id_;
  }
}

void PartInterfaceType::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PartInterfaceType::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PartInterfaceType_descriptor_;
}

const PartInterfaceType& PartInterfaceType::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AssemblyInterface_2eproto();
  return *default_instance_;
}

PartInterfaceType* PartInterfaceType::default_instance_ = NULL;

PartInterfaceType* PartInterfaceType::New() const {
  return new PartInterfaceType;
}

void PartInterfaceType::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_componentid_1()) {
      if (componentid_1_ != &::google::protobuf::internal::kEmptyString) {
        componentid_1_->clear();
      }
    }
    if (has_componentid_2()) {
      if (componentid_2_ != &::google::protobuf::internal::kEmptyString) {
        componentid_2_->clear();
      }
    }
    if (has_type()) {
      if (type_ != &::google::protobuf::internal::kEmptyString) {
        type_->clear();
      }
    }
    if (has__id()) {
      if (_id_ != NULL) _id_->::edu::vanderbilt::isis::meta::ID::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PartInterfaceType::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string ComponentID_1 = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_componentid_1()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->componentid_1().data(), this->componentid_1().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_ComponentID_2;
        break;
      }

      // required string ComponentID_2 = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ComponentID_2:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_componentid_2()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->componentid_2().data(), this->componentid_2().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_Type;
        break;
      }

      // required string Type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->type().data(), this->type().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse__id;
        break;
      }

      // optional .edu.vanderbilt.isis.meta.ID _id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse__id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PartInterfaceType::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string ComponentID_1 = 1;
  if (has_componentid_1()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->componentid_1().data(), this->componentid_1().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->componentid_1(), output);
  }

  // required string ComponentID_2 = 2;
  if (has_componentid_2()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->componentid_2().data(), this->componentid_2().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->componentid_2(), output);
  }

  // required string Type = 3;
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->type(), output);
  }

  // optional .edu.vanderbilt.isis.meta.ID _id = 4;
  if (has__id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PartInterfaceType::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string ComponentID_1 = 1;
  if (has_componentid_1()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->componentid_1().data(), this->componentid_1().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->componentid_1(), target);
  }

  // required string ComponentID_2 = 2;
  if (has_componentid_2()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->componentid_2().data(), this->componentid_2().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->componentid_2(), target);
  }

  // required string Type = 3;
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->type(), target);
  }

  // optional .edu.vanderbilt.isis.meta.ID _id = 4;
  if (has__id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PartInterfaceType::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string ComponentID_1 = 1;
    if (has_componentid_1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->componentid_1());
    }

    // required string ComponentID_2 = 2;
    if (has_componentid_2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->componentid_2());
    }

    // required string Type = 3;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->type());
    }

    // optional .edu.vanderbilt.isis.meta.ID _id = 4;
    if (has__id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PartInterfaceType::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PartInterfaceType* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PartInterfaceType*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PartInterfaceType::MergeFrom(const PartInterfaceType& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_componentid_1()) {
      set_componentid_1(from.componentid_1());
    }
    if (from.has_componentid_2()) {
      set_componentid_2(from.componentid_2());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has__id()) {
      mutable__id()->::edu::vanderbilt::isis::meta::ID::MergeFrom(from._id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PartInterfaceType::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PartInterfaceType::CopyFrom(const PartInterfaceType& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PartInterfaceType::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has__id()) {
    if (!this->_id().IsInitialized()) return false;
  }
  return true;
}

void PartInterfaceType::Swap(PartInterfaceType* other) {
  if (other != this) {
    std::swap(componentid_1_, other->componentid_1_);
    std::swap(componentid_2_, other->componentid_2_);
    std::swap(type_, other->type_);
    std::swap(_id_, other->_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PartInterfaceType::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PartInterfaceType_descriptor_;
  metadata.reflection = PartInterfaceType_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PartInterfacesType::kPartInterfaceFieldNumber;
const int PartInterfacesType::kIdFieldNumber;
#endif  // !_MSC_VER

PartInterfacesType::PartInterfacesType()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PartInterfacesType::InitAsDefaultInstance() {
  _id_ = const_cast< ::edu::vanderbilt::isis::meta::ID*>(&::edu::vanderbilt::isis::meta::ID::default_instance());
}

PartInterfacesType::PartInterfacesType(const PartInterfacesType& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PartInterfacesType::SharedCtor() {
  _cached_size_ = 0;
  _id_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PartInterfacesType::~PartInterfacesType() {
  SharedDtor();
}

void PartInterfacesType::SharedDtor() {
  if (this != default_instance_) {
    delete _id_;
  }
}

void PartInterfacesType::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PartInterfacesType::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PartInterfacesType_descriptor_;
}

const PartInterfacesType& PartInterfacesType::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AssemblyInterface_2eproto();
  return *default_instance_;
}

PartInterfacesType* PartInterfacesType::default_instance_ = NULL;

PartInterfacesType* PartInterfacesType::New() const {
  return new PartInterfacesType;
}

void PartInterfacesType::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (has__id()) {
      if (_id_ != NULL) _id_->::edu::vanderbilt::isis::meta::ID::Clear();
    }
  }
  partinterface_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PartInterfacesType::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .edu.vanderbilt.isis.meta.PartInterfaceType PartInterface = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_PartInterface:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_partinterface()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_PartInterface;
        if (input->ExpectTag(18)) goto parse__id;
        break;
      }

      // optional .edu.vanderbilt.isis.meta.ID _id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse__id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PartInterfacesType::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .edu.vanderbilt.isis.meta.PartInterfaceType PartInterface = 1;
  for (int i = 0; i < this->partinterface_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->partinterface(i), output);
  }

  // optional .edu.vanderbilt.isis.meta.ID _id = 2;
  if (has__id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PartInterfacesType::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .edu.vanderbilt.isis.meta.PartInterfaceType PartInterface = 1;
  for (int i = 0; i < this->partinterface_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->partinterface(i), target);
  }

  // optional .edu.vanderbilt.isis.meta.ID _id = 2;
  if (has__id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PartInterfacesType::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional .edu.vanderbilt.isis.meta.ID _id = 2;
    if (has__id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_id());
    }

  }
  // repeated .edu.vanderbilt.isis.meta.PartInterfaceType PartInterface = 1;
  total_size += 1 * this->partinterface_size();
  for (int i = 0; i < this->partinterface_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->partinterface(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PartInterfacesType::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PartInterfacesType* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PartInterfacesType*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PartInterfacesType::MergeFrom(const PartInterfacesType& from) {
  GOOGLE_CHECK_NE(&from, this);
  partinterface_.MergeFrom(from.partinterface_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has__id()) {
      mutable__id()->::edu::vanderbilt::isis::meta::ID::MergeFrom(from._id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PartInterfacesType::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PartInterfacesType::CopyFrom(const PartInterfacesType& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PartInterfacesType::IsInitialized() const {

  for (int i = 0; i < partinterface_size(); i++) {
    if (!this->partinterface(i).IsInitialized()) return false;
  }
  if (has__id()) {
    if (!this->_id().IsInitialized()) return false;
  }
  return true;
}

void PartInterfacesType::Swap(PartInterfacesType* other) {
  if (other != this) {
    partinterface_.Swap(&other->partinterface_);
    std::swap(_id_, other->_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PartInterfacesType::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PartInterfacesType_descriptor_;
  metadata.reflection = PartInterfacesType_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PinType::kAxialDisplacementFieldNumber;
const int PinType::kAxialRotationFieldNumber;
const int PinType::kIdFieldNumber;
#endif  // !_MSC_VER

PinType::PinType()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PinType::InitAsDefaultInstance() {
  axialdisplacement_ = const_cast< ::edu::vanderbilt::isis::meta::AxialDisplacementType*>(&::edu::vanderbilt::isis::meta::AxialDisplacementType::default_instance());
  axialrotation_ = const_cast< ::edu::vanderbilt::isis::meta::AxialRotationType*>(&::edu::vanderbilt::isis::meta::AxialRotationType::default_instance());
  _id_ = const_cast< ::edu::vanderbilt::isis::meta::ID*>(&::edu::vanderbilt::isis::meta::ID::default_instance());
}

PinType::PinType(const PinType& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PinType::SharedCtor() {
  _cached_size_ = 0;
  axialdisplacement_ = NULL;
  axialrotation_ = NULL;
  _id_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PinType::~PinType() {
  SharedDtor();
}

void PinType::SharedDtor() {
  if (this != default_instance_) {
    delete axialdisplacement_;
    delete axialrotation_;
    delete _id_;
  }
}

void PinType::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PinType::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PinType_descriptor_;
}

const PinType& PinType::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AssemblyInterface_2eproto();
  return *default_instance_;
}

PinType* PinType::default_instance_ = NULL;

PinType* PinType::New() const {
  return new PinType;
}

void PinType::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_axialdisplacement()) {
      if (axialdisplacement_ != NULL) axialdisplacement_->::edu::vanderbilt::isis::meta::AxialDisplacementType::Clear();
    }
    if (has_axialrotation()) {
      if (axialrotation_ != NULL) axialrotation_->::edu::vanderbilt::isis::meta::AxialRotationType::Clear();
    }
    if (has__id()) {
      if (_id_ != NULL) _id_->::edu::vanderbilt::isis::meta::ID::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PinType::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .edu.vanderbilt.isis.meta.AxialDisplacementType AxialDisplacement = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_axialdisplacement()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_AxialRotation;
        break;
      }

      // required .edu.vanderbilt.isis.meta.AxialRotationType AxialRotation = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_AxialRotation:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_axialrotation()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse__id;
        break;
      }

      // optional .edu.vanderbilt.isis.meta.ID _id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse__id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PinType::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .edu.vanderbilt.isis.meta.AxialDisplacementType AxialDisplacement = 1;
  if (has_axialdisplacement()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->axialdisplacement(), output);
  }

  // required .edu.vanderbilt.isis.meta.AxialRotationType AxialRotation = 2;
  if (has_axialrotation()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->axialrotation(), output);
  }

  // optional .edu.vanderbilt.isis.meta.ID _id = 3;
  if (has__id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PinType::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .edu.vanderbilt.isis.meta.AxialDisplacementType AxialDisplacement = 1;
  if (has_axialdisplacement()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->axialdisplacement(), target);
  }

  // required .edu.vanderbilt.isis.meta.AxialRotationType AxialRotation = 2;
  if (has_axialrotation()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->axialrotation(), target);
  }

  // optional .edu.vanderbilt.isis.meta.ID _id = 3;
  if (has__id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PinType::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .edu.vanderbilt.isis.meta.AxialDisplacementType AxialDisplacement = 1;
    if (has_axialdisplacement()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->axialdisplacement());
    }

    // required .edu.vanderbilt.isis.meta.AxialRotationType AxialRotation = 2;
    if (has_axialrotation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->axialrotation());
    }

    // optional .edu.vanderbilt.isis.meta.ID _id = 3;
    if (has__id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PinType::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PinType* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PinType*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PinType::MergeFrom(const PinType& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_axialdisplacement()) {
      mutable_axialdisplacement()->::edu::vanderbilt::isis::meta::AxialDisplacementType::MergeFrom(from.axialdisplacement());
    }
    if (from.has_axialrotation()) {
      mutable_axialrotation()->::edu::vanderbilt::isis::meta::AxialRotationType::MergeFrom(from.axialrotation());
    }
    if (from.has__id()) {
      mutable__id()->::edu::vanderbilt::isis::meta::ID::MergeFrom(from._id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PinType::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PinType::CopyFrom(const PinType& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PinType::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_axialdisplacement()) {
    if (!this->axialdisplacement().IsInitialized()) return false;
  }
  if (has_axialrotation()) {
    if (!this->axialrotation().IsInitialized()) return false;
  }
  if (has__id()) {
    if (!this->_id().IsInitialized()) return false;
  }
  return true;
}

void PinType::Swap(PinType* other) {
  if (other != this) {
    std::swap(axialdisplacement_, other->axialdisplacement_);
    std::swap(axialrotation_, other->axialrotation_);
    std::swap(_id_, other->_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PinType::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PinType_descriptor_;
  metadata.reflection = PinType_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PointCoordinatesType::kComponentIDFieldNumber;
const int PointCoordinatesType::kFeatureDatumNameFieldNumber;
const int PointCoordinatesType::kMetricIDFieldNumber;
const int PointCoordinatesType::kRequestedValueTypeFieldNumber;
const int PointCoordinatesType::kIdFieldNumber;
#endif  // !_MSC_VER

PointCoordinatesType::PointCoordinatesType()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PointCoordinatesType::InitAsDefaultInstance() {
  _id_ = const_cast< ::edu::vanderbilt::isis::meta::ID*>(&::edu::vanderbilt::isis::meta::ID::default_instance());
}

PointCoordinatesType::PointCoordinatesType(const PointCoordinatesType& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PointCoordinatesType::SharedCtor() {
  _cached_size_ = 0;
  componentid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  featuredatumname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  metricid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  requestedvaluetype_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  _id_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PointCoordinatesType::~PointCoordinatesType() {
  SharedDtor();
}

void PointCoordinatesType::SharedDtor() {
  if (componentid_ != &::google::protobuf::internal::kEmptyString) {
    delete componentid_;
  }
  if (featuredatumname_ != &::google::protobuf::internal::kEmptyString) {
    delete featuredatumname_;
  }
  if (metricid_ != &::google::protobuf::internal::kEmptyString) {
    delete metricid_;
  }
  if (requestedvaluetype_ != &::google::protobuf::internal::kEmptyString) {
    delete requestedvaluetype_;
  }
  if (this != default_instance_) {
    delete _id_;
  }
}

void PointCoordinatesType::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PointCoordinatesType::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PointCoordinatesType_descriptor_;
}

const PointCoordinatesType& PointCoordinatesType::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AssemblyInterface_2eproto();
  return *default_instance_;
}

PointCoordinatesType* PointCoordinatesType::default_instance_ = NULL;

PointCoordinatesType* PointCoordinatesType::New() const {
  return new PointCoordinatesType;
}

void PointCoordinatesType::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_componentid()) {
      if (componentid_ != &::google::protobuf::internal::kEmptyString) {
        componentid_->clear();
      }
    }
    if (has_featuredatumname()) {
      if (featuredatumname_ != &::google::protobuf::internal::kEmptyString) {
        featuredatumname_->clear();
      }
    }
    if (has_metricid()) {
      if (metricid_ != &::google::protobuf::internal::kEmptyString) {
        metricid_->clear();
      }
    }
    if (has_requestedvaluetype()) {
      if (requestedvaluetype_ != &::google::protobuf::internal::kEmptyString) {
        requestedvaluetype_->clear();
      }
    }
    if (has__id()) {
      if (_id_ != NULL) _id_->::edu::vanderbilt::isis::meta::ID::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PointCoordinatesType::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string ComponentID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_componentid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->componentid().data(), this->componentid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_FeatureDatumName;
        break;
      }

      // required string FeatureDatumName = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_FeatureDatumName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_featuredatumname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->featuredatumname().data(), this->featuredatumname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_MetricID;
        break;
      }

      // required string MetricID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_MetricID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_metricid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->metricid().data(), this->metricid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_RequestedValueType;
        break;
      }

      // required string RequestedValueType = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_RequestedValueType:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_requestedvaluetype()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->requestedvaluetype().data(), this->requestedvaluetype().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse__id;
        break;
      }

      // optional .edu.vanderbilt.isis.meta.ID _id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse__id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PointCoordinatesType::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string ComponentID = 1;
  if (has_componentid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->componentid().data(), this->componentid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->componentid(), output);
  }

  // required string FeatureDatumName = 2;
  if (has_featuredatumname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->featuredatumname().data(), this->featuredatumname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->featuredatumname(), output);
  }

  // required string MetricID = 3;
  if (has_metricid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->metricid().data(), this->metricid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->metricid(), output);
  }

  // required string RequestedValueType = 4;
  if (has_requestedvaluetype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->requestedvaluetype().data(), this->requestedvaluetype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->requestedvaluetype(), output);
  }

  // optional .edu.vanderbilt.isis.meta.ID _id = 5;
  if (has__id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PointCoordinatesType::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string ComponentID = 1;
  if (has_componentid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->componentid().data(), this->componentid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->componentid(), target);
  }

  // required string FeatureDatumName = 2;
  if (has_featuredatumname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->featuredatumname().data(), this->featuredatumname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->featuredatumname(), target);
  }

  // required string MetricID = 3;
  if (has_metricid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->metricid().data(), this->metricid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->metricid(), target);
  }

  // required string RequestedValueType = 4;
  if (has_requestedvaluetype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->requestedvaluetype().data(), this->requestedvaluetype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->requestedvaluetype(), target);
  }

  // optional .edu.vanderbilt.isis.meta.ID _id = 5;
  if (has__id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PointCoordinatesType::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string ComponentID = 1;
    if (has_componentid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->componentid());
    }

    // required string FeatureDatumName = 2;
    if (has_featuredatumname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->featuredatumname());
    }

    // required string MetricID = 3;
    if (has_metricid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->metricid());
    }

    // required string RequestedValueType = 4;
    if (has_requestedvaluetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->requestedvaluetype());
    }

    // optional .edu.vanderbilt.isis.meta.ID _id = 5;
    if (has__id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PointCoordinatesType::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PointCoordinatesType* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PointCoordinatesType*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PointCoordinatesType::MergeFrom(const PointCoordinatesType& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_componentid()) {
      set_componentid(from.componentid());
    }
    if (from.has_featuredatumname()) {
      set_featuredatumname(from.featuredatumname());
    }
    if (from.has_metricid()) {
      set_metricid(from.metricid());
    }
    if (from.has_requestedvaluetype()) {
      set_requestedvaluetype(from.requestedvaluetype());
    }
    if (from.has__id()) {
      mutable__id()->::edu::vanderbilt::isis::meta::ID::MergeFrom(from._id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PointCoordinatesType::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PointCoordinatesType::CopyFrom(const PointCoordinatesType& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PointCoordinatesType::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  if (has__id()) {
    if (!this->_id().IsInitialized()) return false;
  }
  return true;
}

void PointCoordinatesType::Swap(PointCoordinatesType* other) {
  if (other != this) {
    std::swap(componentid_, other->componentid_);
    std::swap(featuredatumname_, other->featuredatumname_);
    std::swap(metricid_, other->metricid_);
    std::swap(requestedvaluetype_, other->requestedvaluetype_);
    std::swap(_id_, other->_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PointCoordinatesType::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PointCoordinatesType_descriptor_;
  metadata.reflection = PointCoordinatesType_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PressureType::kUnitsFieldNumber;
const int PressureType::kValueFieldNumber;
const int PressureType::kIdFieldNumber;
#endif  // !_MSC_VER

PressureType::PressureType()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PressureType::InitAsDefaultInstance() {
  _id_ = const_cast< ::edu::vanderbilt::isis::meta::ID*>(&::edu::vanderbilt::isis::meta::ID::default_instance());
}

PressureType::PressureType(const PressureType& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PressureType::SharedCtor() {
  _cached_size_ = 0;
  units_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  value_ = 0;
  _id_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PressureType::~PressureType() {
  SharedDtor();
}

void PressureType::SharedDtor() {
  if (units_ != &::google::protobuf::internal::kEmptyString) {
    delete units_;
  }
  if (this != default_instance_) {
    delete _id_;
  }
}

void PressureType::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PressureType::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PressureType_descriptor_;
}

const PressureType& PressureType::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AssemblyInterface_2eproto();
  return *default_instance_;
}

PressureType* PressureType::default_instance_ = NULL;

PressureType* PressureType::New() const {
  return new PressureType;
}

void PressureType::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_units()) {
      if (units_ != &::google::protobuf::internal::kEmptyString) {
        units_->clear();
      }
    }
    value_ = 0;
    if (has__id()) {
      if (_id_ != NULL) _id_->::edu::vanderbilt::isis::meta::ID::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PressureType::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string Units = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_units()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->units().data(), this->units().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_Value;
        break;
      }

      // required double Value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_Value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse__id;
        break;
      }

      // optional .edu.vanderbilt.isis.meta.ID _id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse__id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PressureType::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string Units = 1;
  if (has_units()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->units().data(), this->units().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->units(), output);
  }

  // required double Value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->value(), output);
  }

  // optional .edu.vanderbilt.isis.meta.ID _id = 3;
  if (has__id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PressureType::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string Units = 1;
  if (has_units()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->units().data(), this->units().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->units(), target);
  }

  // required double Value = 2;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->value(), target);
  }

  // optional .edu.vanderbilt.isis.meta.ID _id = 3;
  if (has__id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PressureType::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string Units = 1;
    if (has_units()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->units());
    }

    // required double Value = 2;
    if (has_value()) {
      total_size += 1 + 8;
    }

    // optional .edu.vanderbilt.isis.meta.ID _id = 3;
    if (has__id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PressureType::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PressureType* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PressureType*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PressureType::MergeFrom(const PressureType& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_units()) {
      set_units(from.units());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
    if (from.has__id()) {
      mutable__id()->::edu::vanderbilt::isis::meta::ID::MergeFrom(from._id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PressureType::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PressureType::CopyFrom(const PressureType& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PressureType::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has__id()) {
    if (!this->_id().IsInitialized()) return false;
  }
  return true;
}

void PressureType::Swap(PressureType* other) {
  if (other != this) {
    std::swap(units_, other->units_);
    std::swap(value_, other->value_);
    std::swap(_id_, other->_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PressureType::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PressureType_descriptor_;
  metadata.reflection = PressureType_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PrismaticType::kKinematicFeatureFieldNumber;
const int PrismaticType::kCFMFieldNumber;
const int PrismaticType::kConnectedComponentIDFieldNumber;
const int PrismaticType::kConnectionIDFieldNumber;
const int PrismaticType::kERPFieldNumber;
const int PrismaticType::kFeatureInterfaceTypeFieldNumber;
const int PrismaticType::kIdFieldNumber;
#endif  // !_MSC_VER

PrismaticType::PrismaticType()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PrismaticType::InitAsDefaultInstance() {
  _id_ = const_cast< ::edu::vanderbilt::isis::meta::ID*>(&::edu::vanderbilt::isis::meta::ID::default_instance());
}

PrismaticType::PrismaticType(const PrismaticType& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PrismaticType::SharedCtor() {
  _cached_size_ = 0;
  cfm_ = 0;
  connectedcomponentid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  connectionid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  erp_ = 0;
  featureinterfacetype_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  _id_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PrismaticType::~PrismaticType() {
  SharedDtor();
}

void PrismaticType::SharedDtor() {
  if (connectedcomponentid_ != &::google::protobuf::internal::kEmptyString) {
    delete connectedcomponentid_;
  }
  if (connectionid_ != &::google::protobuf::internal::kEmptyString) {
    delete connectionid_;
  }
  if (featureinterfacetype_ != &::google::protobuf::internal::kEmptyString) {
    delete featureinterfacetype_;
  }
  if (this != default_instance_) {
    delete _id_;
  }
}

void PrismaticType::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PrismaticType::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PrismaticType_descriptor_;
}

const PrismaticType& PrismaticType::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AssemblyInterface_2eproto();
  return *default_instance_;
}

PrismaticType* PrismaticType::default_instance_ = NULL;

PrismaticType* PrismaticType::New() const {
  return new PrismaticType;
}

void PrismaticType::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    cfm_ = 0;
    if (has_connectedcomponentid()) {
      if (connectedcomponentid_ != &::google::protobuf::internal::kEmptyString) {
        connectedcomponentid_->clear();
      }
    }
    if (has_connectionid()) {
      if (connectionid_ != &::google::protobuf::internal::kEmptyString) {
        connectionid_->clear();
      }
    }
    erp_ = 0;
    if (has_featureinterfacetype()) {
      if (featureinterfacetype_ != &::google::protobuf::internal::kEmptyString) {
        featureinterfacetype_->clear();
      }
    }
    if (has__id()) {
      if (_id_ != NULL) _id_->::edu::vanderbilt::isis::meta::ID::Clear();
    }
  }
  kinematicfeature_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PrismaticType::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .edu.vanderbilt.isis.meta.KinematicFeatureType KinematicFeature = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_KinematicFeature:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_kinematicfeature()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_KinematicFeature;
        if (input->ExpectTag(17)) goto parse_CFM;
        break;
      }

      // required double CFM = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_CFM:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &cfm_)));
          set_has_cfm();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_ConnectedComponentID;
        break;
      }

      // required string ConnectedComponentID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ConnectedComponentID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_connectedcomponentid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->connectedcomponentid().data(), this->connectedcomponentid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_ConnectionID;
        break;
      }

      // required string ConnectionID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ConnectionID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_connectionid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->connectionid().data(), this->connectionid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(41)) goto parse_ERP;
        break;
      }

      // required double ERP = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_ERP:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &erp_)));
          set_has_erp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_FeatureInterfaceType;
        break;
      }

      // required string FeatureInterfaceType = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_FeatureInterfaceType:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_featureinterfacetype()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->featureinterfacetype().data(), this->featureinterfacetype().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse__id;
        break;
      }

      // optional .edu.vanderbilt.isis.meta.ID _id = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse__id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PrismaticType::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .edu.vanderbilt.isis.meta.KinematicFeatureType KinematicFeature = 1;
  for (int i = 0; i < this->kinematicfeature_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->kinematicfeature(i), output);
  }

  // required double CFM = 2;
  if (has_cfm()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->cfm(), output);
  }

  // required string ConnectedComponentID = 3;
  if (has_connectedcomponentid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->connectedcomponentid().data(), this->connectedcomponentid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->connectedcomponentid(), output);
  }

  // required string ConnectionID = 4;
  if (has_connectionid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->connectionid().data(), this->connectionid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->connectionid(), output);
  }

  // required double ERP = 5;
  if (has_erp()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->erp(), output);
  }

  // required string FeatureInterfaceType = 6;
  if (has_featureinterfacetype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->featureinterfacetype().data(), this->featureinterfacetype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->featureinterfacetype(), output);
  }

  // optional .edu.vanderbilt.isis.meta.ID _id = 7;
  if (has__id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PrismaticType::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .edu.vanderbilt.isis.meta.KinematicFeatureType KinematicFeature = 1;
  for (int i = 0; i < this->kinematicfeature_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->kinematicfeature(i), target);
  }

  // required double CFM = 2;
  if (has_cfm()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->cfm(), target);
  }

  // required string ConnectedComponentID = 3;
  if (has_connectedcomponentid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->connectedcomponentid().data(), this->connectedcomponentid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->connectedcomponentid(), target);
  }

  // required string ConnectionID = 4;
  if (has_connectionid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->connectionid().data(), this->connectionid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->connectionid(), target);
  }

  // required double ERP = 5;
  if (has_erp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->erp(), target);
  }

  // required string FeatureInterfaceType = 6;
  if (has_featureinterfacetype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->featureinterfacetype().data(), this->featureinterfacetype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->featureinterfacetype(), target);
  }

  // optional .edu.vanderbilt.isis.meta.ID _id = 7;
  if (has__id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PrismaticType::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // required double CFM = 2;
    if (has_cfm()) {
      total_size += 1 + 8;
    }

    // required string ConnectedComponentID = 3;
    if (has_connectedcomponentid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->connectedcomponentid());
    }

    // required string ConnectionID = 4;
    if (has_connectionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->connectionid());
    }

    // required double ERP = 5;
    if (has_erp()) {
      total_size += 1 + 8;
    }

    // required string FeatureInterfaceType = 6;
    if (has_featureinterfacetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->featureinterfacetype());
    }

    // optional .edu.vanderbilt.isis.meta.ID _id = 7;
    if (has__id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_id());
    }

  }
  // repeated .edu.vanderbilt.isis.meta.KinematicFeatureType KinematicFeature = 1;
  total_size += 1 * this->kinematicfeature_size();
  for (int i = 0; i < this->kinematicfeature_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->kinematicfeature(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PrismaticType::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PrismaticType* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PrismaticType*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PrismaticType::MergeFrom(const PrismaticType& from) {
  GOOGLE_CHECK_NE(&from, this);
  kinematicfeature_.MergeFrom(from.kinematicfeature_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_cfm()) {
      set_cfm(from.cfm());
    }
    if (from.has_connectedcomponentid()) {
      set_connectedcomponentid(from.connectedcomponentid());
    }
    if (from.has_connectionid()) {
      set_connectionid(from.connectionid());
    }
    if (from.has_erp()) {
      set_erp(from.erp());
    }
    if (from.has_featureinterfacetype()) {
      set_featureinterfacetype(from.featureinterfacetype());
    }
    if (from.has__id()) {
      mutable__id()->::edu::vanderbilt::isis::meta::ID::MergeFrom(from._id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PrismaticType::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PrismaticType::CopyFrom(const PrismaticType& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PrismaticType::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003e) != 0x0000003e) return false;

  for (int i = 0; i < kinematicfeature_size(); i++) {
    if (!this->kinematicfeature(i).IsInitialized()) return false;
  }
  if (has__id()) {
    if (!this->_id().IsInitialized()) return false;
  }
  return true;
}

void PrismaticType::Swap(PrismaticType* other) {
  if (other != this) {
    kinematicfeature_.Swap(&other->kinematicfeature_);
    std::swap(cfm_, other->cfm_);
    std::swap(connectedcomponentid_, other->connectedcomponentid_);
    std::swap(connectionid_, other->connectionid_);
    std::swap(erp_, other->erp_);
    std::swap(featureinterfacetype_, other->featureinterfacetype_);
    std::swap(_id_, other->_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PrismaticType::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PrismaticType_descriptor_;
  metadata.reflection = PrismaticType_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PropertiesType::kUnitsFieldNumber;
const int PropertiesType::kIdFieldNumber;
#endif  // !_MSC_VER

PropertiesType::PropertiesType()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PropertiesType::InitAsDefaultInstance() {
  units_ = const_cast< ::edu::vanderbilt::isis::meta::UnitsType*>(&::edu::vanderbilt::isis::meta::UnitsType::default_instance());
  _id_ = const_cast< ::edu::vanderbilt::isis::meta::ID*>(&::edu::vanderbilt::isis::meta::ID::default_instance());
}

PropertiesType::PropertiesType(const PropertiesType& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PropertiesType::SharedCtor() {
  _cached_size_ = 0;
  units_ = NULL;
  _id_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PropertiesType::~PropertiesType() {
  SharedDtor();
}

void PropertiesType::SharedDtor() {
  if (this != default_instance_) {
    delete units_;
    delete _id_;
  }
}

void PropertiesType::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PropertiesType::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PropertiesType_descriptor_;
}

const PropertiesType& PropertiesType::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AssemblyInterface_2eproto();
  return *default_instance_;
}

PropertiesType* PropertiesType::default_instance_ = NULL;

PropertiesType* PropertiesType::New() const {
  return new PropertiesType;
}

void PropertiesType::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_units()) {
      if (units_ != NULL) units_->::edu::vanderbilt::isis::meta::UnitsType::Clear();
    }
    if (has__id()) {
      if (_id_ != NULL) _id_->::edu::vanderbilt::isis::meta::ID::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PropertiesType::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .edu.vanderbilt.isis.meta.UnitsType Units = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_units()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse__id;
        break;
      }

      // optional .edu.vanderbilt.isis.meta.ID _id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse__id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PropertiesType::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .edu.vanderbilt.isis.meta.UnitsType Units = 1;
  if (has_units()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->units(), output);
  }

  // optional .edu.vanderbilt.isis.meta.ID _id = 2;
  if (has__id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PropertiesType::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .edu.vanderbilt.isis.meta.UnitsType Units = 1;
  if (has_units()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->units(), target);
  }

  // optional .edu.vanderbilt.isis.meta.ID _id = 2;
  if (has__id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PropertiesType::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .edu.vanderbilt.isis.meta.UnitsType Units = 1;
    if (has_units()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->units());
    }

    // optional .edu.vanderbilt.isis.meta.ID _id = 2;
    if (has__id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PropertiesType::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PropertiesType* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PropertiesType*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PropertiesType::MergeFrom(const PropertiesType& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_units()) {
      mutable_units()->::edu::vanderbilt::isis::meta::UnitsType::MergeFrom(from.units());
    }
    if (from.has__id()) {
      mutable__id()->::edu::vanderbilt::isis::meta::ID::MergeFrom(from._id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PropertiesType::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PropertiesType::CopyFrom(const PropertiesType& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PropertiesType::IsInitialized() const {

  if (has_units()) {
    if (!this->units().IsInitialized()) return false;
  }
  if (has__id()) {
    if (!this->_id().IsInitialized()) return false;
  }
  return true;
}

void PropertiesType::Swap(PropertiesType* other) {
  if (other != this) {
    std::swap(units_, other->units_);
    std::swap(_id_, other->_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PropertiesType::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PropertiesType_descriptor_;
  metadata.reflection = PropertiesType_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReferencePlaneType::kTypeFieldNumber;
const int ReferencePlaneType::kIdFieldNumber;
#endif  // !_MSC_VER

ReferencePlaneType::ReferencePlaneType()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReferencePlaneType::InitAsDefaultInstance() {
  _id_ = const_cast< ::edu::vanderbilt::isis::meta::ID*>(&::edu::vanderbilt::isis::meta::ID::default_instance());
}

ReferencePlaneType::ReferencePlaneType(const ReferencePlaneType& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReferencePlaneType::SharedCtor() {
  _cached_size_ = 0;
  type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  _id_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReferencePlaneType::~ReferencePlaneType() {
  SharedDtor();
}

void ReferencePlaneType::SharedDtor() {
  if (type_ != &::google::protobuf::internal::kEmptyString) {
    delete type_;
  }
  if (this != default_instance_) {
    delete _id_;
  }
}

void ReferencePlaneType::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReferencePlaneType::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReferencePlaneType_descriptor_;
}

const ReferencePlaneType& ReferencePlaneType::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AssemblyInterface_2eproto();
  return *default_instance_;
}

ReferencePlaneType* ReferencePlaneType::default_instance_ = NULL;

ReferencePlaneType* ReferencePlaneType::New() const {
  return new ReferencePlaneType;
}

void ReferencePlaneType::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_type()) {
      if (type_ != &::google::protobuf::internal::kEmptyString) {
        type_->clear();
      }
    }
    if (has__id()) {
      if (_id_ != NULL) _id_->::edu::vanderbilt::isis::meta::ID::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReferencePlaneType::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string Type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->type().data(), this->type().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse__id;
        break;
      }

      // optional .edu.vanderbilt.isis.meta.ID _id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse__id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReferencePlaneType::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string Type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->type(), output);
  }

  // optional .edu.vanderbilt.isis.meta.ID _id = 2;
  if (has__id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReferencePlaneType::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string Type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->type(), target);
  }

  // optional .edu.vanderbilt.isis.meta.ID _id = 2;
  if (has__id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReferencePlaneType::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string Type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->type());
    }

    // optional .edu.vanderbilt.isis.meta.ID _id = 2;
    if (has__id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReferencePlaneType::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReferencePlaneType* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReferencePlaneType*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReferencePlaneType::MergeFrom(const ReferencePlaneType& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has__id()) {
      mutable__id()->::edu::vanderbilt::isis::meta::ID::MergeFrom(from._id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReferencePlaneType::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReferencePlaneType::CopyFrom(const ReferencePlaneType& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReferencePlaneType::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has__id()) {
    if (!this->_id().IsInitialized()) return false;
  }
  return true;
}

void ReferencePlaneType::Swap(ReferencePlaneType* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(_id_, other->_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReferencePlaneType::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReferencePlaneType_descriptor_;
  metadata.reflection = ReferencePlaneType_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RevoluteType::kKinematicFeatureFieldNumber;
const int RevoluteType::kCFMFieldNumber;
const int RevoluteType::kConnectedComponentIDFieldNumber;
const int RevoluteType::kConnectionIDFieldNumber;
const int RevoluteType::kERPFieldNumber;
const int RevoluteType::kFeatureInterfaceTypeFieldNumber;
const int RevoluteType::kIdFieldNumber;
#endif  // !_MSC_VER

RevoluteType::RevoluteType()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RevoluteType::InitAsDefaultInstance() {
  _id_ = const_cast< ::edu::vanderbilt::isis::meta::ID*>(&::edu::vanderbilt::isis::meta::ID::default_instance());
}

RevoluteType::RevoluteType(const RevoluteType& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RevoluteType::SharedCtor() {
  _cached_size_ = 0;
  cfm_ = 0;
  connectedcomponentid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  connectionid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  erp_ = 0;
  featureinterfacetype_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  _id_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RevoluteType::~RevoluteType() {
  SharedDtor();
}

void RevoluteType::SharedDtor() {
  if (connectedcomponentid_ != &::google::protobuf::internal::kEmptyString) {
    delete connectedcomponentid_;
  }
  if (connectionid_ != &::google::protobuf::internal::kEmptyString) {
    delete connectionid_;
  }
  if (featureinterfacetype_ != &::google::protobuf::internal::kEmptyString) {
    delete featureinterfacetype_;
  }
  if (this != default_instance_) {
    delete _id_;
  }
}

void RevoluteType::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RevoluteType::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RevoluteType_descriptor_;
}

const RevoluteType& RevoluteType::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AssemblyInterface_2eproto();
  return *default_instance_;
}

RevoluteType* RevoluteType::default_instance_ = NULL;

RevoluteType* RevoluteType::New() const {
  return new RevoluteType;
}

void RevoluteType::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    cfm_ = 0;
    if (has_connectedcomponentid()) {
      if (connectedcomponentid_ != &::google::protobuf::internal::kEmptyString) {
        connectedcomponentid_->clear();
      }
    }
    if (has_connectionid()) {
      if (connectionid_ != &::google::protobuf::internal::kEmptyString) {
        connectionid_->clear();
      }
    }
    erp_ = 0;
    if (has_featureinterfacetype()) {
      if (featureinterfacetype_ != &::google::protobuf::internal::kEmptyString) {
        featureinterfacetype_->clear();
      }
    }
    if (has__id()) {
      if (_id_ != NULL) _id_->::edu::vanderbilt::isis::meta::ID::Clear();
    }
  }
  kinematicfeature_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RevoluteType::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .edu.vanderbilt.isis.meta.KinematicFeatureType KinematicFeature = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_KinematicFeature:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_kinematicfeature()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_KinematicFeature;
        if (input->ExpectTag(17)) goto parse_CFM;
        break;
      }

      // required double CFM = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_CFM:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &cfm_)));
          set_has_cfm();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_ConnectedComponentID;
        break;
      }

      // required string ConnectedComponentID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ConnectedComponentID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_connectedcomponentid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->connectedcomponentid().data(), this->connectedcomponentid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_ConnectionID;
        break;
      }

      // required string ConnectionID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ConnectionID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_connectionid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->connectionid().data(), this->connectionid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(41)) goto parse_ERP;
        break;
      }

      // required double ERP = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_ERP:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &erp_)));
          set_has_erp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_FeatureInterfaceType;
        break;
      }

      // required string FeatureInterfaceType = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_FeatureInterfaceType:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_featureinterfacetype()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->featureinterfacetype().data(), this->featureinterfacetype().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse__id;
        break;
      }

      // optional .edu.vanderbilt.isis.meta.ID _id = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse__id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RevoluteType::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .edu.vanderbilt.isis.meta.KinematicFeatureType KinematicFeature = 1;
  for (int i = 0; i < this->kinematicfeature_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->kinematicfeature(i), output);
  }

  // required double CFM = 2;
  if (has_cfm()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->cfm(), output);
  }

  // required string ConnectedComponentID = 3;
  if (has_connectedcomponentid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->connectedcomponentid().data(), this->connectedcomponentid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->connectedcomponentid(), output);
  }

  // required string ConnectionID = 4;
  if (has_connectionid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->connectionid().data(), this->connectionid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->connectionid(), output);
  }

  // required double ERP = 5;
  if (has_erp()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->erp(), output);
  }

  // required string FeatureInterfaceType = 6;
  if (has_featureinterfacetype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->featureinterfacetype().data(), this->featureinterfacetype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->featureinterfacetype(), output);
  }

  // optional .edu.vanderbilt.isis.meta.ID _id = 7;
  if (has__id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RevoluteType::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .edu.vanderbilt.isis.meta.KinematicFeatureType KinematicFeature = 1;
  for (int i = 0; i < this->kinematicfeature_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->kinematicfeature(i), target);
  }

  // required double CFM = 2;
  if (has_cfm()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->cfm(), target);
  }

  // required string ConnectedComponentID = 3;
  if (has_connectedcomponentid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->connectedcomponentid().data(), this->connectedcomponentid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->connectedcomponentid(), target);
  }

  // required string ConnectionID = 4;
  if (has_connectionid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->connectionid().data(), this->connectionid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->connectionid(), target);
  }

  // required double ERP = 5;
  if (has_erp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->erp(), target);
  }

  // required string FeatureInterfaceType = 6;
  if (has_featureinterfacetype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->featureinterfacetype().data(), this->featureinterfacetype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->featureinterfacetype(), target);
  }

  // optional .edu.vanderbilt.isis.meta.ID _id = 7;
  if (has__id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RevoluteType::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // required double CFM = 2;
    if (has_cfm()) {
      total_size += 1 + 8;
    }

    // required string ConnectedComponentID = 3;
    if (has_connectedcomponentid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->connectedcomponentid());
    }

    // required string ConnectionID = 4;
    if (has_connectionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->connectionid());
    }

    // required double ERP = 5;
    if (has_erp()) {
      total_size += 1 + 8;
    }

    // required string FeatureInterfaceType = 6;
    if (has_featureinterfacetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->featureinterfacetype());
    }

    // optional .edu.vanderbilt.isis.meta.ID _id = 7;
    if (has__id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_id());
    }

  }
  // repeated .edu.vanderbilt.isis.meta.KinematicFeatureType KinematicFeature = 1;
  total_size += 1 * this->kinematicfeature_size();
  for (int i = 0; i < this->kinematicfeature_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->kinematicfeature(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RevoluteType::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RevoluteType* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RevoluteType*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RevoluteType::MergeFrom(const RevoluteType& from) {
  GOOGLE_CHECK_NE(&from, this);
  kinematicfeature_.MergeFrom(from.kinematicfeature_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_cfm()) {
      set_cfm(from.cfm());
    }
    if (from.has_connectedcomponentid()) {
      set_connectedcomponentid(from.connectedcomponentid());
    }
    if (from.has_connectionid()) {
      set_connectionid(from.connectionid());
    }
    if (from.has_erp()) {
      set_erp(from.erp());
    }
    if (from.has_featureinterfacetype()) {
      set_featureinterfacetype(from.featureinterfacetype());
    }
    if (from.has__id()) {
      mutable__id()->::edu::vanderbilt::isis::meta::ID::MergeFrom(from._id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RevoluteType::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RevoluteType::CopyFrom(const RevoluteType& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RevoluteType::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003e) != 0x0000003e) return false;

  for (int i = 0; i < kinematicfeature_size(); i++) {
    if (!this->kinematicfeature(i).IsInitialized()) return false;
  }
  if (has__id()) {
    if (!this->_id().IsInitialized()) return false;
  }
  return true;
}

void RevoluteType::Swap(RevoluteType* other) {
  if (other != this) {
    kinematicfeature_.Swap(&other->kinematicfeature_);
    std::swap(cfm_, other->cfm_);
    std::swap(connectedcomponentid_, other->connectedcomponentid_);
    std::swap(connectionid_, other->connectionid_);
    std::swap(erp_, other->erp_);
    std::swap(featureinterfacetype_, other->featureinterfacetype_);
    std::swap(_id_, other->_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RevoluteType::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RevoluteType_descriptor_;
  metadata.reflection = RevoluteType_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RotationType::kUnitsFieldNumber;
const int RotationType::kIdFieldNumber;
const int RotationType::kXFieldNumber;
const int RotationType::kYFieldNumber;
const int RotationType::kZFieldNumber;
#endif  // !_MSC_VER

RotationType::RotationType()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RotationType::InitAsDefaultInstance() {
  _id_ = const_cast< ::edu::vanderbilt::isis::meta::ID*>(&::edu::vanderbilt::isis::meta::ID::default_instance());
}

RotationType::RotationType(const RotationType& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RotationType::SharedCtor() {
  _cached_size_ = 0;
  units_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  _id_ = NULL;
  x_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  y_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  z_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RotationType::~RotationType() {
  SharedDtor();
}

void RotationType::SharedDtor() {
  if (units_ != &::google::protobuf::internal::kEmptyString) {
    delete units_;
  }
  if (x_ != &::google::protobuf::internal::kEmptyString) {
    delete x_;
  }
  if (y_ != &::google::protobuf::internal::kEmptyString) {
    delete y_;
  }
  if (z_ != &::google::protobuf::internal::kEmptyString) {
    delete z_;
  }
  if (this != default_instance_) {
    delete _id_;
  }
}

void RotationType::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RotationType::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RotationType_descriptor_;
}

const RotationType& RotationType::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AssemblyInterface_2eproto();
  return *default_instance_;
}

RotationType* RotationType::default_instance_ = NULL;

RotationType* RotationType::New() const {
  return new RotationType;
}

void RotationType::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_units()) {
      if (units_ != &::google::protobuf::internal::kEmptyString) {
        units_->clear();
      }
    }
    if (has__id()) {
      if (_id_ != NULL) _id_->::edu::vanderbilt::isis::meta::ID::Clear();
    }
    if (has_x()) {
      if (x_ != &::google::protobuf::internal::kEmptyString) {
        x_->clear();
      }
    }
    if (has_y()) {
      if (y_ != &::google::protobuf::internal::kEmptyString) {
        y_->clear();
      }
    }
    if (has_z()) {
      if (z_ != &::google::protobuf::internal::kEmptyString) {
        z_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RotationType::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string Units = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_units()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->units().data(), this->units().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse__id;
        break;
      }

      // optional .edu.vanderbilt.isis.meta.ID _id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse__id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_x;
        break;
      }

      // required string x = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_x:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_x()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->x().data(), this->x().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_y;
        break;
      }

      // required string y = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_y:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_y()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->y().data(), this->y().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_z;
        break;
      }

      // required string z = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_z:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_z()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->z().data(), this->z().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RotationType::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string Units = 1;
  if (has_units()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->units().data(), this->units().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->units(), output);
  }

  // optional .edu.vanderbilt.isis.meta.ID _id = 2;
  if (has__id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_id(), output);
  }

  // required string x = 3;
  if (has_x()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->x().data(), this->x().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->x(), output);
  }

  // required string y = 4;
  if (has_y()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->y().data(), this->y().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->y(), output);
  }

  // required string z = 5;
  if (has_z()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->z().data(), this->z().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->z(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RotationType::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string Units = 1;
  if (has_units()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->units().data(), this->units().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->units(), target);
  }

  // optional .edu.vanderbilt.isis.meta.ID _id = 2;
  if (has__id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->_id(), target);
  }

  // required string x = 3;
  if (has_x()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->x().data(), this->x().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->x(), target);
  }

  // required string y = 4;
  if (has_y()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->y().data(), this->y().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->y(), target);
  }

  // required string z = 5;
  if (has_z()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->z().data(), this->z().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->z(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RotationType::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string Units = 1;
    if (has_units()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->units());
    }

    // optional .edu.vanderbilt.isis.meta.ID _id = 2;
    if (has__id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_id());
    }

    // required string x = 3;
    if (has_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->x());
    }

    // required string y = 4;
    if (has_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->y());
    }

    // required string z = 5;
    if (has_z()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->z());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RotationType::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RotationType* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RotationType*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RotationType::MergeFrom(const RotationType& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_units()) {
      set_units(from.units());
    }
    if (from.has__id()) {
      mutable__id()->::edu::vanderbilt::isis::meta::ID::MergeFrom(from._id());
    }
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
    if (from.has_z()) {
      set_z(from.z());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RotationType::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RotationType::CopyFrom(const RotationType& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RotationType::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001d) != 0x0000001d) return false;

  if (has__id()) {
    if (!this->_id().IsInitialized()) return false;
  }
  return true;
}

void RotationType::Swap(RotationType* other) {
  if (other != this) {
    std::swap(units_, other->units_);
    std::swap(_id_, other->_id_);
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(z_, other->z_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RotationType::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RotationType_descriptor_;
  metadata.reflection = RotationType_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int STEPFormatType::kNameFieldNumber;
const int STEPFormatType::kIdFieldNumber;
#endif  // !_MSC_VER

STEPFormatType::STEPFormatType()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void STEPFormatType::InitAsDefaultInstance() {
  _id_ = const_cast< ::edu::vanderbilt::isis::meta::ID*>(&::edu::vanderbilt::isis::meta::ID::default_instance());
}

STEPFormatType::STEPFormatType(const STEPFormatType& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void STEPFormatType::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  _id_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

STEPFormatType::~STEPFormatType() {
  SharedDtor();
}

void STEPFormatType::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
    delete _id_;
  }
}

void STEPFormatType::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* STEPFormatType::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return STEPFormatType_descriptor_;
}

const STEPFormatType& STEPFormatType::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AssemblyInterface_2eproto();
  return *default_instance_;
}

STEPFormatType* STEPFormatType::default_instance_ = NULL;

STEPFormatType* STEPFormatType::New() const {
  return new STEPFormatType;
}

void STEPFormatType::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has__id()) {
      if (_id_ != NULL) _id_->::edu::vanderbilt::isis::meta::ID::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool STEPFormatType::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string Name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse__id;
        break;
      }

      // optional .edu.vanderbilt.isis.meta.ID _id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse__id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void STEPFormatType::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string Name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  // optional .edu.vanderbilt.isis.meta.ID _id = 2;
  if (has__id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* STEPFormatType::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string Name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional .edu.vanderbilt.isis.meta.ID _id = 2;
  if (has__id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int STEPFormatType::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string Name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional .edu.vanderbilt.isis.meta.ID _id = 2;
    if (has__id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void STEPFormatType::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const STEPFormatType* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const STEPFormatType*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void STEPFormatType::MergeFrom(const STEPFormatType& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has__id()) {
      mutable__id()->::edu::vanderbilt::isis::meta::ID::MergeFrom(from._id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void STEPFormatType::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void STEPFormatType::CopyFrom(const STEPFormatType& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool STEPFormatType::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has__id()) {
    if (!this->_id().IsInitialized()) return false;
  }
  return true;
}

void STEPFormatType::Swap(STEPFormatType* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(_id_, other->_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata STEPFormatType::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = STEPFormatType_descriptor_;
  metadata.reflection = STEPFormatType_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SetOperationType::kFeatureIDFieldNumber;
const int SetOperationType::kTypeFieldNumber;
const int SetOperationType::kIdFieldNumber;
#endif  // !_MSC_VER

SetOperationType::SetOperationType()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SetOperationType::InitAsDefaultInstance() {
  _id_ = const_cast< ::edu::vanderbilt::isis::meta::ID*>(&::edu::vanderbilt::isis::meta::ID::default_instance());
}

SetOperationType::SetOperationType(const SetOperationType& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SetOperationType::SharedCtor() {
  _cached_size_ = 0;
  featureid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  _id_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SetOperationType::~SetOperationType() {
  SharedDtor();
}

void SetOperationType::SharedDtor() {
  if (featureid_ != &::google::protobuf::internal::kEmptyString) {
    delete featureid_;
  }
  if (type_ != &::google::protobuf::internal::kEmptyString) {
    delete type_;
  }
  if (this != default_instance_) {
    delete _id_;
  }
}

void SetOperationType::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SetOperationType::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SetOperationType_descriptor_;
}

const SetOperationType& SetOperationType::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AssemblyInterface_2eproto();
  return *default_instance_;
}

SetOperationType* SetOperationType::default_instance_ = NULL;

SetOperationType* SetOperationType::New() const {
  return new SetOperationType;
}

void SetOperationType::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_featureid()) {
      if (featureid_ != &::google::protobuf::internal::kEmptyString) {
        featureid_->clear();
      }
    }
    if (has_type()) {
      if (type_ != &::google::protobuf::internal::kEmptyString) {
        type_->clear();
      }
    }
    if (has__id()) {
      if (_id_ != NULL) _id_->::edu::vanderbilt::isis::meta::ID::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SetOperationType::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string FeatureID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_featureid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->featureid().data(), this->featureid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_Type;
        break;
      }

      // required string Type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->type().data(), this->type().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse__id;
        break;
      }

      // optional .edu.vanderbilt.isis.meta.ID _id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse__id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SetOperationType::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string FeatureID = 1;
  if (has_featureid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->featureid().data(), this->featureid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->featureid(), output);
  }

  // required string Type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->type(), output);
  }

  // optional .edu.vanderbilt.isis.meta.ID _id = 3;
  if (has__id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SetOperationType::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string FeatureID = 1;
  if (has_featureid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->featureid().data(), this->featureid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->featureid(), target);
  }

  // required string Type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->type(), target);
  }

  // optional .edu.vanderbilt.isis.meta.ID _id = 3;
  if (has__id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SetOperationType::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string FeatureID = 1;
    if (has_featureid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->featureid());
    }

    // required string Type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->type());
    }

    // optional .edu.vanderbilt.isis.meta.ID _id = 3;
    if (has__id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SetOperationType::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SetOperationType* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SetOperationType*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SetOperationType::MergeFrom(const SetOperationType& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_featureid()) {
      set_featureid(from.featureid());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has__id()) {
      mutable__id()->::edu::vanderbilt::isis::meta::ID::MergeFrom(from._id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SetOperationType::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetOperationType::CopyFrom(const SetOperationType& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetOperationType::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has__id()) {
    if (!this->_id().IsInitialized()) return false;
  }
  return true;
}

void SetOperationType::Swap(SetOperationType* other) {
  if (other != this) {
    std::swap(featureid_, other->featureid_);
    std::swap(type_, other->type_);
    std::swap(_id_, other->_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SetOperationType::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SetOperationType_descriptor_;
  metadata.reflection = SetOperationType_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ShotlineType::kAzimuthFieldNumber;
const int ShotlineType::kBallisticThreatRefFieldNumber;
const int ShotlineType::kComponentIDFieldNumber;
const int ShotlineType::kDatumPointFieldNumber;
const int ShotlineType::kElevationFieldNumber;
const int ShotlineType::kIdFieldNumber;
#endif  // !_MSC_VER

ShotlineType::ShotlineType()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ShotlineType::InitAsDefaultInstance() {
  _id_ = const_cast< ::edu::vanderbilt::isis::meta::ID*>(&::edu::vanderbilt::isis::meta::ID::default_instance());
}

ShotlineType::ShotlineType(const ShotlineType& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ShotlineType::SharedCtor() {
  _cached_size_ = 0;
  azimuth_ = 0;
  ballisticthreatref_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  componentid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  datumpoint_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  elevation_ = 0;
  _id_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ShotlineType::~ShotlineType() {
  SharedDtor();
}

void ShotlineType::SharedDtor() {
  if (ballisticthreatref_ != &::google::protobuf::internal::kEmptyString) {
    delete ballisticthreatref_;
  }
  if (componentid_ != &::google::protobuf::internal::kEmptyString) {
    delete componentid_;
  }
  if (datumpoint_ != &::google::protobuf::internal::kEmptyString) {
    delete datumpoint_;
  }
  if (this != default_instance_) {
    delete _id_;
  }
}

void ShotlineType::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ShotlineType::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ShotlineType_descriptor_;
}

const ShotlineType& ShotlineType::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AssemblyInterface_2eproto();
  return *default_instance_;
}

ShotlineType* ShotlineType::default_instance_ = NULL;

ShotlineType* ShotlineType::New() const {
  return new ShotlineType;
}

void ShotlineType::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    azimuth_ = 0;
    if (has_ballisticthreatref()) {
      if (ballisticthreatref_ != &::google::protobuf::internal::kEmptyString) {
        ballisticthreatref_->clear();
      }
    }
    if (has_componentid()) {
      if (componentid_ != &::google::protobuf::internal::kEmptyString) {
        componentid_->clear();
      }
    }
    if (has_datumpoint()) {
      if (datumpoint_ != &::google::protobuf::internal::kEmptyString) {
        datumpoint_->clear();
      }
    }
    elevation_ = 0;
    if (has__id()) {
      if (_id_ != NULL) _id_->::edu::vanderbilt::isis::meta::ID::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ShotlineType::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required double Azimuth = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &azimuth_)));
          set_has_azimuth();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_BallisticThreatRef;
        break;
      }

      // required string BallisticThreatRef = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_BallisticThreatRef:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ballisticthreatref()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ballisticthreatref().data(), this->ballisticthreatref().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_ComponentID;
        break;
      }

      // required string ComponentID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ComponentID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_componentid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->componentid().data(), this->componentid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_DatumPoint;
        break;
      }

      // required string DatumPoint = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_DatumPoint:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_datumpoint()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->datumpoint().data(), this->datumpoint().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(41)) goto parse_Elevation;
        break;
      }

      // required double Elevation = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_Elevation:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &elevation_)));
          set_has_elevation();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse__id;
        break;
      }

      // optional .edu.vanderbilt.isis.meta.ID _id = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse__id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ShotlineType::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required double Azimuth = 1;
  if (has_azimuth()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->azimuth(), output);
  }

  // required string BallisticThreatRef = 2;
  if (has_ballisticthreatref()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ballisticthreatref().data(), this->ballisticthreatref().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->ballisticthreatref(), output);
  }

  // required string ComponentID = 3;
  if (has_componentid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->componentid().data(), this->componentid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->componentid(), output);
  }

  // required string DatumPoint = 4;
  if (has_datumpoint()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->datumpoint().data(), this->datumpoint().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->datumpoint(), output);
  }

  // required double Elevation = 5;
  if (has_elevation()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->elevation(), output);
  }

  // optional .edu.vanderbilt.isis.meta.ID _id = 6;
  if (has__id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ShotlineType::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required double Azimuth = 1;
  if (has_azimuth()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->azimuth(), target);
  }

  // required string BallisticThreatRef = 2;
  if (has_ballisticthreatref()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ballisticthreatref().data(), this->ballisticthreatref().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->ballisticthreatref(), target);
  }

  // required string ComponentID = 3;
  if (has_componentid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->componentid().data(), this->componentid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->componentid(), target);
  }

  // required string DatumPoint = 4;
  if (has_datumpoint()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->datumpoint().data(), this->datumpoint().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->datumpoint(), target);
  }

  // required double Elevation = 5;
  if (has_elevation()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->elevation(), target);
  }

  // optional .edu.vanderbilt.isis.meta.ID _id = 6;
  if (has__id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ShotlineType::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required double Azimuth = 1;
    if (has_azimuth()) {
      total_size += 1 + 8;
    }

    // required string BallisticThreatRef = 2;
    if (has_ballisticthreatref()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ballisticthreatref());
    }

    // required string ComponentID = 3;
    if (has_componentid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->componentid());
    }

    // required string DatumPoint = 4;
    if (has_datumpoint()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->datumpoint());
    }

    // required double Elevation = 5;
    if (has_elevation()) {
      total_size += 1 + 8;
    }

    // optional .edu.vanderbilt.isis.meta.ID _id = 6;
    if (has__id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ShotlineType::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ShotlineType* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ShotlineType*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ShotlineType::MergeFrom(const ShotlineType& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_azimuth()) {
      set_azimuth(from.azimuth());
    }
    if (from.has_ballisticthreatref()) {
      set_ballisticthreatref(from.ballisticthreatref());
    }
    if (from.has_componentid()) {
      set_componentid(from.componentid());
    }
    if (from.has_datumpoint()) {
      set_datumpoint(from.datumpoint());
    }
    if (from.has_elevation()) {
      set_elevation(from.elevation());
    }
    if (from.has__id()) {
      mutable__id()->::edu::vanderbilt::isis::meta::ID::MergeFrom(from._id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ShotlineType::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ShotlineType::CopyFrom(const ShotlineType& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShotlineType::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  if (has__id()) {
    if (!this->_id().IsInitialized()) return false;
  }
  return true;
}

void ShotlineType::Swap(ShotlineType* other) {
  if (other != this) {
    std::swap(azimuth_, other->azimuth_);
    std::swap(ballisticthreatref_, other->ballisticthreatref_);
    std::swap(componentid_, other->componentid_);
    std::swap(datumpoint_, other->datumpoint_);
    std::swap(elevation_, other->elevation_);
    std::swap(_id_, other->_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ShotlineType::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ShotlineType_descriptor_;
  metadata.reflection = ShotlineType_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ShotlinesType::kShotlineFieldNumber;
const int ShotlinesType::kIdFieldNumber;
#endif  // !_MSC_VER

ShotlinesType::ShotlinesType()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ShotlinesType::InitAsDefaultInstance() {
  _id_ = const_cast< ::edu::vanderbilt::isis::meta::ID*>(&::edu::vanderbilt::isis::meta::ID::default_instance());
}

ShotlinesType::ShotlinesType(const ShotlinesType& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ShotlinesType::SharedCtor() {
  _cached_size_ = 0;
  _id_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ShotlinesType::~ShotlinesType() {
  SharedDtor();
}

void ShotlinesType::SharedDtor() {
  if (this != default_instance_) {
    delete _id_;
  }
}

void ShotlinesType::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ShotlinesType::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ShotlinesType_descriptor_;
}

const ShotlinesType& ShotlinesType::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AssemblyInterface_2eproto();
  return *default_instance_;
}

ShotlinesType* ShotlinesType::default_instance_ = NULL;

ShotlinesType* ShotlinesType::New() const {
  return new ShotlinesType;
}

void ShotlinesType::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (has__id()) {
      if (_id_ != NULL) _id_->::edu::vanderbilt::isis::meta::ID::Clear();
    }
  }
  shotline_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ShotlinesType::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .edu.vanderbilt.isis.meta.ShotlineType Shotline = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Shotline:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_shotline()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_Shotline;
        if (input->ExpectTag(18)) goto parse__id;
        break;
      }

      // optional .edu.vanderbilt.isis.meta.ID _id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse__id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ShotlinesType::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .edu.vanderbilt.isis.meta.ShotlineType Shotline = 1;
  for (int i = 0; i < this->shotline_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->shotline(i), output);
  }

  // optional .edu.vanderbilt.isis.meta.ID _id = 2;
  if (has__id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ShotlinesType::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .edu.vanderbilt.isis.meta.ShotlineType Shotline = 1;
  for (int i = 0; i < this->shotline_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->shotline(i), target);
  }

  // optional .edu.vanderbilt.isis.meta.ID _id = 2;
  if (has__id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ShotlinesType::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional .edu.vanderbilt.isis.meta.ID _id = 2;
    if (has__id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_id());
    }

  }
  // repeated .edu.vanderbilt.isis.meta.ShotlineType Shotline = 1;
  total_size += 1 * this->shotline_size();
  for (int i = 0; i < this->shotline_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->shotline(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ShotlinesType::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ShotlinesType* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ShotlinesType*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ShotlinesType::MergeFrom(const ShotlinesType& from) {
  GOOGLE_CHECK_NE(&from, this);
  shotline_.MergeFrom(from.shotline_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has__id()) {
      mutable__id()->::edu::vanderbilt::isis::meta::ID::MergeFrom(from._id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ShotlinesType::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ShotlinesType::CopyFrom(const ShotlinesType& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShotlinesType::IsInitialized() const {

  for (int i = 0; i < shotline_size(); i++) {
    if (!this->shotline(i).IsInitialized()) return false;
  }
  if (has__id()) {
    if (!this->_id().IsInitialized()) return false;
  }
  return true;
}

void ShotlinesType::Swap(ShotlinesType* other) {
  if (other != this) {
    shotline_.Swap(&other->shotline_);
    std::swap(_id_, other->_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ShotlinesType::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ShotlinesType_descriptor_;
  metadata.reflection = ShotlinesType_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SolverType::kElementShapeTypeFieldNumber;
const int SolverType::kMeshTypeFieldNumber;
const int SolverType::kShellElementTypeFieldNumber;
const int SolverType::kTypeFieldNumber;
const int SolverType::kIdFieldNumber;
#endif  // !_MSC_VER

SolverType::SolverType()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SolverType::InitAsDefaultInstance() {
  _id_ = const_cast< ::edu::vanderbilt::isis::meta::ID*>(&::edu::vanderbilt::isis::meta::ID::default_instance());
}

SolverType::SolverType(const SolverType& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SolverType::SharedCtor() {
  _cached_size_ = 0;
  elementshapetype_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  meshtype_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  shellelementtype_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  _id_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SolverType::~SolverType() {
  SharedDtor();
}

void SolverType::SharedDtor() {
  if (elementshapetype_ != &::google::protobuf::internal::kEmptyString) {
    delete elementshapetype_;
  }
  if (meshtype_ != &::google::protobuf::internal::kEmptyString) {
    delete meshtype_;
  }
  if (shellelementtype_ != &::google::protobuf::internal::kEmptyString) {
    delete shellelementtype_;
  }
  if (type_ != &::google::protobuf::internal::kEmptyString) {
    delete type_;
  }
  if (this != default_instance_) {
    delete _id_;
  }
}

void SolverType::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SolverType::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SolverType_descriptor_;
}

const SolverType& SolverType::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AssemblyInterface_2eproto();
  return *default_instance_;
}

SolverType* SolverType::default_instance_ = NULL;

SolverType* SolverType::New() const {
  return new SolverType;
}

void SolverType::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_elementshapetype()) {
      if (elementshapetype_ != &::google::protobuf::internal::kEmptyString) {
        elementshapetype_->clear();
      }
    }
    if (has_meshtype()) {
      if (meshtype_ != &::google::protobuf::internal::kEmptyString) {
        meshtype_->clear();
      }
    }
    if (has_shellelementtype()) {
      if (shellelementtype_ != &::google::protobuf::internal::kEmptyString) {
        shellelementtype_->clear();
      }
    }
    if (has_type()) {
      if (type_ != &::google::protobuf::internal::kEmptyString) {
        type_->clear();
      }
    }
    if (has__id()) {
      if (_id_ != NULL) _id_->::edu::vanderbilt::isis::meta::ID::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SolverType::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string ElementShapeType = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_elementshapetype()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->elementshapetype().data(), this->elementshapetype().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_MeshType;
        break;
      }

      // required string MeshType = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_MeshType:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_meshtype()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->meshtype().data(), this->meshtype().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_ShellElementType;
        break;
      }

      // required string ShellElementType = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ShellElementType:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_shellelementtype()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->shellelementtype().data(), this->shellelementtype().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_Type;
        break;
      }

      // required string Type = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->type().data(), this->type().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse__id;
        break;
      }

      // optional .edu.vanderbilt.isis.meta.ID _id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse__id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SolverType::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string ElementShapeType = 1;
  if (has_elementshapetype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->elementshapetype().data(), this->elementshapetype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->elementshapetype(), output);
  }

  // required string MeshType = 2;
  if (has_meshtype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->meshtype().data(), this->meshtype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->meshtype(), output);
  }

  // required string ShellElementType = 3;
  if (has_shellelementtype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->shellelementtype().data(), this->shellelementtype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->shellelementtype(), output);
  }

  // required string Type = 4;
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->type(), output);
  }

  // optional .edu.vanderbilt.isis.meta.ID _id = 5;
  if (has__id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SolverType::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string ElementShapeType = 1;
  if (has_elementshapetype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->elementshapetype().data(), this->elementshapetype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->elementshapetype(), target);
  }

  // required string MeshType = 2;
  if (has_meshtype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->meshtype().data(), this->meshtype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->meshtype(), target);
  }

  // required string ShellElementType = 3;
  if (has_shellelementtype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->shellelementtype().data(), this->shellelementtype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->shellelementtype(), target);
  }

  // required string Type = 4;
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->type(), target);
  }

  // optional .edu.vanderbilt.isis.meta.ID _id = 5;
  if (has__id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SolverType::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string ElementShapeType = 1;
    if (has_elementshapetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->elementshapetype());
    }

    // required string MeshType = 2;
    if (has_meshtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->meshtype());
    }

    // required string ShellElementType = 3;
    if (has_shellelementtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->shellelementtype());
    }

    // required string Type = 4;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->type());
    }

    // optional .edu.vanderbilt.isis.meta.ID _id = 5;
    if (has__id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SolverType::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SolverType* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SolverType*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SolverType::MergeFrom(const SolverType& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_elementshapetype()) {
      set_elementshapetype(from.elementshapetype());
    }
    if (from.has_meshtype()) {
      set_meshtype(from.meshtype());
    }
    if (from.has_shellelementtype()) {
      set_shellelementtype(from.shellelementtype());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has__id()) {
      mutable__id()->::edu::vanderbilt::isis::meta::ID::MergeFrom(from._id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SolverType::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SolverType::CopyFrom(const SolverType& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SolverType::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  if (has__id()) {
    if (!this->_id().IsInitialized()) return false;
  }
  return true;
}

void SolverType::Swap(SolverType* other) {
  if (other != this) {
    std::swap(elementshapetype_, other->elementshapetype_);
    std::swap(meshtype_, other->meshtype_);
    std::swap(shellelementtype_, other->shellelementtype_);
    std::swap(type_, other->type_);
    std::swap(_id_, other->_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SolverType::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SolverType_descriptor_;
  metadata.reflection = SolverType_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SolversType::kSolverFieldNumber;
const int SolversType::kIdFieldNumber;
#endif  // !_MSC_VER

SolversType::SolversType()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SolversType::InitAsDefaultInstance() {
  _id_ = const_cast< ::edu::vanderbilt::isis::meta::ID*>(&::edu::vanderbilt::isis::meta::ID::default_instance());
}

SolversType::SolversType(const SolversType& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SolversType::SharedCtor() {
  _cached_size_ = 0;
  _id_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SolversType::~SolversType() {
  SharedDtor();
}

void SolversType::SharedDtor() {
  if (this != default_instance_) {
    delete _id_;
  }
}

void SolversType::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SolversType::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SolversType_descriptor_;
}

const SolversType& SolversType::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AssemblyInterface_2eproto();
  return *default_instance_;
}

SolversType* SolversType::default_instance_ = NULL;

SolversType* SolversType::New() const {
  return new SolversType;
}

void SolversType::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (has__id()) {
      if (_id_ != NULL) _id_->::edu::vanderbilt::isis::meta::ID::Clear();
    }
  }
  solver_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SolversType::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .edu.vanderbilt.isis.meta.SolverType Solver = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Solver:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_solver()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_Solver;
        if (input->ExpectTag(18)) goto parse__id;
        break;
      }

      // optional .edu.vanderbilt.isis.meta.ID _id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse__id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SolversType::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .edu.vanderbilt.isis.meta.SolverType Solver = 1;
  for (int i = 0; i < this->solver_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->solver(i), output);
  }

  // optional .edu.vanderbilt.isis.meta.ID _id = 2;
  if (has__id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SolversType::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .edu.vanderbilt.isis.meta.SolverType Solver = 1;
  for (int i = 0; i < this->solver_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->solver(i), target);
  }

  // optional .edu.vanderbilt.isis.meta.ID _id = 2;
  if (has__id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SolversType::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional .edu.vanderbilt.isis.meta.ID _id = 2;
    if (has__id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_id());
    }

  }
  // repeated .edu.vanderbilt.isis.meta.SolverType Solver = 1;
  total_size += 1 * this->solver_size();
  for (int i = 0; i < this->solver_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->solver(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SolversType::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SolversType* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SolversType*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SolversType::MergeFrom(const SolversType& from) {
  GOOGLE_CHECK_NE(&from, this);
  solver_.MergeFrom(from.solver_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has__id()) {
      mutable__id()->::edu::vanderbilt::isis::meta::ID::MergeFrom(from._id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SolversType::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SolversType::CopyFrom(const SolversType& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SolversType::IsInitialized() const {

  for (int i = 0; i < solver_size(); i++) {
    if (!this->solver(i).IsInitialized()) return false;
  }
  if (has__id()) {
    if (!this->_id().IsInitialized()) return false;
  }
  return true;
}

void SolversType::Swap(SolversType* other) {
  if (other != this) {
    solver_.Swap(&other->solver_);
    std::swap(_id_, other->_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SolversType::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SolversType_descriptor_;
  metadata.reflection = SolversType_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SphericalType::kKinematicFeatureFieldNumber;
const int SphericalType::kCFMFieldNumber;
const int SphericalType::kConnectedComponentIDFieldNumber;
const int SphericalType::kConnectionIDFieldNumber;
const int SphericalType::kERPFieldNumber;
const int SphericalType::kFeatureInterfaceTypeFieldNumber;
const int SphericalType::kIdFieldNumber;
#endif  // !_MSC_VER

SphericalType::SphericalType()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SphericalType::InitAsDefaultInstance() {
  _id_ = const_cast< ::edu::vanderbilt::isis::meta::ID*>(&::edu::vanderbilt::isis::meta::ID::default_instance());
}

SphericalType::SphericalType(const SphericalType& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SphericalType::SharedCtor() {
  _cached_size_ = 0;
  cfm_ = 0;
  connectedcomponentid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  connectionid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  erp_ = 0;
  featureinterfacetype_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  _id_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SphericalType::~SphericalType() {
  SharedDtor();
}

void SphericalType::SharedDtor() {
  if (connectedcomponentid_ != &::google::protobuf::internal::kEmptyString) {
    delete connectedcomponentid_;
  }
  if (connectionid_ != &::google::protobuf::internal::kEmptyString) {
    delete connectionid_;
  }
  if (featureinterfacetype_ != &::google::protobuf::internal::kEmptyString) {
    delete featureinterfacetype_;
  }
  if (this != default_instance_) {
    delete _id_;
  }
}

void SphericalType::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SphericalType::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SphericalType_descriptor_;
}

const SphericalType& SphericalType::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AssemblyInterface_2eproto();
  return *default_instance_;
}

SphericalType* SphericalType::default_instance_ = NULL;

SphericalType* SphericalType::New() const {
  return new SphericalType;
}

void SphericalType::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    cfm_ = 0;
    if (has_connectedcomponentid()) {
      if (connectedcomponentid_ != &::google::protobuf::internal::kEmptyString) {
        connectedcomponentid_->clear();
      }
    }
    if (has_connectionid()) {
      if (connectionid_ != &::google::protobuf::internal::kEmptyString) {
        connectionid_->clear();
      }
    }
    erp_ = 0;
    if (has_featureinterfacetype()) {
      if (featureinterfacetype_ != &::google::protobuf::internal::kEmptyString) {
        featureinterfacetype_->clear();
      }
    }
    if (has__id()) {
      if (_id_ != NULL) _id_->::edu::vanderbilt::isis::meta::ID::Clear();
    }
  }
  kinematicfeature_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SphericalType::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .edu.vanderbilt.isis.meta.KinematicFeatureType KinematicFeature = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_KinematicFeature:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_kinematicfeature()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_KinematicFeature;
        if (input->ExpectTag(17)) goto parse_CFM;
        break;
      }

      // required double CFM = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_CFM:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &cfm_)));
          set_has_cfm();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_ConnectedComponentID;
        break;
      }

      // required string ConnectedComponentID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ConnectedComponentID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_connectedcomponentid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->connectedcomponentid().data(), this->connectedcomponentid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_ConnectionID;
        break;
      }

      // required string ConnectionID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ConnectionID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_connectionid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->connectionid().data(), this->connectionid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(41)) goto parse_ERP;
        break;
      }

      // required double ERP = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_ERP:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &erp_)));
          set_has_erp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_FeatureInterfaceType;
        break;
      }

      // required string FeatureInterfaceType = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_FeatureInterfaceType:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_featureinterfacetype()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->featureinterfacetype().data(), this->featureinterfacetype().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse__id;
        break;
      }

      // optional .edu.vanderbilt.isis.meta.ID _id = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse__id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SphericalType::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .edu.vanderbilt.isis.meta.KinematicFeatureType KinematicFeature = 1;
  for (int i = 0; i < this->kinematicfeature_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->kinematicfeature(i), output);
  }

  // required double CFM = 2;
  if (has_cfm()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->cfm(), output);
  }

  // required string ConnectedComponentID = 3;
  if (has_connectedcomponentid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->connectedcomponentid().data(), this->connectedcomponentid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->connectedcomponentid(), output);
  }

  // required string ConnectionID = 4;
  if (has_connectionid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->connectionid().data(), this->connectionid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->connectionid(), output);
  }

  // required double ERP = 5;
  if (has_erp()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->erp(), output);
  }

  // required string FeatureInterfaceType = 6;
  if (has_featureinterfacetype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->featureinterfacetype().data(), this->featureinterfacetype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->featureinterfacetype(), output);
  }

  // optional .edu.vanderbilt.isis.meta.ID _id = 7;
  if (has__id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SphericalType::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .edu.vanderbilt.isis.meta.KinematicFeatureType KinematicFeature = 1;
  for (int i = 0; i < this->kinematicfeature_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->kinematicfeature(i), target);
  }

  // required double CFM = 2;
  if (has_cfm()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->cfm(), target);
  }

  // required string ConnectedComponentID = 3;
  if (has_connectedcomponentid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->connectedcomponentid().data(), this->connectedcomponentid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->connectedcomponentid(), target);
  }

  // required string ConnectionID = 4;
  if (has_connectionid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->connectionid().data(), this->connectionid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->connectionid(), target);
  }

  // required double ERP = 5;
  if (has_erp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->erp(), target);
  }

  // required string FeatureInterfaceType = 6;
  if (has_featureinterfacetype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->featureinterfacetype().data(), this->featureinterfacetype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->featureinterfacetype(), target);
  }

  // optional .edu.vanderbilt.isis.meta.ID _id = 7;
  if (has__id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SphericalType::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // required double CFM = 2;
    if (has_cfm()) {
      total_size += 1 + 8;
    }

    // required string ConnectedComponentID = 3;
    if (has_connectedcomponentid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->connectedcomponentid());
    }

    // required string ConnectionID = 4;
    if (has_connectionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->connectionid());
    }

    // required double ERP = 5;
    if (has_erp()) {
      total_size += 1 + 8;
    }

    // required string FeatureInterfaceType = 6;
    if (has_featureinterfacetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->featureinterfacetype());
    }

    // optional .edu.vanderbilt.isis.meta.ID _id = 7;
    if (has__id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_id());
    }

  }
  // repeated .edu.vanderbilt.isis.meta.KinematicFeatureType KinematicFeature = 1;
  total_size += 1 * this->kinematicfeature_size();
  for (int i = 0; i < this->kinematicfeature_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->kinematicfeature(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SphericalType::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SphericalType* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SphericalType*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SphericalType::MergeFrom(const SphericalType& from) {
  GOOGLE_CHECK_NE(&from, this);
  kinematicfeature_.MergeFrom(from.kinematicfeature_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_cfm()) {
      set_cfm(from.cfm());
    }
    if (from.has_connectedcomponentid()) {
      set_connectedcomponentid(from.connectedcomponentid());
    }
    if (from.has_connectionid()) {
      set_connectionid(from.connectionid());
    }
    if (from.has_erp()) {
      set_erp(from.erp());
    }
    if (from.has_featureinterfacetype()) {
      set_featureinterfacetype(from.featureinterfacetype());
    }
    if (from.has__id()) {
      mutable__id()->::edu::vanderbilt::isis::meta::ID::MergeFrom(from._id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SphericalType::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SphericalType::CopyFrom(const SphericalType& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SphericalType::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003e) != 0x0000003e) return false;

  for (int i = 0; i < kinematicfeature_size(); i++) {
    if (!this->kinematicfeature(i).IsInitialized()) return false;
  }
  if (has__id()) {
    if (!this->_id().IsInitialized()) return false;
  }
  return true;
}

void SphericalType::Swap(SphericalType* other) {
  if (other != this) {
    kinematicfeature_.Swap(&other->kinematicfeature_);
    std::swap(cfm_, other->cfm_);
    std::swap(connectedcomponentid_, other->connectedcomponentid_);
    std::swap(connectionid_, other->connectionid_);
    std::swap(erp_, other->erp_);
    std::swap(featureinterfacetype_, other->featureinterfacetype_);
    std::swap(_id_, other->_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SphericalType::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SphericalType_descriptor_;
  metadata.reflection = SphericalType_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SurfaceTreatmentType::kGeometryFieldNumber;
const int SurfaceTreatmentType::kAdjoiningPartsFieldNumber;
const int SurfaceTreatmentType::kIdFieldNumber;
#endif  // !_MSC_VER

SurfaceTreatmentType::SurfaceTreatmentType()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SurfaceTreatmentType::InitAsDefaultInstance() {
  geometry_ = const_cast< ::edu::vanderbilt::isis::meta::GeometryType*>(&::edu::vanderbilt::isis::meta::GeometryType::default_instance());
  _id_ = const_cast< ::edu::vanderbilt::isis::meta::ID*>(&::edu::vanderbilt::isis::meta::ID::default_instance());
}

SurfaceTreatmentType::SurfaceTreatmentType(const SurfaceTreatmentType& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SurfaceTreatmentType::SharedCtor() {
  _cached_size_ = 0;
  geometry_ = NULL;
  adjoiningparts_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  _id_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SurfaceTreatmentType::~SurfaceTreatmentType() {
  SharedDtor();
}

void SurfaceTreatmentType::SharedDtor() {
  if (adjoiningparts_ != &::google::protobuf::internal::kEmptyString) {
    delete adjoiningparts_;
  }
  if (this != default_instance_) {
    delete geometry_;
    delete _id_;
  }
}

void SurfaceTreatmentType::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SurfaceTreatmentType::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SurfaceTreatmentType_descriptor_;
}

const SurfaceTreatmentType& SurfaceTreatmentType::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AssemblyInterface_2eproto();
  return *default_instance_;
}

SurfaceTreatmentType* SurfaceTreatmentType::default_instance_ = NULL;

SurfaceTreatmentType* SurfaceTreatmentType::New() const {
  return new SurfaceTreatmentType;
}

void SurfaceTreatmentType::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_geometry()) {
      if (geometry_ != NULL) geometry_->::edu::vanderbilt::isis::meta::GeometryType::Clear();
    }
    if (has_adjoiningparts()) {
      if (adjoiningparts_ != &::google::protobuf::internal::kEmptyString) {
        adjoiningparts_->clear();
      }
    }
    if (has__id()) {
      if (_id_ != NULL) _id_->::edu::vanderbilt::isis::meta::ID::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SurfaceTreatmentType::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .edu.vanderbilt.isis.meta.GeometryType Geometry = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_geometry()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_AdjoiningParts;
        break;
      }

      // optional string AdjoiningParts = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_AdjoiningParts:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_adjoiningparts()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->adjoiningparts().data(), this->adjoiningparts().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse__id;
        break;
      }

      // optional .edu.vanderbilt.isis.meta.ID _id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse__id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SurfaceTreatmentType::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .edu.vanderbilt.isis.meta.GeometryType Geometry = 1;
  if (has_geometry()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->geometry(), output);
  }

  // optional string AdjoiningParts = 2;
  if (has_adjoiningparts()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->adjoiningparts().data(), this->adjoiningparts().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->adjoiningparts(), output);
  }

  // optional .edu.vanderbilt.isis.meta.ID _id = 3;
  if (has__id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SurfaceTreatmentType::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .edu.vanderbilt.isis.meta.GeometryType Geometry = 1;
  if (has_geometry()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->geometry(), target);
  }

  // optional string AdjoiningParts = 2;
  if (has_adjoiningparts()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->adjoiningparts().data(), this->adjoiningparts().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->adjoiningparts(), target);
  }

  // optional .edu.vanderbilt.isis.meta.ID _id = 3;
  if (has__id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SurfaceTreatmentType::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .edu.vanderbilt.isis.meta.GeometryType Geometry = 1;
    if (has_geometry()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->geometry());
    }

    // optional string AdjoiningParts = 2;
    if (has_adjoiningparts()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->adjoiningparts());
    }

    // optional .edu.vanderbilt.isis.meta.ID _id = 3;
    if (has__id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SurfaceTreatmentType::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SurfaceTreatmentType* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SurfaceTreatmentType*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SurfaceTreatmentType::MergeFrom(const SurfaceTreatmentType& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_geometry()) {
      mutable_geometry()->::edu::vanderbilt::isis::meta::GeometryType::MergeFrom(from.geometry());
    }
    if (from.has_adjoiningparts()) {
      set_adjoiningparts(from.adjoiningparts());
    }
    if (from.has__id()) {
      mutable__id()->::edu::vanderbilt::isis::meta::ID::MergeFrom(from._id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SurfaceTreatmentType::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SurfaceTreatmentType::CopyFrom(const SurfaceTreatmentType& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SurfaceTreatmentType::IsInitialized() const {

  if (has_geometry()) {
    if (!this->geometry().IsInitialized()) return false;
  }
  if (has__id()) {
    if (!this->_id().IsInitialized()) return false;
  }
  return true;
}

void SurfaceTreatmentType::Swap(SurfaceTreatmentType* other) {
  if (other != this) {
    std::swap(geometry_, other->geometry_);
    std::swap(adjoiningparts_, other->adjoiningparts_);
    std::swap(_id_, other->_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SurfaceTreatmentType::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SurfaceTreatmentType_descriptor_;
  metadata.reflection = SurfaceTreatmentType_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SurfaceTreatmentsType::kSurfaceTreatmentFieldNumber;
const int SurfaceTreatmentsType::kIdFieldNumber;
#endif  // !_MSC_VER

SurfaceTreatmentsType::SurfaceTreatmentsType()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SurfaceTreatmentsType::InitAsDefaultInstance() {
  _id_ = const_cast< ::edu::vanderbilt::isis::meta::ID*>(&::edu::vanderbilt::isis::meta::ID::default_instance());
}

SurfaceTreatmentsType::SurfaceTreatmentsType(const SurfaceTreatmentsType& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SurfaceTreatmentsType::SharedCtor() {
  _cached_size_ = 0;
  _id_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SurfaceTreatmentsType::~SurfaceTreatmentsType() {
  SharedDtor();
}

void SurfaceTreatmentsType::SharedDtor() {
  if (this != default_instance_) {
    delete _id_;
  }
}

void SurfaceTreatmentsType::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SurfaceTreatmentsType::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SurfaceTreatmentsType_descriptor_;
}

const SurfaceTreatmentsType& SurfaceTreatmentsType::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AssemblyInterface_2eproto();
  return *default_instance_;
}

SurfaceTreatmentsType* SurfaceTreatmentsType::default_instance_ = NULL;

SurfaceTreatmentsType* SurfaceTreatmentsType::New() const {
  return new SurfaceTreatmentsType;
}

void SurfaceTreatmentsType::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (has__id()) {
      if (_id_ != NULL) _id_->::edu::vanderbilt::isis::meta::ID::Clear();
    }
  }
  surfacetreatment_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SurfaceTreatmentsType::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .edu.vanderbilt.isis.meta.SurfaceTreatmentType SurfaceTreatment = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_SurfaceTreatment:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_surfacetreatment()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_SurfaceTreatment;
        if (input->ExpectTag(18)) goto parse__id;
        break;
      }

      // optional .edu.vanderbilt.isis.meta.ID _id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse__id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SurfaceTreatmentsType::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .edu.vanderbilt.isis.meta.SurfaceTreatmentType SurfaceTreatment = 1;
  for (int i = 0; i < this->surfacetreatment_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->surfacetreatment(i), output);
  }

  // optional .edu.vanderbilt.isis.meta.ID _id = 2;
  if (has__id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SurfaceTreatmentsType::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .edu.vanderbilt.isis.meta.SurfaceTreatmentType SurfaceTreatment = 1;
  for (int i = 0; i < this->surfacetreatment_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->surfacetreatment(i), target);
  }

  // optional .edu.vanderbilt.isis.meta.ID _id = 2;
  if (has__id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SurfaceTreatmentsType::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional .edu.vanderbilt.isis.meta.ID _id = 2;
    if (has__id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_id());
    }

  }
  // repeated .edu.vanderbilt.isis.meta.SurfaceTreatmentType SurfaceTreatment = 1;
  total_size += 1 * this->surfacetreatment_size();
  for (int i = 0; i < this->surfacetreatment_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->surfacetreatment(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SurfaceTreatmentsType::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SurfaceTreatmentsType* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SurfaceTreatmentsType*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SurfaceTreatmentsType::MergeFrom(const SurfaceTreatmentsType& from) {
  GOOGLE_CHECK_NE(&from, this);
  surfacetreatment_.MergeFrom(from.surfacetreatment_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has__id()) {
      mutable__id()->::edu::vanderbilt::isis::meta::ID::MergeFrom(from._id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SurfaceTreatmentsType::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SurfaceTreatmentsType::CopyFrom(const SurfaceTreatmentsType& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SurfaceTreatmentsType::IsInitialized() const {

  for (int i = 0; i < surfacetreatment_size(); i++) {
    if (!this->surfacetreatment(i).IsInitialized()) return false;
  }
  if (has__id()) {
    if (!this->_id().IsInitialized()) return false;
  }
  return true;
}

void SurfaceTreatmentsType::Swap(SurfaceTreatmentsType* other) {
  if (other != this) {
    surfacetreatment_.Swap(&other->surfacetreatment_);
    std::swap(_id_, other->_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SurfaceTreatmentsType::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SurfaceTreatmentsType_descriptor_;
  metadata.reflection = SurfaceTreatmentsType_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ToleranceType::kAnalysisIDFieldNumber;
const int ToleranceType::kIdFieldNumber;
#endif  // !_MSC_VER

ToleranceType::ToleranceType()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ToleranceType::InitAsDefaultInstance() {
  _id_ = const_cast< ::edu::vanderbilt::isis::meta::ID*>(&::edu::vanderbilt::isis::meta::ID::default_instance());
}

ToleranceType::ToleranceType(const ToleranceType& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ToleranceType::SharedCtor() {
  _cached_size_ = 0;
  analysisid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  _id_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ToleranceType::~ToleranceType() {
  SharedDtor();
}

void ToleranceType::SharedDtor() {
  if (analysisid_ != &::google::protobuf::internal::kEmptyString) {
    delete analysisid_;
  }
  if (this != default_instance_) {
    delete _id_;
  }
}

void ToleranceType::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ToleranceType::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ToleranceType_descriptor_;
}

const ToleranceType& ToleranceType::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AssemblyInterface_2eproto();
  return *default_instance_;
}

ToleranceType* ToleranceType::default_instance_ = NULL;

ToleranceType* ToleranceType::New() const {
  return new ToleranceType;
}

void ToleranceType::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_analysisid()) {
      if (analysisid_ != &::google::protobuf::internal::kEmptyString) {
        analysisid_->clear();
      }
    }
    if (has__id()) {
      if (_id_ != NULL) _id_->::edu::vanderbilt::isis::meta::ID::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ToleranceType::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string AnalysisID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_analysisid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->analysisid().data(), this->analysisid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse__id;
        break;
      }

      // optional .edu.vanderbilt.isis.meta.ID _id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse__id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ToleranceType::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string AnalysisID = 1;
  if (has_analysisid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->analysisid().data(), this->analysisid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->analysisid(), output);
  }

  // optional .edu.vanderbilt.isis.meta.ID _id = 2;
  if (has__id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ToleranceType::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string AnalysisID = 1;
  if (has_analysisid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->analysisid().data(), this->analysisid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->analysisid(), target);
  }

  // optional .edu.vanderbilt.isis.meta.ID _id = 2;
  if (has__id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ToleranceType::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string AnalysisID = 1;
    if (has_analysisid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->analysisid());
    }

    // optional .edu.vanderbilt.isis.meta.ID _id = 2;
    if (has__id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ToleranceType::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ToleranceType* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ToleranceType*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ToleranceType::MergeFrom(const ToleranceType& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_analysisid()) {
      set_analysisid(from.analysisid());
    }
    if (from.has__id()) {
      mutable__id()->::edu::vanderbilt::isis::meta::ID::MergeFrom(from._id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ToleranceType::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ToleranceType::CopyFrom(const ToleranceType& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ToleranceType::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has__id()) {
    if (!this->_id().IsInitialized()) return false;
  }
  return true;
}

void ToleranceType::Swap(ToleranceType* other) {
  if (other != this) {
    std::swap(analysisid_, other->analysisid_);
    std::swap(_id_, other->_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ToleranceType::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ToleranceType_descriptor_;
  metadata.reflection = ToleranceType_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TranslationType::kUnitsFieldNumber;
const int TranslationType::kIdFieldNumber;
const int TranslationType::kXFieldNumber;
const int TranslationType::kYFieldNumber;
const int TranslationType::kZFieldNumber;
#endif  // !_MSC_VER

TranslationType::TranslationType()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TranslationType::InitAsDefaultInstance() {
  _id_ = const_cast< ::edu::vanderbilt::isis::meta::ID*>(&::edu::vanderbilt::isis::meta::ID::default_instance());
}

TranslationType::TranslationType(const TranslationType& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TranslationType::SharedCtor() {
  _cached_size_ = 0;
  units_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  _id_ = NULL;
  x_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  y_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  z_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TranslationType::~TranslationType() {
  SharedDtor();
}

void TranslationType::SharedDtor() {
  if (units_ != &::google::protobuf::internal::kEmptyString) {
    delete units_;
  }
  if (x_ != &::google::protobuf::internal::kEmptyString) {
    delete x_;
  }
  if (y_ != &::google::protobuf::internal::kEmptyString) {
    delete y_;
  }
  if (z_ != &::google::protobuf::internal::kEmptyString) {
    delete z_;
  }
  if (this != default_instance_) {
    delete _id_;
  }
}

void TranslationType::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TranslationType::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TranslationType_descriptor_;
}

const TranslationType& TranslationType::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AssemblyInterface_2eproto();
  return *default_instance_;
}

TranslationType* TranslationType::default_instance_ = NULL;

TranslationType* TranslationType::New() const {
  return new TranslationType;
}

void TranslationType::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_units()) {
      if (units_ != &::google::protobuf::internal::kEmptyString) {
        units_->clear();
      }
    }
    if (has__id()) {
      if (_id_ != NULL) _id_->::edu::vanderbilt::isis::meta::ID::Clear();
    }
    if (has_x()) {
      if (x_ != &::google::protobuf::internal::kEmptyString) {
        x_->clear();
      }
    }
    if (has_y()) {
      if (y_ != &::google::protobuf::internal::kEmptyString) {
        y_->clear();
      }
    }
    if (has_z()) {
      if (z_ != &::google::protobuf::internal::kEmptyString) {
        z_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TranslationType::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string Units = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_units()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->units().data(), this->units().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse__id;
        break;
      }

      // optional .edu.vanderbilt.isis.meta.ID _id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse__id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_x;
        break;
      }

      // required string x = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_x:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_x()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->x().data(), this->x().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_y;
        break;
      }

      // required string y = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_y:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_y()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->y().data(), this->y().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_z;
        break;
      }

      // required string z = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_z:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_z()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->z().data(), this->z().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TranslationType::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string Units = 1;
  if (has_units()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->units().data(), this->units().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->units(), output);
  }

  // optional .edu.vanderbilt.isis.meta.ID _id = 2;
  if (has__id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_id(), output);
  }

  // required string x = 3;
  if (has_x()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->x().data(), this->x().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->x(), output);
  }

  // required string y = 4;
  if (has_y()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->y().data(), this->y().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->y(), output);
  }

  // required string z = 5;
  if (has_z()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->z().data(), this->z().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->z(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TranslationType::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string Units = 1;
  if (has_units()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->units().data(), this->units().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->units(), target);
  }

  // optional .edu.vanderbilt.isis.meta.ID _id = 2;
  if (has__id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->_id(), target);
  }

  // required string x = 3;
  if (has_x()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->x().data(), this->x().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->x(), target);
  }

  // required string y = 4;
  if (has_y()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->y().data(), this->y().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->y(), target);
  }

  // required string z = 5;
  if (has_z()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->z().data(), this->z().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->z(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TranslationType::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string Units = 1;
    if (has_units()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->units());
    }

    // optional .edu.vanderbilt.isis.meta.ID _id = 2;
    if (has__id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_id());
    }

    // required string x = 3;
    if (has_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->x());
    }

    // required string y = 4;
    if (has_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->y());
    }

    // required string z = 5;
    if (has_z()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->z());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TranslationType::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TranslationType* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TranslationType*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TranslationType::MergeFrom(const TranslationType& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_units()) {
      set_units(from.units());
    }
    if (from.has__id()) {
      mutable__id()->::edu::vanderbilt::isis::meta::ID::MergeFrom(from._id());
    }
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
    if (from.has_z()) {
      set_z(from.z());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TranslationType::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TranslationType::CopyFrom(const TranslationType& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TranslationType::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001d) != 0x0000001d) return false;

  if (has__id()) {
    if (!this->_id().IsInitialized()) return false;
  }
  return true;
}

void TranslationType::Swap(TranslationType* other) {
  if (other != this) {
    std::swap(units_, other->units_);
    std::swap(_id_, other->_id_);
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(z_, other->z_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TranslationType::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TranslationType_descriptor_;
  metadata.reflection = TranslationType_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UnassembledComponentsType::kCADComponentFieldNumber;
const int UnassembledComponentsType::kIdFieldNumber;
#endif  // !_MSC_VER

UnassembledComponentsType::UnassembledComponentsType()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UnassembledComponentsType::InitAsDefaultInstance() {
  _id_ = const_cast< ::edu::vanderbilt::isis::meta::ID*>(&::edu::vanderbilt::isis::meta::ID::default_instance());
}

UnassembledComponentsType::UnassembledComponentsType(const UnassembledComponentsType& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UnassembledComponentsType::SharedCtor() {
  _cached_size_ = 0;
  _id_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UnassembledComponentsType::~UnassembledComponentsType() {
  SharedDtor();
}

void UnassembledComponentsType::SharedDtor() {
  if (this != default_instance_) {
    delete _id_;
  }
}

void UnassembledComponentsType::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UnassembledComponentsType::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UnassembledComponentsType_descriptor_;
}

const UnassembledComponentsType& UnassembledComponentsType::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AssemblyInterface_2eproto();
  return *default_instance_;
}

UnassembledComponentsType* UnassembledComponentsType::default_instance_ = NULL;

UnassembledComponentsType* UnassembledComponentsType::New() const {
  return new UnassembledComponentsType;
}

void UnassembledComponentsType::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (has__id()) {
      if (_id_ != NULL) _id_->::edu::vanderbilt::isis::meta::ID::Clear();
    }
  }
  cadcomponent_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UnassembledComponentsType::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .edu.vanderbilt.isis.meta.CADComponentType CADComponent = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_CADComponent:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_cadcomponent()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_CADComponent;
        if (input->ExpectTag(18)) goto parse__id;
        break;
      }

      // optional .edu.vanderbilt.isis.meta.ID _id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse__id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UnassembledComponentsType::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .edu.vanderbilt.isis.meta.CADComponentType CADComponent = 1;
  for (int i = 0; i < this->cadcomponent_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->cadcomponent(i), output);
  }

  // optional .edu.vanderbilt.isis.meta.ID _id = 2;
  if (has__id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UnassembledComponentsType::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .edu.vanderbilt.isis.meta.CADComponentType CADComponent = 1;
  for (int i = 0; i < this->cadcomponent_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->cadcomponent(i), target);
  }

  // optional .edu.vanderbilt.isis.meta.ID _id = 2;
  if (has__id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UnassembledComponentsType::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional .edu.vanderbilt.isis.meta.ID _id = 2;
    if (has__id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_id());
    }

  }
  // repeated .edu.vanderbilt.isis.meta.CADComponentType CADComponent = 1;
  total_size += 1 * this->cadcomponent_size();
  for (int i = 0; i < this->cadcomponent_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->cadcomponent(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UnassembledComponentsType::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UnassembledComponentsType* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UnassembledComponentsType*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UnassembledComponentsType::MergeFrom(const UnassembledComponentsType& from) {
  GOOGLE_CHECK_NE(&from, this);
  cadcomponent_.MergeFrom(from.cadcomponent_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has__id()) {
      mutable__id()->::edu::vanderbilt::isis::meta::ID::MergeFrom(from._id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UnassembledComponentsType::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UnassembledComponentsType::CopyFrom(const UnassembledComponentsType& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnassembledComponentsType::IsInitialized() const {

  for (int i = 0; i < cadcomponent_size(); i++) {
    if (!this->cadcomponent(i).IsInitialized()) return false;
  }
  if (has__id()) {
    if (!this->_id().IsInitialized()) return false;
  }
  return true;
}

void UnassembledComponentsType::Swap(UnassembledComponentsType* other) {
  if (other != this) {
    cadcomponent_.Swap(&other->cadcomponent_);
    std::swap(_id_, other->_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UnassembledComponentsType::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UnassembledComponentsType_descriptor_;
  metadata.reflection = UnassembledComponentsType_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UnitsType::kValueFieldNumber;
const int UnitsType::kIdFieldNumber;
#endif  // !_MSC_VER

UnitsType::UnitsType()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UnitsType::InitAsDefaultInstance() {
  _id_ = const_cast< ::edu::vanderbilt::isis::meta::ID*>(&::edu::vanderbilt::isis::meta::ID::default_instance());
}

UnitsType::UnitsType(const UnitsType& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UnitsType::SharedCtor() {
  _cached_size_ = 0;
  value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  _id_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UnitsType::~UnitsType() {
  SharedDtor();
}

void UnitsType::SharedDtor() {
  if (value_ != &::google::protobuf::internal::kEmptyString) {
    delete value_;
  }
  if (this != default_instance_) {
    delete _id_;
  }
}

void UnitsType::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UnitsType::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UnitsType_descriptor_;
}

const UnitsType& UnitsType::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AssemblyInterface_2eproto();
  return *default_instance_;
}

UnitsType* UnitsType::default_instance_ = NULL;

UnitsType* UnitsType::New() const {
  return new UnitsType;
}

void UnitsType::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_value()) {
      if (value_ != &::google::protobuf::internal::kEmptyString) {
        value_->clear();
      }
    }
    if (has__id()) {
      if (_id_ != NULL) _id_->::edu::vanderbilt::isis::meta::ID::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UnitsType::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string Value = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->value().data(), this->value().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse__id;
        break;
      }

      // optional .edu.vanderbilt.isis.meta.ID _id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse__id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UnitsType::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string Value = 1;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->value(), output);
  }

  // optional .edu.vanderbilt.isis.meta.ID _id = 2;
  if (has__id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UnitsType::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string Value = 1;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->value(), target);
  }

  // optional .edu.vanderbilt.isis.meta.ID _id = 2;
  if (has__id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UnitsType::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string Value = 1;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->value());
    }

    // optional .edu.vanderbilt.isis.meta.ID _id = 2;
    if (has__id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UnitsType::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UnitsType* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UnitsType*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UnitsType::MergeFrom(const UnitsType& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_value()) {
      set_value(from.value());
    }
    if (from.has__id()) {
      mutable__id()->::edu::vanderbilt::isis::meta::ID::MergeFrom(from._id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UnitsType::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UnitsType::CopyFrom(const UnitsType& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnitsType::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has__id()) {
    if (!this->_id().IsInitialized()) return false;
  }
  return true;
}

void UnitsType::Swap(UnitsType* other) {
  if (other != this) {
    std::swap(value_, other->value_);
    std::swap(_id_, other->_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UnitsType::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UnitsType_descriptor_;
  metadata.reflection = UnitsType_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace meta
}  // namespace isis
}  // namespace vanderbilt
}  // namespace edu

// @@protoc_insertion_point(global_scope)
